<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on 天心流水的博客</title>
        <link>https://qxzzf.com/posts/</link>
        <description>Recent content in Posts on 天心流水的博客</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Thu, 03 Sep 2020 07:00:00 +0000</lastBuildDate>
        <atom:link href="https://qxzzf.com/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>千寻的阅周刊 - 第7期</title>
            <link>https://qxzzf.com/posts/weekly-reading-7/</link>
            <pubDate>Thu, 03 Sep 2020 07:00:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/weekly-reading-7/</guid>
            <description> 商业·科技  “逆人性”的代餐，2个月融资数亿，是泡沫还是风口？ 阿里腾讯京东华为纷纷发力，互联网医疗究竟有何吸引力？ 刚刚，马斯克发布脑机接口新产品！三只小猪现场演示 | 爱范儿 没有结局，就是ofo的结局 帮红人恰饭的天下秀，市值为何能逼近400亿？  故事·现象  上海黑石公寓：100年前中国最好的公寓，今天奏响年轻人的“波西米亚狂想曲” 每晚有上百万人在云相亲，认真的那种 | 深氪 那些医生拍着拍着，就被大厂盯上了 考不上清华北大，连去街道办都“不够格”？ 隐秘“娃圈”：一个“成品娃”拍出22万元天价 职业coser是如何赚钱养活自己的？| 我们这一天_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili  观点·思考  只有流行，没有文化 | 众声 南海衝突與台海危局——中國對外開戰的可能性有多大？｜深度｜端傳媒 Initium Media “抱团养老”15年后散伙，不应被简单贴上“失败”标签 姑娘，长得好看有用吗？ - 壹心理 我说「我爱你」和别人说「我爱你」  知识·方法  这篇文章，讲透「复盘」 夺回对数据的控制权，试试用 Markdown 打造文本处理工作流 - 少数派 记忆一定是你自己的吗？也有可能是媒介塑造的 大多数人赚不到钱，来自于极差的执行力 怎样制造一场席卷全球的粮食危机？_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili  人物·电影  关于爱情和婚姻，这5部纪录片比肥皂剧说的更明白丨谷雨计划 15年前与海贼王齐名的《游戏王》，后来为啥不火了？ - 知乎 如果这个美少年还在，50岁了，但全世界都还记得他 控方证人_电影_bilibili_哔哩哔哩 放牛班的春天_电影_bilibili_哔哩哔哩 豆瓣9.6，要说高科技“潜伏”，我只服BBC！ 在叙利亚，一只塑料袋比爱马仕还管用  </description>
            <content type="html"><![CDATA[

<h2 id="商业-科技">商业·科技</h2>

<ul>
<li><a href="https://mp.weixin.qq.com/s/_jrRBH8AZ4UBVotHLjy_KA" target="_blank">“逆人性”的代餐，2个月融资数亿，是泡沫还是风口？</a></li>
<li><a href="https://mp.weixin.qq.com/s/_ZSlBIjUq5uSyo1HImkmlA" target="_blank">阿里腾讯京东华为纷纷发力，互联网医疗究竟有何吸引力？</a></li>
<li><a href="https://www.ifanr.com/1361753" target="_blank">刚刚，马斯克发布脑机接口新产品！三只小猪现场演示 | 爱范儿</a></li>
<li><a href="https://mp.weixin.qq.com/s/hKace44xFfFu5dyrL5507A" target="_blank">没有结局，就是ofo的结局</a></li>
<li><a href="https://mp.weixin.qq.com/s/uRCDZuEZtMs5wIQOTf67lg" target="_blank">帮红人恰饭的天下秀，市值为何能逼近400亿？</a></li>
</ul>

<h2 id="故事-现象">故事·现象</h2>

<ul>
<li><a href="https://mp.weixin.qq.com/s/aC21t8LbEeYE12yX8zup-g" target="_blank">上海黑石公寓：100年前中国最好的公寓，今天奏响年轻人的“波西米亚狂想曲”</a></li>
<li><a href="https://mp.weixin.qq.com/s/udhPxlj0oulf5XSP-Ts3Sg" target="_blank">每晚有上百万人在云相亲，认真的那种 | 深氪</a></li>
<li><a href="https://qingmang.me/articles/2736214500019174977/" target="_blank">那些医生拍着拍着，就被大厂盯上了</a></li>
<li><a href="https://mp.weixin.qq.com/s/R-DsMH5zUEuijxwHBwD4ag" target="_blank">考不上清华北大，连去街道办都“不够格”？</a></li>
<li><a href="https://mp.weixin.qq.com/s/5diN54bx1GAyZ4xU7RnL3A" target="_blank">隐秘“娃圈”：一个“成品娃”拍出22万元天价</a></li>
<li><a href="https://www.bilibili.com/video/BV1Dy4y1C7rY" target="_blank">职业coser是如何赚钱养活自己的？| 我们这一天_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></li>
</ul>

<h2 id="观点-思考">观点·思考</h2>

<ul>
<li><a href="https://mp.weixin.qq.com/s/JYIkqlUKqQv5bprJDffexA" target="_blank">只有流行，没有文化 | 众声</a></li>
<li><a href="https://theinitium.com/article/20200827-opinion-china-taiwan-usa-war/" target="_blank">南海衝突與台海危局——中國對外開戰的可能性有多大？｜深度｜端傳媒 Initium Media</a></li>
<li><a href="https://www.toutiao.com/i6851477434097893896" target="_blank">“抱团养老”15年后散伙，不应被简单贴上“失败”标签</a></li>
<li><a href="http://yiapi.xinli001.com/yi/article-content/100464056" target="_blank">姑娘，长得好看有用吗？ - 壹心理</a></li>
<li><a href="https://mp.weixin.qq.com/s/NP0ebwGD4moiTGpj1cyBcg" target="_blank">我说「我爱你」和别人说「我爱你」</a></li>
</ul>

<h2 id="知识-方法">知识·方法</h2>

<ul>
<li><a href="https://mp.weixin.qq.com/s/_8pDxh3l333o-TzCVw2wHw" target="_blank">这篇文章，讲透「复盘」</a></li>
<li><a href="https://sspai.com/post/62372" target="_blank">夺回对数据的控制权，试试用 Markdown 打造文本处理工作流 - 少数派</a></li>
<li><a href="https://mp.weixin.qq.com/s/G-_r0U1fmxwOkO6j2_eNTw" target="_blank">记忆一定是你自己的吗？也有可能是媒介塑造的</a></li>
<li><a href="https://mp.weixin.qq.com/s/XPiE3LuwGbVJxkjs-PkuqA" target="_blank">大多数人赚不到钱，来自于极差的执行力</a></li>
<li><a href="https://www.bilibili.com/video/BV1pk4y1y7ja" target="_blank">怎样制造一场席卷全球的粮食危机？_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></li>
</ul>

<h2 id="人物-电影">人物·电影</h2>

<ul>
<li><a href="https://mp.weixin.qq.com/s/5XLuMN93_Xx0B8AfsFgtDQ" target="_blank">关于爱情和婚姻，这5部纪录片比肥皂剧说的更明白丨谷雨计划</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/89997040" target="_blank">15年前与海贼王齐名的《游戏王》，后来为啥不火了？ - 知乎</a></li>
<li><a href="https://mp.weixin.qq.com/s/agpmGeUmnfUGTPy7yEb5HA" target="_blank">如果这个美少年还在，50岁了，但全世界都还记得他</a></li>
<li><a href="https://www.bilibili.com/bangumi/play/ep336425" target="_blank">控方证人_电影_bilibili_哔哩哔哩</a></li>
<li><a href="https://www.bilibili.com/bangumi/play/ep117130" target="_blank">放牛班的春天_电影_bilibili_哔哩哔哩</a></li>
<li><a href="https://mp.weixin.qq.com/s/mym8dhtXEPlM9hH1pWvSUA" target="_blank">豆瓣9.6，要说高科技“潜伏”，我只服BBC！</a></li>
<li><a href="https://mp.weixin.qq.com/s/mWJP67PYQxHvzpr5PdupbA" target="_blank">在叙利亚，一只塑料袋比爱马仕还管用</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>千寻的阅周刊 - 第6期</title>
            <link>https://qxzzf.com/posts/weekly-reading-6/</link>
            <pubDate>Thu, 27 Aug 2020 07:00:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/weekly-reading-6/</guid>
            <description>商业·科技  曾喊出“赶A超B”口号的第一弹，是如何自取灭亡的？-钛媒体官方网站 很快，人人都能拥有「第三条腿」 | 爱范儿 这家不务正业的游戏媒体正成为年轻人的新精神角落 刷单、刷粉、薅羊毛，互联网大厂难斗“灰产基建”接码平台？ 点映破纪录，《八佰》能复制《药神》《哪吒》的成功吗？  故事·现象  90后独居青年，我没你们想象的那么惨 【箭厂推荐】超生“黑户”回家以后：谁是我爸妈？_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili 在贵州屋脊的“云上摇滚小学”，有一场童年版《乐队的夏天》 伴侣犬寄宿学校：2岁柴犬换3个主人，社交明星犬曾被主人从4楼扔下|伴侣动物_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili 想当棋王的孩子，没有童年 | 镜相 对话林松果、赵涵漠：不是只有在大城市，人们才会谈论性别问题丨谷雨计划 ​疫情之后，他们帮湖北感染医护疗伤  观点·思考  up主花10w改造Van自驾旅行，值吗？Van Tour来了！【小墨与阿猴 Rolling 30】_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili 北京孩子高考，能比同龄人轻松多少？_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili 宠物看病太贵？资深宠物医生说养宠物就该有钱又有闲|伴侣动物_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili 消失的搜索框和百度们的自赎 深度 | 播客的春天 国人争光了！手机摄影获国际摄影大奖！？_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili  知识·方法  又一份英语学习指南 - ThoughtWorks洞见 &amp;ldquo;锟斤拷&amp;rdquo;的前世今生 【约片集】第38期 摄影师拍摄私房写真的费用成本是多少？素人模特拍摄全过程。_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili 刘谦的教学 - 【神技能】最强大脑？5分钟教你学会超强记忆术！！_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili 浅析LSM存储模型 - 知乎 贝爷教你练就应对任何危险的能力  人物·电影  翻开书发现有一颗被压扁的番茄，吓死人啦！——就是这样的东西 | Kakamu Masanari 一席第748位讲者_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili 一个人旅行的感觉，试过就不会忘记 我住在这里的理由 第三季：第18集_纪录片_bilibili_哔哩哔哩 跟踪？偷拍？私家侦探破案全纪实！【Aha视频】_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili 专访｜雷军的小米十年：真心话、笑话，Are you OK？ 离开体制内的工作，我决定零基础入行女保镖 | 她们的冒险</description>
            <content type="html"><![CDATA[

<h2 id="商业-科技">商业·科技</h2>

<ul>
<li><a href="https://www.tmtpost.com/4647037.html?code=081AfrFa1L5luz0zpWFa1z018b2AfrFd" target="_blank">曾喊出“赶A超B”口号的第一弹，是如何自取灭亡的？-钛媒体官方网站</a></li>
<li><a href="https://www.ifanr.com/1357474" target="_blank">很快，人人都能拥有「第三条腿」 | 爱范儿</a></li>
<li><a href="https://mp.weixin.qq.com/s/KpQMaJYaRDSTPoheWladKg" target="_blank">这家不务正业的游戏媒体正成为年轻人的新精神角落</a></li>
<li><a href="https://mp.weixin.qq.com/s/ZLW5j5d7Ilz5S_bIppaLFg" target="_blank">刷单、刷粉、薅羊毛，互联网大厂难斗“灰产基建”接码平台？</a></li>
<li><a href="https://mp.weixin.qq.com/s/ON57WeC4aZAxxAKANDRXgA" target="_blank">点映破纪录，《八佰》能复制《药神》《哪吒》的成功吗？</a></li>
</ul>

<h2 id="故事-现象">故事·现象</h2>

<ul>
<li><a href="https://mp.weixin.qq.com/s/mHQHPRJHkHd6TQRzRut3Ew" target="_blank">90后独居青年，我没你们想象的那么惨</a></li>
<li><a href="https://www.bilibili.com/video/BV1iZ4y1K7cw" target="_blank">【箭厂推荐】超生“黑户”回家以后：谁是我爸妈？_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></li>
<li><a href="https://mp.weixin.qq.com/s/_7u4y4i9fFa9eWWz_u7Lxg" target="_blank">在贵州屋脊的“云上摇滚小学”，有一场童年版《乐队的夏天》</a></li>
<li><a href="https://www.bilibili.com/video/BV1h541187St" target="_blank">伴侣犬寄宿学校：2岁柴犬换3个主人，社交明星犬曾被主人从4楼扔下|伴侣动物_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></li>
<li><a href="https://mp.weixin.qq.com/s/uv3BlBHhuQrCa_LOjCKFXQ" target="_blank">想当棋王的孩子，没有童年 | 镜相</a></li>
<li><a href="https://mp.weixin.qq.com/s/6RtuO6r2dZWN4GjIArpYSQ" target="_blank">对话林松果、赵涵漠：不是只有在大城市，人们才会谈论性别问题丨谷雨计划</a></li>
<li><a href="https://mp.weixin.qq.com/s/XsrjyWvboL5KQcCK-gShBw" target="_blank">​疫情之后，他们帮湖北感染医护疗伤</a></li>
</ul>

<h2 id="观点-思考">观点·思考</h2>

<ul>
<li><a href="https://www.bilibili.com/video/BV18V411U7qj" target="_blank">up主花10w改造Van自驾旅行，值吗？Van Tour来了！【小墨与阿猴 Rolling 30】_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></li>
<li><a href="https://www.bilibili.com/video/BV1ZK411T7fB" target="_blank">北京孩子高考，能比同龄人轻松多少？_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></li>
<li><a href="https://www.bilibili.com/video/BV1nC4y1871r" target="_blank">宠物看病太贵？资深宠物医生说养宠物就该有钱又有闲|伴侣动物_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></li>
<li><a href="https://mp.weixin.qq.com/s/i2YtISi4hfoRyjDl-E5A_w" target="_blank">消失的搜索框和百度们的自赎</a></li>
<li><a href="https://mp.weixin.qq.com/s/qMW0Gb7B2MU1iN2Ex2wp2Q" target="_blank">深度 | 播客的春天</a></li>
<li><a href="https://www.bilibili.com/video/BV1a54y1e7jA" target="_blank">国人争光了！手机摄影获国际摄影大奖！？_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></li>
</ul>

<h2 id="知识-方法">知识·方法</h2>

<ul>
<li><a href="https://insights.thoughtworks.cn/english-learning/" target="_blank">又一份英语学习指南 - ThoughtWorks洞见</a></li>
<li><a href="https://mp.weixin.qq.com/s/HiNZC3bLZyeua1roOHYGrA" target="_blank">&ldquo;锟斤拷&rdquo;的前世今生</a></li>
<li><a href="https://www.bilibili.com/video/BV1zp4y1q7fi" target="_blank">【约片集】第38期 摄影师拍摄私房写真的费用成本是多少？素人模特拍摄全过程。_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></li>
<li><a href="https://www.bilibili.com/video/BV1AV411S715" target="_blank">刘谦的教学 - 【神技能】最强大脑？5分钟教你学会超强记忆术！！_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/37193700" target="_blank">浅析LSM存储模型 - 知乎</a></li>
<li><a href="https://qingmang.me/articles/-7700553706275193966/" target="_blank">贝爷教你练就应对任何危险的能力</a></li>
</ul>

<h2 id="人物-电影">人物·电影</h2>

<ul>
<li><a href="https://www.bilibili.com/video/BV1hZ4y1K7u9" target="_blank">翻开书发现有一颗被压扁的番茄，吓死人啦！——就是这样的东西 | Kakamu Masanari 一席第748位讲者_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></li>
<li><a href="https://mp.weixin.qq.com/s/uIX0IN982f-ScsuVxno_yA" target="_blank">一个人旅行的感觉，试过就不会忘记</a></li>
<li><a href="https://www.bilibili.com/bangumi/play/ep335171" target="_blank">我住在这里的理由 第三季：第18集_纪录片_bilibili_哔哩哔哩</a></li>
<li><a href="https://www.bilibili.com/video/BV1QK4y1Y7ST" target="_blank">跟踪？偷拍？私家侦探破案全纪实！【Aha视频】_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></li>
<li><a href="https://mp.weixin.qq.com/s/6pwWRGuxTrDPNAIrRPWWew" target="_blank">专访｜雷军的小米十年：真心话、笑话，Are you OK？</a></li>

<li><p><a href="https://mp.weixin.qq.com/s/UyX26jgQiVP6ol9WQBOw-g" target="_blank">离开体制内的工作，我决定零基础入行女保镖 | 她们的冒险</a></p></li>

<li><p><a href="https://www.bilibili.com/bangumi/play/ep334037" target="_blank">末代皇帝_电影_bilibili_哔哩哔哩</a></p></li>

<li><p><a href="https://www.bilibili.com/bangumi/play/ep258952" target="_blank">花火_电影_bilibili_哔哩哔哩</a></p></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>千寻的阅周刊 - 第5期</title>
            <link>https://qxzzf.com/posts/weekly-reading-5/</link>
            <pubDate>Thu, 20 Aug 2020 07:00:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/weekly-reading-5/</guid>
            <description> 商业·科技  百亿补贴一周年，拼多多亏了吗？ &amp;gt; 自从拼多多出了红包月卡，每周都会在上面买几毛钱的东西
 影院必须永远存在吗？《花木兰》和《信条》给出了不同的答案
 解决40万当地人就业，我在印度的公司还是被封禁了
 Epic VS Apple：天下没有免费的午餐 - 少数派
 实探上海特斯拉工厂：Model Y 两月后或投产，每周200名应聘者涌入 &amp;gt; 特斯拉和苹果之类的公司养活了中国很大一批产业和人口，但国内缺少有公司能在国外有如此影响力，所以在面对美国制裁的时候有力的回击手段很少
 从元气森林到名创优品，真国产为什么总用假洋牌忽悠人？-虎嗅网
 斗鱼虎牙的「包办婚姻」还有哪些变数？
  故事·现象  老人被狗绳绊倒身亡，也许养狗需要用科技来改造下了 4个人，9个月，2528次与死神正面开战 在法国，生育终于不再需要男人 从悬崖边拉回来的新冠肺移植患者 | 深度报道 饿了么拿什么留住年轻人？  观点·思考  被困在房间里的女人 关于女孩需不需要结婚，我有两点看法：关你屁事和关我屁事 月经是不必要的吗？ &amp;gt; 人类对身体的控制能力越来越强了，未来可能吃饭都不是必要的
 凡是过往 皆为序章
 先找到快乐，再追求成功
 为什么说登机牌是个“反人类”的设计？
  知识·方法  怎样做出好的抉择？ 我的时间管理办法（2020版） - 少数派 若你经常感到无聊，那你该注意了-心理学文章-壹心理 Github 上的英语学习指南 Github 上的另一份英语学习指南  人物·电影  一个阿里p8的浪漫之旅 章莹颖遇害三年间：生死两茫茫 调查 | 致命旅途：南京失联女大学生遇害背后 指环王1：护戒使者 _ 电影 _ bilibili _ 哔哩哔哩弹幕视频网 从《盗梦空间》到《星际穿越》诺兰的逻辑到底是什么？  </description>
            <content type="html"><![CDATA[

<h2 id="商业-科技">商业·科技</h2>

<ul>
<li><p><a href="https://mp.weixin.qq.com/s/Rr9Xs80BKt9WnlS4eaMIfQ" target="_blank">百亿补贴一周年，拼多多亏了吗？</a>
&gt; 自从拼多多出了红包月卡，每周都会在上面买几毛钱的东西</p></li>

<li><p><a href="https://mp.weixin.qq.com/s/Uv8rn-wxSDZhDacBOnu6ww" target="_blank">影院必须永远存在吗？《花木兰》和《信条》给出了不同的答案</a></p></li>

<li><p><a href="https://mp.weixin.qq.com/s/yFcCNKQwO4mORg0HjsLrQQ" target="_blank">解决40万当地人就业，我在印度的公司还是被封禁了</a></p></li>

<li><p><a href="https://sspai.com/post/62122" target="_blank">Epic VS Apple：天下没有免费的午餐 - 少数派</a></p></li>

<li><p><a href="https://mp.weixin.qq.com/s/jlrlw-NjHVuOpEfR64YSHA" target="_blank">实探上海特斯拉工厂：Model Y 两月后或投产，每周200名应聘者涌入</a>
&gt; 特斯拉和苹果之类的公司养活了中国很大一批产业和人口，但国内缺少有公司能在国外有如此影响力，所以在面对美国制裁的时候有力的回击手段很少</p></li>

<li><p><a href="https://www.huxiu.com/article/375375.html" target="_blank">从元气森林到名创优品，真国产为什么总用假洋牌忽悠人？-虎嗅网</a></p></li>

<li><p><a href="https://mp.weixin.qq.com/s/0HTGc_X0hnN0XTCDIWZtXQ" target="_blank">斗鱼虎牙的「包办婚姻」还有哪些变数？</a></p></li>
</ul>

<h2 id="故事-现象">故事·现象</h2>

<ul>
<li><a href="https://mp.weixin.qq.com/s/3yfEdAAO73vG2SbSCMJqJg" target="_blank">老人被狗绳绊倒身亡，也许养狗需要用科技来改造下了</a></li>
<li><a href="https://mp.weixin.qq.com/s/rBP47iz-SL9TSw-a8d4ddg" target="_blank">4个人，9个月，2528次与死神正面开战</a></li>
<li><a href="https://mp.weixin.qq.com/s/K3f3_sjkzdXrrHn8hY8K8w" target="_blank">在法国，生育终于不再需要男人</a></li>
<li><a href="https://mp.weixin.qq.com/s/VDSmHHAlQrv3HyNK4nQa4A" target="_blank">从悬崖边拉回来的新冠肺移植患者 | 深度报道</a></li>
<li><a href="https://mp.weixin.qq.com/s/HLzMZmSiwD2EO3_zbP-2Kw" target="_blank">饿了么拿什么留住年轻人？</a></li>
</ul>

<h2 id="观点-思考">观点·思考</h2>

<ul>
<li><a href="https://mp.weixin.qq.com/s/UQ6DyKgFCB1RubqZzeouOA" target="_blank">被困在房间里的女人</a></li>
<li><a href="https://mp.weixin.qq.com/s/MMRwe0bDGvFZar-ekqLOYg" target="_blank">关于女孩需不需要结婚，我有两点看法：关你屁事和关我屁事</a></li>

<li><p><a href="https://mp.weixin.qq.com/s/5duY3K8TE_ZU46gxwJOdZg" target="_blank">月经是不必要的吗？</a>
&gt; 人类对身体的控制能力越来越强了，未来可能吃饭都不是必要的</p></li>

<li><p><a href="https://mp.weixin.qq.com/s/pNqkszMILDwtfd6wAD1MGw" target="_blank">凡是过往 皆为序章</a></p></li>

<li><p><a href="https://mp.weixin.qq.com/s/F5981zF4Ocgi1XbA6TnfWw" target="_blank">先找到快乐，再追求成功</a></p></li>

<li><p><a href="https://mp.weixin.qq.com/s/ia6gyUvYax3SjLyksF_dlg" target="_blank">为什么说登机牌是个“反人类”的设计？</a></p></li>
</ul>

<h2 id="知识-方法">知识·方法</h2>

<ul>
<li><a href="https://mp.weixin.qq.com/s/ZbDipBUN_ItyCYR9dsjcZA" target="_blank">怎样做出好的抉择？</a></li>
<li><a href="https://sspai.com/post/61724" target="_blank">我的时间管理办法（2020版） - 少数派</a></li>
<li><a href="https://www.xinli001.com/info/100463575?source=pc-home" target="_blank">若你经常感到无聊，那你该注意了-心理学文章-壹心理</a></li>
<li><a href="https://byoungd.gitbook.io/english-level-up-tips/" target="_blank">Github 上的英语学习指南</a></li>
<li><a href="https://a-programmers-guide-to-english.harryyu.me/" target="_blank">Github 上的另一份英语学习指南</a></li>
</ul>

<h2 id="人物-电影">人物·电影</h2>

<ul>
<li><a href="https://mp.weixin.qq.com/s/ARAaBUQYuW0FM1ZnS-aH9Q" target="_blank">一个阿里p8的浪漫之旅</a></li>
<li><a href="https://mp.weixin.qq.com/s/hGMo42Cve50luYf207Rmtw" target="_blank">章莹颖遇害三年间：生死两茫茫</a></li>
<li><a href="https://mp.weixin.qq.com/s/v9_FgI7NausQ-yRkdS60oQ" target="_blank">调查 | 致命旅途：南京失联女大学生遇害背后</a></li>
<li><a href="https://www.bilibili.com/bangumi/media/md28228421" target="_blank">指环王1：护戒使者 _ 电影 _ bilibili _ 哔哩哔哩弹幕视频网</a></li>
<li><a href="https://mp.weixin.qq.com/s/pjIdUIqVqthlXWgWwLRqWA" target="_blank">从《盗梦空间》到《星际穿越》诺兰的逻辑到底是什么？</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>千寻的阅周刊 - 第4期</title>
            <link>https://qxzzf.com/posts/weekly-reading-4/</link>
            <pubDate>Thu, 13 Aug 2020 07:00:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/weekly-reading-4/</guid>
            <description>商业·科技  我认为阅文的问题很明显，而且可以解决 【李自然说】不要求生欲了，把TikTok的事聊透_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili 看懂高通的一图流：QC5 将这样改变你的快充体验 - 少数派 &amp;gt; 以后出门，所有的设备都只要同一个充电头和线就好了
 为什么在微信的阴影下 QQ 依然是中国第二大 App？ | 爱范儿 &amp;gt; 因为微信群相关功能的孱弱，我至今还不得不在电脑上挂着QQ
 TikTok印度被禁后：小镇青年梦碎，本土团队收割空白市场 | 深网 &amp;gt; 现在国与国之间脱钩，大公司各阵营之间割裂，互联网变得越来越不互联，我深信这对于人类整体来说发展的效率是降低的
  故事·现象  25岁深圳一套房，做一名穿搭博主真的那么赚钱吗？| 我们这一天_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili 一个粉丝两百万的抖音账号，从走红到消失只用了180天 你永远玩不过一个95后，永远 &amp;gt; Z 世代的年轻人都在玩什么 “抖音点赞员”月入1万+，靠谱吗？
 上海天桥上的卖花阿婆：孤独的日子打着盹儿过 &amp;gt; 我很喜欢这种底层普通人的故事
 不问这些，真便宜了今天的明星 &amp;gt; 现在能听到深刻交流的节目越来越少了，也就一些播客和小媒体还能有些可以听听的，除了上层的监管，受众的自主选择也是造成变化的原因
  观点·思考  【箭厂】留胡子就是不体面、邋遢？男人们的胡子都去哪儿了？_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili 为什么当代人会频繁觉得“没有生活”？ 成年人最大的自律，就是远离杠精 拙见/ 科学&amp;rsquo;摸鱼&amp;rsquo;指北+2 &amp;gt; “为中华之崛起而摸……，不好意思说错了” 房住不炒总不能只靠调控吧？ &amp;gt; 国内优质资产匮乏是根本原因，希望优质中概股能加速回流，实在不行就投资半导体吧，侠之大者，为国护盘  知识·方法  抖腿、咬指甲……这些强迫症该如何停止？ &amp;gt; 改变一些已经形成自然的习惯既困难也没那么困难，我成功改掉过错误的拿筷子姿势和驼背、抖腿的习惯</description>
            <content type="html"><![CDATA[

<h2 id="商业-科技">商业·科技</h2>

<ul>
<li><a href="https://mp.weixin.qq.com/s/Y2gaC105bfIyh9SXYmwCCw" target="_blank">我认为阅文的问题很明显，而且可以解决</a></li>
<li><a href="https://www.bilibili.com/video/BV1Hf4y197qf" target="_blank">【李自然说】不要求生欲了，把TikTok的事聊透_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></li>

<li><p><a href="https://sspai.com/post/61838" target="_blank">看懂高通的一图流：QC5 将这样改变你的快充体验 - 少数派</a>
&gt; 以后出门，所有的设备都只要同一个充电头和线就好了</p></li>

<li><p><a href="https://www.ifanr.com/1356538" target="_blank">为什么在微信的阴影下 QQ 依然是中国第二大 App？ | 爱范儿</a>
&gt; 因为微信群相关功能的孱弱，我至今还不得不在电脑上挂着QQ</p></li>

<li><p><a href="https://mp.weixin.qq.com/s/MKlITFOeFv0cYUzQkSvlew" target="_blank">TikTok印度被禁后：小镇青年梦碎，本土团队收割空白市场 | 深网</a>
&gt; 现在国与国之间脱钩，大公司各阵营之间割裂，互联网变得越来越不互联，我深信这对于人类整体来说发展的效率是降低的</p></li>
</ul>

<h2 id="故事-现象">故事·现象</h2>

<ul>
<li><a href="https://www.bilibili.com/video/BV1QC4y147zh" target="_blank">25岁深圳一套房，做一名穿搭博主真的那么赚钱吗？| 我们这一天_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></li>
<li><a href="https://mp.weixin.qq.com/s/All5j0XxEljknPfDdZh4Ag" target="_blank">一个粉丝两百万的抖音账号，从走红到消失只用了180天</a></li>
<li><a href="https://mp.weixin.qq.com/s/i_Fem9Jzan1qSbunK7H_Nw" target="_blank">你永远玩不过一个95后，永远</a>
&gt; Z 世代的年轻人都在玩什么</li>

<li><p><a href="https://mp.weixin.qq.com/s/G94pcQbABWqvG3m3kugWMg" target="_blank">“抖音点赞员”月入1万+，靠谱吗？</a></p></li>

<li><p><a href="https://mp.weixin.qq.com/s/1gzTUfJzEWzgzhLfSiK8vA" target="_blank">上海天桥上的卖花阿婆：孤独的日子打着盹儿过</a>
&gt; 我很喜欢这种底层普通人的故事</p></li>

<li><p><a href="https://mp.weixin.qq.com/s/bZbA8ArZVJzEbHOtoBlBjw" target="_blank">不问这些，真便宜了今天的明星</a>
&gt; 现在能听到深刻交流的节目越来越少了，也就一些播客和小媒体还能有些可以听听的，除了上层的监管，受众的自主选择也是造成变化的原因</p></li>
</ul>

<h2 id="观点-思考">观点·思考</h2>

<ul>
<li><a href="https://www.bilibili.com/video/BV1uh411d7ww" target="_blank">【箭厂】留胡子就是不体面、邋遢？男人们的胡子都去哪儿了？_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></li>
<li><a href="https://mp.weixin.qq.com/s/FIqT-TXIfZ28cf_L_4IQsQ" target="_blank">为什么当代人会频繁觉得“没有生活”？</a></li>
<li><a href="https://mp.weixin.qq.com/s/h4PO06O46GlQCN3hX7fvDQ" target="_blank">成年人最大的自律，就是远离杠精</a></li>
<li><a href="https://mp.weixin.qq.com/s/4NZGKhdbAaanxNKZyQR-vg" target="_blank">拙见/ 科学&rsquo;摸鱼&rsquo;指北+2</a>
&gt; “为中华之崛起而摸……，不好意思说错了”</li>
<li><a href="https://mp.weixin.qq.com/s/pM8zdyY9H1MItGuAtBh4eQ" target="_blank">房住不炒总不能只靠调控吧？</a>
&gt; 国内优质资产匮乏是根本原因，希望优质中概股能加速回流，实在不行就投资半导体吧，侠之大者，为国护盘</li>
</ul>

<h2 id="知识-方法">知识·方法</h2>

<ul>
<li><p><a href="https://mp.weixin.qq.com/s/oWyRlEcTF0HTd_TRfHvzxA" target="_blank">抖腿、咬指甲……这些强迫症该如何停止？</a>
&gt; 改变一些已经形成自然的习惯既困难也没那么困难，我成功改掉过错误的拿筷子姿势和驼背、抖腿的习惯</p></li>

<li><p><a href="https://mp.weixin.qq.com/s/8jhn3x-4lVcVSzvH7cMPfQ" target="_blank">查理·芒格：我一辈子只做两件事情</a>
&gt; 如何终身学习</p></li>

<li><p><a href="https://mp.weixin.qq.com/s/anlwL6WFZskxHO2aJt_S2g" target="_blank">季羡林 | 对我影响最大的几本书</a></p></li>

<li><p><a href="https://sspai.com/post/61968" target="_blank">笔记沉没！后笔记时代生存手册 - 少数派</a></p></li>

<li><p><a href="https://sspai.com/post/61907" target="_blank">谁都会拖延，我们如何开始一个任务？ - 少数派</a></p></li>

<li><p><a href="https://mp.weixin.qq.com/s/s6NGl2zxcoYCPaBNn6Ki5Q" target="_blank">不可小嘘的微信支付软件架构</a></p></li>
</ul>

<h2 id="人物-电影">人物·电影</h2>

<ul>
<li><a href="https://www.bilibili.com/video/BV1x541187Vh" target="_blank">张玉环前妻宋小女采访40分钟_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></li>

<li><p><a href="https://mp.weixin.qq.com/s/47sa2Fhkq35ByBtKiJZ6sQ" target="_blank">张玉环　从凶手到无罪，被迫缺席的27年</a></p></li>

<li><p><a href="https://mp.weixin.qq.com/s/j-L_gohjl77-e83B54CRLg" target="_blank">一个梦想成为农民的日本小孩</a></p></li>

<li><p><a href="https://www.bilibili.com/video/BV1ZT4y1g7Uf" target="_blank">【日影志】香川照之：与人生和解，反派戏骨的双面人生_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p></li>

<li><p><a href="https://www.bilibili.com/video/BV1js411B7qb" target="_blank">【纪录片/歌舞伎演员】父与子 市川猿翁·香川照之 20130106【中文字幕】_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a>
&gt; 香川照之 是我最喜欢的日本男演员之一，另一个是山田孝之</p></li>

<li><p><a href="https://mp.weixin.qq.com/s/CJlimXpEHIxqwWeWicCGgg" target="_blank">电影暴君黑泽明：如果哥哥不自杀，会比我拍得更好</a></p></li>

<li><p><a href="https://www.bilibili.com/bangumi/play/ep284448" target="_blank">七武士_电影_bilibili_哔哩哔哩</a>
&gt; 黑泽明教科书般的一部电影</p></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>民生香港卡办理记录</title>
            <link>https://qxzzf.com/posts/%E6%B0%91%E7%94%9F%E9%A6%99%E6%B8%AF%E5%8D%A1%E5%8A%9E%E7%90%86%E8%AE%B0%E5%BD%95/</link>
            <pubDate>Sat, 08 Aug 2020 07:00:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E6%B0%91%E7%94%9F%E9%A6%99%E6%B8%AF%E5%8D%A1%E5%8A%9E%E7%90%86%E8%AE%B0%E5%BD%95/</guid>
            <description>民生和大多数券商都有合作，是目前办理境外卡成本比较低的渠道了，国内大多数城市都是存入 5w 人民币等额的现金，可以买个活期或者定期理财，等香港卡下卡就可以取出了。
一般直接问民生的网点，要求都是 30w 人民币存款，门槛比较高，所有建议还是找个券商合作渠道，顺便港股开个户，不仅能拿开户奖励，还可以后续用来港股打新。这种渠道网上到处都是，就不多说了。
我自己办是通过富途，和富途的客户经理联系好办理的时间就可以了，因为是走特殊渠道，所以只能去民生在上海陆家嘴那边的总部办理。
办理材料包括：
 身份证 有长期签证的护照 5w 人民币 如果已有民生储蓄卡就带着，没有的话现场会给你开一张  到了现场排到号后会有现场人员全程引导，没有内地卡的话会先给你办内地卡。办内地卡的时候会给一个蓝牙 U 宝，这个要保管好，之后用民生转账之类的会用到。
内地卡办好之后就是另外一个专门负责办理香港卡的工作人员帮着提交内地见证开户资料，资料里面的公司最好如实填写，部分公司比如阿里是能免 3 年管理费的，一般只免 1 年。如果没有公司座机的话填个别的一般也没关系。
提交港卡资料的时候一般会让你办张信用卡，这个也算是互相帮助吧，毕竟特殊渠道减少了很大一笔资金需求，如果不需要的话收到后不激活也可以。
离开之前最好顺便做下投资风险偏好测评，这样的话存进去的 5w 现金就可以直接买理财了，不亏。
之后就是漫长的等待期了，一般会在 30 个工作日，也就是差不多 40 个自然日以内开通港卡，我当时是 6 月 23 日办理，7 月 31 日港卡下卡的。民生香港没有实体卡，下卡的时候是会发短信过来的，收到短信到民生香港 APP 上登录下就能看到卡的信息了。
民生香港卡下来后需要同名入账一笔用来激活，虽然用国内其他银行境外汇款到民生香港也可以，但是一般用其他银行手续费比较高，到账时间也比较长，所以最好还是直接用民生内地卡购汇转账。
我当时转账的时候遇到了奇怪的报错，后来下午再试又好了，可能他们内部系统维护，总之遇到问题不要着急，找客服就好了。
之后从境外往境内汇款时一定要注意用途的选择，最好选旅游之类的，选错的话汇款会被退回，白白损失手续费。另外跨境汇款一般手续费高，到账时间长，不同银行间更是如此。</description>
            <content type="html"><![CDATA[<p>民生和大多数券商都有合作，是目前办理境外卡成本比较低的渠道了，国内大多数城市都是存入 5w 人民币等额的现金，可以买个活期或者定期理财，等香港卡下卡就可以取出了。</p>

<p>一般直接问民生的网点，要求都是 30w 人民币存款，门槛比较高，所有建议还是找个券商合作渠道，顺便港股开个户，不仅能拿开户奖励，还可以后续用来港股打新。这种渠道网上到处都是，就不多说了。</p>

<p>我自己办是通过富途，和富途的客户经理联系好办理的时间就可以了，因为是走特殊渠道，所以只能去民生在上海陆家嘴那边的总部办理。</p>

<p>办理材料包括：</p>

<ul>
<li>身份证</li>
<li>有长期签证的护照</li>
<li>5w 人民币</li>
<li>如果已有民生储蓄卡就带着，没有的话现场会给你开一张</li>
</ul>

<p>到了现场排到号后会有现场人员全程引导，没有内地卡的话会先给你办内地卡。办内地卡的时候会给一个蓝牙 U 宝，这个要保管好，之后用民生转账之类的会用到。</p>

<p>内地卡办好之后就是另外一个专门负责办理香港卡的工作人员帮着提交内地见证开户资料，资料里面的公司最好如实填写，部分公司比如阿里是能免 3 年管理费的，一般只免 1 年。如果没有公司座机的话填个别的一般也没关系。</p>

<p>提交港卡资料的时候一般会让你办张信用卡，这个也算是互相帮助吧，毕竟特殊渠道减少了很大一笔资金需求，如果不需要的话收到后不激活也可以。</p>

<p>离开之前最好顺便做下投资风险偏好测评，这样的话存进去的 5w 现金就可以直接买理财了，不亏。</p>

<p>之后就是漫长的等待期了，一般会在 30 个工作日，也就是差不多 40 个自然日以内开通港卡，我当时是 6 月 23 日办理，7 月 31 日港卡下卡的。民生香港没有实体卡，下卡的时候是会发短信过来的，收到短信到民生香港 APP 上登录下就能看到卡的信息了。</p>

<p>民生香港卡下来后需要同名入账一笔用来激活，虽然用国内其他银行境外汇款到民生香港也可以，但是一般用其他银行手续费比较高，到账时间也比较长，所以最好还是直接用民生内地卡购汇转账。</p>

<p>我当时转账的时候遇到了奇怪的报错，后来下午再试又好了，可能他们内部系统维护，总之遇到问题不要着急，找客服就好了。</p>

<p>之后从境外往境内汇款时一定要注意用途的选择，最好选旅游之类的，选错的话汇款会被退回，白白损失手续费。另外跨境汇款一般手续费高，到账时间长，不同银行间更是如此。</p>
]]></content>
        </item>
        
        <item>
            <title>千寻的阅周刊 - 第3期</title>
            <link>https://qxzzf.com/posts/weekly-reading-3/</link>
            <pubDate>Thu, 06 Aug 2020 07:00:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/weekly-reading-3/</guid>
            <description>商业·科技  从TikTok事件，聊聊如何用内容煽动情绪 业内人士怎么评价TikTok和字节跳动？_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili &amp;gt; 字节跳动不是英雄，也没有必要做英雄，现在很多网友真是迷之自信，总觉得自己的想法才是最正确的、最好的
 以史为鉴，如果抖音、快手有一天进入衰退期，那衰败的前兆是什么？ &amp;gt; 所有的内容平台都应该注意的一些点
 在长沙，为什么再牛的茶饮品牌都会输给茶颜悦色？ &amp;gt; 原来朋友圈的茶颜悦色只有在长沙才能喝到
 做UP主第一年到手15万？我满意吗？【UP主商业化指难（上）】_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili &amp;gt; 一个全职 UP 的生活现状，选择的视频领域很重要，大多数腰部以下 UP 其实生活得更困难一些
 美国MUJI破产，留给中国MUJI的时间不多了 &amp;gt; 无印良品最大的问题还是质量配不上价格
  故事·现象  这里有一份“同居协议” &amp;gt; 西方发达国家关于新型伴侣关系的尝试
 【箭厂】用疼痛换取魅力，高跟鞋为何让女人又爱又恨？_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili
 【箭厂】拥有5000多个代称的“月经”，为何天生成为女性的话题禁忌？_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili &amp;gt; 箭厂「身体政治」系列，现代社会我们可以抛开成见去看看这些事情
 一个90后房产律师起诉爱奇艺之后 &amp;gt; 互联网快要忘记的故事之一的后续
 用爱「发了十八年电」后，这个汉化组将何去何从？ &amp;gt; 当年用模拟器玩掌机游戏的时候，战棋类的机战系列和火纹系列是我的最爱了，「星组」现在还能以这样的形式存在真的很棒了
 我们暗访了青春美好张阿姨，为什么富婆要在网上找小伙？ &amp;gt; 各种青春美好富婆阿姨原来都是城里的套路
  知识·方法  【4K】五维宇宙！《星际穿越》中你不了解的高维宇宙!_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili &amp;gt; 这个 UP 的「踏碎虚空」系列真的是制作精良、简单易懂的科普典范了，虽然后面讲到的一些太深奥的点还是看不大懂</description>
            <content type="html"><![CDATA[

<h2 id="商业-科技">商业·科技</h2>

<ul>
<li><a href="https://mp.weixin.qq.com/s/Xf92aQqV0RG44hsa6f6AXg" target="_blank">从TikTok事件，聊聊如何用内容煽动情绪</a></li>

<li><p><a href="https://www.bilibili.com/video/BV13V411z7fn" target="_blank">业内人士怎么评价TikTok和字节跳动？_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a>
&gt; 字节跳动不是英雄，也没有必要做英雄，现在很多网友真是迷之自信，总觉得自己的想法才是最正确的、最好的</p></li>

<li><p><a href="https://mp.weixin.qq.com/s/HvhnI4HlL92Cst4_1l4TNw" target="_blank">以史为鉴，如果抖音、快手有一天进入衰退期，那衰败的前兆是什么？</a>
&gt; 所有的内容平台都应该注意的一些点</p></li>

<li><p><a href="https://mp.weixin.qq.com/s/zZw4FYGgmY-zheSlq8iKyQ" target="_blank">在长沙，为什么再牛的茶饮品牌都会输给茶颜悦色？</a>
&gt; 原来朋友圈的茶颜悦色只有在长沙才能喝到</p></li>

<li><p><a href="https://www.bilibili.com/video/BV1RC4y1b78o" target="_blank">做UP主第一年到手15万？我满意吗？【UP主商业化指难（上）】_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a>
&gt; 一个全职 UP 的生活现状，选择的视频领域很重要，大多数腰部以下 UP 其实生活得更困难一些</p></li>

<li><p><a href="https://mp.weixin.qq.com/s/3Kax4F6aZaGmhLnoGUJpaQ" target="_blank">美国MUJI破产，留给中国MUJI的时间不多了</a>
&gt; 无印良品最大的问题还是质量配不上价格</p></li>
</ul>

<h2 id="故事-现象">故事·现象</h2>

<ul>
<li><p><a href="https://mp.weixin.qq.com/s/r8s2NJFh4VuhAQIEzYxEkA" target="_blank">这里有一份“同居协议”</a>
&gt; 西方发达国家关于新型伴侣关系的尝试</p></li>

<li><p><a href="https://www.bilibili.com/video/BV1tK4y1x7ej" target="_blank">【箭厂】用疼痛换取魅力，高跟鞋为何让女人又爱又恨？_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p></li>

<li><p><a href="https://www.bilibili.com/video/BV1uC4y187vQ" target="_blank">【箭厂】拥有5000多个代称的“月经”，为何天生成为女性的话题禁忌？_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a>
&gt; 箭厂「身体政治」系列，现代社会我们可以抛开成见去看看这些事情</p></li>

<li><p><a href="https://mp.weixin.qq.com/s/rTBX1AFSZcpxVSix29lB_w" target="_blank">一个90后房产律师起诉爱奇艺之后</a>
&gt; 互联网快要忘记的故事之一的后续</p></li>

<li><p><a href="https://mp.weixin.qq.com/s/f49Y_mgyFkSHC87VgRu58A" target="_blank">用爱「发了十八年电」后，这个汉化组将何去何从？</a>
&gt; 当年用模拟器玩掌机游戏的时候，战棋类的机战系列和火纹系列是我的最爱了，「星组」现在还能以这样的形式存在真的很棒了</p></li>

<li><p><a href="https://mp.weixin.qq.com/s/b4lyrxYkOoHgcHhZziw2Sw" target="_blank">我们暗访了青春美好张阿姨，为什么富婆要在网上找小伙？</a>
&gt; 各种青春美好富婆阿姨原来都是城里的套路</p></li>
</ul>

<h2 id="知识-方法">知识·方法</h2>

<ul>
<li><p><a href="https://www.bilibili.com/video/BV15A411Y72X" target="_blank">【4K】五维宇宙！《星际穿越》中你不了解的高维宇宙!_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a>
&gt; 这个 UP 的「踏碎虚空」系列真的是制作精良、简单易懂的科普典范了，虽然后面讲到的一些太深奥的点还是看不大懂</p></li>

<li><p><a href="https://sspai.com/post/61744" target="_blank">我该买什么基金？ - 少数派</a>
&gt; 只要相信未来国家的经济是向上走的，那就应该投资一些证券资产</p></li>

<li><p><a href="https://sspai.com/post/61802" target="_blank">走出时间记录的困境 - 少数派</a>
&gt; 持续记录日记快三个月了</p></li>

<li><p><a href="https://sspai.com/post/61886" target="_blank">Matrix 圆桌 | 网状结构笔记工具是一阵风吗？ - 少数派</a>
&gt; 一些用户关于知识管理工具的讨论</p></li>

<li><p><a href="https://mp.weixin.qq.com/s/J4BDLeHuKUdTWaAU_k7hgA" target="_blank">为什么你总是间歇性自律、持续性懒散？</a>
&gt; 自由源于自律，而自律源于自驱</p></li>
</ul>

<h2 id="观点-思考">观点·思考</h2>

<ul>
<li><p><a href="https://mp.weixin.qq.com/s/roRdR_DWZ__um5nlH5b3wA" target="_blank">歌单里的Z世代</a>
&gt; 所以长视频领域相比于算法分发，我更看好基于UP主的推荐</p></li>

<li><p><a href="https://mp.weixin.qq.com/s/CCGaoyMgB4NTu_-l-1QDig" target="_blank">“我有权利，被当作一个活着的人对待。”</a>
&gt; 死亡和临终关怀会是现代人的必修课</p></li>

<li><p><a href="https://mp.weixin.qq.com/s/K28S-pNDSUridIJi47gZMg" target="_blank">年轻人都去送外卖了，中国的制造业怎么办</a>
&gt; 现在人工智能和自动化的发展或许并没有像想象中那样夺走许多工作岗位，反而是在努力弥补这些岗位上本来就愈发严重的劳动力缺失</p></li>

<li><p><a href="https://mp.weixin.qq.com/s/Rgx5IIHhep6pTgA57OkMjg" target="_blank">最后我想给大家讲一只自由猪的故事，也是这个演讲标题的由来 | 李翔伟 一席第782位讲者</a>
&gt; 艺术根本上是对自我的一种表达</p></li>

<li><p><a href="https://mp.weixin.qq.com/s/-kLYFQUTD-x69WDj8uNFZA" target="_blank">如何想清楚什么对自己最重要？</a>
&gt; 奥卡姆剃刀原则，人生总是一个从简入繁，再由繁到简的过程</p></li>
</ul>

<h2 id="人物">人物</h2>

<ul>
<li><p><a href="https://mp.weixin.qq.com/s/mWCGkGtLN8hA5nLSKx7Nzg" target="_blank">马斯克的起跑线比你强在哪儿</a>
&gt; 马斯克是给这个世界带来了很大改变的人之一，能有这样的成就他的母亲功不可没</p></li>

<li><p><a href="https://www.huxiu.com/article/372739.html" target="_blank">雷军娱乐简史-虎嗅网</a>
&gt; 营销鬼才雷布斯</p></li>

<li><p><a href="https://www.bilibili.com/video/BV1Ya4y1E7cw" target="_blank">给你打点气：商业大佬们20多岁都在干什么？_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a>
&gt; 大佬们也并不是一帆风顺，不过现在阶级加速固化的情况下创业是越发困难了</p></li>

<li><p><a href="https://www.bilibili.com/video/BV1mi4y137kT" target="_blank">关于我和我的动物园_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a>
&gt; 克里米亚「泰加」动物园园长奥列格是个传奇的人，他能和狮子、老虎等各种大型猫科动物亲密接触和互动，他的动物园大概是世界上少有的能让游客也可以近距离接触没有被驯化拔牙的野生猛兽的地方</p></li>

<li><p><a href="https://mp.weixin.qq.com/s/U4GPw52ImZF5E-Nj8QSImQ" target="_blank">字节跳动没有朋友，张一鸣有吗？</a>
&gt; 拥有可以一起交流探讨观点和思考的朋友是人生一大幸事</p></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>千寻的阅周刊 - 第2期</title>
            <link>https://qxzzf.com/posts/weekly-reading-2/</link>
            <pubDate>Thu, 30 Jul 2020 07:00:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/weekly-reading-2/</guid>
            <description>下一期可能会尝试加入视频内容。
商业·科技  “逃离”拼多多 &amp;gt; 「加班」和「竞业」是国内众多程序员逃不开的宿命
 孔夫子没做到的事情，为什么多抓鱼可以？ &amp;gt; 多抓鱼确实是一家带来改变、创造价值的公司
 烧了微软10000张GPU，这伙人铁了心要砸大家的饭碗-虎嗅网 &amp;gt; 可以用自然语言写文章、码代码、做设计的 AI 出现了，人工智能不再智障指日可待
 谁能救微博？-PingWest 品玩 &amp;gt; 在我看来微博的产品力是可以和贴吧一较低下的，那么微博和贴吧的后浪们能啃下这些老骨头吗
  知识·方法  请把这张图打印出来，下次做 PPT 时对照检查！ - 少数派 &amp;gt; PPT 制作流程指南
 我们究竟需要怎样的时间管理工具 - 少数派 &amp;gt; 时间管理工具深度好文
 为什么全世界只有中国人和日本人在玩弹幕？ &amp;gt; 即便是小破站想要成为的 YouTube 也没有弹幕
 这是一份花费 200W 的经验教训，告诉你 B 站营销怎么做 &amp;gt; 想做 UP 主的话可以参考
 给程序员的中文写作指北 | 卡拉搜索 &amp;gt; 写作是帮助沉淀思考和建立个人品牌的好方式
  观点·思考  为什么有的人会对同类如此残忍？-虎嗅网 &amp;gt; 似乎人性真的本恶
 没有记录就没有发生 - 少数派 &amp;gt; 这几年我终于意识到记录的重要性并开始培养记录的习惯</description>
            <content type="html"><![CDATA[

<p>下一期可能会尝试加入视频内容。</p>

<h2 id="商业-科技">商业·科技</h2>

<ul>
<li><p><a href="https://mp.weixin.qq.com/s/bKTEL_5vSejktIMKtGwi2g" target="_blank">“逃离”拼多多</a>
&gt; 「加班」和「竞业」是国内众多程序员逃不开的宿命</p></li>

<li><p><a href="https://www.huxiu.com/article/372330.html" target="_blank">孔夫子没做到的事情，为什么多抓鱼可以？</a>
&gt; 多抓鱼确实是一家带来改变、创造价值的公司</p></li>

<li><p><a href="https://www.huxiu.com/article/372139.html" target="_blank">烧了微软10000张GPU，这伙人铁了心要砸大家的饭碗-虎嗅网</a>
&gt; 可以用自然语言写文章、码代码、做设计的 AI 出现了，人工智能不再智障指日可待</p></li>

<li><p><a href="https://www.pingwest.com/a/214763" target="_blank">谁能救微博？-PingWest 品玩</a>
&gt; 在我看来微博的产品力是可以和贴吧一较低下的，那么微博和贴吧的后浪们能啃下这些老骨头吗</p></li>
</ul>

<h2 id="知识-方法">知识·方法</h2>

<ul>
<li><p><a href="https://sspai.com/post/61728" target="_blank">请把这张图打印出来，下次做 PPT 时对照检查！ - 少数派</a>
&gt; PPT 制作流程指南</p></li>

<li><p><a href="https://sspai.com/post/61776" target="_blank">我们究竟需要怎样的时间管理工具 - 少数派</a>
&gt; 时间管理工具深度好文</p></li>

<li><p><a href="https://mp.weixin.qq.com/s/8I6CwmabYH28liLspCNoSQ" target="_blank">为什么全世界只有中国人和日本人在玩弹幕？</a>
&gt; 即便是小破站想要成为的 YouTube 也没有弹幕</p></li>

<li><p><a href="https://mp.weixin.qq.com/s/nOiNbqWYKH5_gKTWTy8EJw" target="_blank">这是一份花费 200W 的经验教训，告诉你 B 站营销怎么做</a>
&gt; 想做 UP 主的话可以参考</p></li>

<li><p><a href="https://kalasearch.cn/blog/writing-guide-for-programmers/" target="_blank">给程序员的中文写作指北 | 卡拉搜索</a>
&gt; 写作是帮助沉淀思考和建立个人品牌的好方式</p></li>
</ul>

<h2 id="观点-思考">观点·思考</h2>

<ul>
<li><p><a href="https://www.huxiu.com/article/371881.html" target="_blank">为什么有的人会对同类如此残忍？-虎嗅网</a>
&gt; 似乎人性真的本恶</p></li>

<li><p><a href="https://sspai.com/post/61688" target="_blank">没有记录就没有发生 - 少数派</a>
&gt; 这几年我终于意识到记录的重要性并开始培养记录的习惯</p></li>

<li><p><a href="https://mp.weixin.qq.com/s/0R7eb7XknDb8Lytfk4f6tQ" target="_blank">道理都懂，却仍然过不好这一生，怎么办？</a>
&gt; 「知道许多道理却仍然过不好这一生」的原因在于只是知道这些道理，却没有实践并掌握</p></li>

<li><p><a href="https://www.huxiu.com/article/370913.html" target="_blank">芒格最新对话：目前市场上有很多愚蠢和错误的行为-虎嗅网</a>
&gt; 平均年龄90+的富豪关于财富、生命、社会的对谈</p></li>
</ul>

<h2 id="故事-现象">故事·现象</h2>

<ul>
<li><p><a href="https://www.huxiu.com/article/369587.html" target="_blank">半年巨亏700亿，航空公司靠什么“随心飞”？-虎嗅网</a>
&gt; 后疫情时代航空公司的自救之路，为什么没听说有电影院出「随心看」呢？</p></li>

<li><p><a href="https://www.huxiu.com/article/372104.html" target="_blank">兼职外卖骑手的大学生：被误导办理消费贷，离职损失2000元-虎嗅网</a>
&gt; 外卖骑手是一个需要被关注和尊重的职业</p></li>

<li><p><a href="https://mp.weixin.qq.com/s/L0ZzvT6GPLLI0GM7ZsK0lg" target="_blank">在探探上，别人谈性，我谈人性</a></p></li>

<li><p><a href="https://www.ifanr.com/1354908" target="_blank">腾讯社交 7 连发，你猜半年后活了__个？ | 爱范儿</a>
&gt; 大公司在基于半熟人的线下场景社交领域仍然没有一款足够好的产品，难题可能在于信任感的打造和盈利模式</p></li>

<li><p><a href="https://mp.weixin.qq.com/s/TywVrmsxFZ_fK0A-N2RuSg" target="_blank">青年婚恋情感的异化境遇与破解之道</a></p></li>

<li><p><a href="https://mp.weixin.qq.com/s/9MGSxioEX3GPH0rphSCmqQ" target="_blank">95后独居女生图鉴：比起谈恋爱，我更想找到自我</a>
&gt; 不让中国成为第二个日本，需要很多方面的共同努力</p></li>

<li><p><a href="https://mp.weixin.qq.com/s/8q-hDl-uz_eZ6eRcBiUotg" target="_blank">至暗时刻，硅谷华人工程师终于开始抱团丨谷雨</a>
&gt; 美国梦终究只是一等公民的美国梦</p></li>
</ul>

<h2 id="人物">人物</h2>

<ul>
<li><p><a href="https://www.pingwest.com/a/215032" target="_blank">物理老师李永乐，从西瓜红出圈</a>
&gt; 让自己成为一个能够创造价值的人</p></li>

<li><p><a href="https://mp.weixin.qq.com/s/wp4E9kRVr16FK2afd1V03w" target="_blank">在知识的云端和地表之间，他们是修梯子的人</a>
&gt; B 站知识区 UP 主的访谈，GQ 的人物访谈都还蛮不错，会去挖掘不同的角度</p></li>

<li><p><a href="https://www.huxiu.com/article/371874.html" target="_blank">日本首富柳井正：我曾想虚度一生-虎嗅网</a>
&gt; 为每一个普通人创造价值</p></li>

<li><p><a href="https://mp.weixin.qq.com/s/27KU0cDWvM3ITvNNXcc2iQ" target="_blank">一个日本人，在南京做上门女婿，拍下疫后武汉：我想让世界知道中国的好</a>
&gt; 如果不用为钱发愁的话，我想拍一部关于职业的纪录片，名字都想好了，就叫《三百六十行》，不过好像已经有人拍了</p></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>千寻的阅周刊 - 第1期</title>
            <link>https://qxzzf.com/posts/weekly-reading-1/</link>
            <pubDate>Thu, 23 Jul 2020 20:23:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/weekly-reading-1/</guid>
            <description> 最近一个月来开始尝试减少了在各个平台上算法推荐的碎片化内容的阅读，转而使用了几年未更新的轻芒阅读开始回归 RSS，感觉这种订阅式的传统反而更容易获得优质的阅读资源。
读到不错的内容时经常会有分享出来的想法，但一篇篇地分享又比较零碎，受到目前技术圈一些平台和大V在做的周刊性质的订阅服务的启发，觉得我也可以做一个自己的阅读周刊。
目前这个周刊的内容和形式还未完全定型，第一期因为包含一些历史阅读过的文章所以数量上会比较多。后续大致想法还是分为几个板块，然后每篇文章会附上自己的一句话简介或评论。
另外刊名也暂时未定，是否能坚持更新则看反馈，没人看的话估计就搁置了，反馈好的话会考虑开公众号和邮箱订阅。
知识·方法  戒不掉的“奶头乐”|垃圾快乐是如何让人们上瘾的？ - 知乎 如何从过度思考和内耗中解脱出来 我是如何应用教练技术帮助自己克服看剧成瘾的 P.A.R.A. 是什么及在 Notion 中的应用 - 少数派 P.B.A.T. —— 基于 Notion 的人生管理 - 少数派 别逗了，费曼先生！以及费曼学习法 - 少数派 唯变化永恒｜网景创始人Marc Andreessen的个人效率升级 - 少数派 脱离算法，找回时间 - 少数派  观点·思考  国内的内容创作者，可以“体面”地赚钱吗？ 碎片化时代，如何获得「杂志式」的主题性内容？ 程序员为什么热衷于重写软件 许知远：我怎么可能是个笨拙的提问者 那些没回我消息却在发朋友圈的人，到底在想什么？ 关于 B 站的 11 个碎片观察和思考 字节跳动为什么一直在招人？ -看美国-今日看点 没搞笑，高德上线了“查岗功能”-虎嗅网 人活着就是在对抗熵增 | 熵增启示录 大三女生为什么选择了性教育创业 - 少数派  故事·现象  吴清源、聂卫平与柯洁：天才无法全身而退 我是黄盈盈，我今天讲的是「小姐研究二十年」｜一席 第779位讲者 世界在下沉，越发让人怀念王小波的黄金时代 如果中国电影倒退20年 《鬼子来了》20年，他是最“恨”姜文的日本人 毕设 | “生”不由己：中国单身女性生育之困 闪婚又闪离，村里的婚姻不谈冷静期  </description>
            <content type="html"><![CDATA[

<p>最近一个月来开始尝试减少了在各个平台上算法推荐的碎片化内容的阅读，转而使用了几年未更新的轻芒阅读开始回归 RSS，感觉这种订阅式的传统反而更容易获得优质的阅读资源。</p>

<p>读到不错的内容时经常会有分享出来的想法，但一篇篇地分享又比较零碎，受到目前技术圈一些平台和大V在做的周刊性质的订阅服务的启发，觉得我也可以做一个自己的阅读周刊。</p>

<p>目前这个周刊的内容和形式还未完全定型，第一期因为包含一些历史阅读过的文章所以数量上会比较多。后续大致想法还是分为几个板块，然后每篇文章会附上自己的一句话简介或评论。</p>

<p>另外刊名也暂时未定，是否能坚持更新则看反馈，没人看的话估计就搁置了，反馈好的话会考虑开公众号和邮箱订阅。</p>

<h2 id="知识-方法">知识·方法</h2>

<ul>
<li><a href="https://zhuanlan.zhihu.com/p/161222680" target="_blank">戒不掉的“奶头乐”|垃圾快乐是如何让人们上瘾的？ - 知乎</a></li>
<li><a href="https://mp.weixin.qq.com/s/0HXDqHrcTVL9OsFLkCFFig" target="_blank">如何从过度思考和内耗中解脱出来</a></li>
<li><a href="https://mp.weixin.qq.com/s/rAdlhIzsxQLbugzyGhmPKw" target="_blank">我是如何应用教练技术帮助自己克服看剧成瘾的</a></li>
<li><a href="https://sspai.com/post/61459" target="_blank">P.A.R.A. 是什么及在 Notion 中的应用 - 少数派</a></li>
<li><a href="https://sspai.com/post/61243" target="_blank">P.B.A.T. —— 基于 Notion 的人生管理 - 少数派</a></li>
<li><a href="https://sspai.com/post/61411" target="_blank">别逗了，费曼先生！以及费曼学习法 - 少数派</a></li>
<li><a href="https://sspai.com/post/61408" target="_blank">唯变化永恒｜网景创始人Marc Andreessen的个人效率升级 - 少数派</a></li>
<li><a href="https://sspai.com/post/61022" target="_blank">脱离算法，找回时间 - 少数派</a></li>
</ul>

<h2 id="观点-思考">观点·思考</h2>

<ul>
<li><a href="https://mp.weixin.qq.com/s/IoIHzrW3Lsia0iWPSHcdPA" target="_blank">国内的内容创作者，可以“体面”地赚钱吗？</a></li>
<li><a href="https://mp.weixin.qq.com/s/JEEmpOnanjEY6xlxiid6lQ" target="_blank">碎片化时代，如何获得「杂志式」的主题性内容？</a></li>
<li><a href="https://mp.weixin.qq.com/s/OUdYgNVpM3WmP4qYxNQiow" target="_blank">程序员为什么热衷于重写软件</a></li>
<li><a href="https://mp.weixin.qq.com/s/5ReoIRRYOggFbKlOfBL_Ww" target="_blank">许知远：我怎么可能是个笨拙的提问者</a></li>
<li><a href="https://mp.weixin.qq.com/s/tbY6JOiTRfQ6wWN3qvU0nw" target="_blank">那些没回我消息却在发朋友圈的人，到底在想什么？</a></li>
<li><a href="https://mp.weixin.qq.com/s/vvvlIMkXZnbb6M3ewYzFrg" target="_blank">关于 B 站的 11 个碎片观察和思考</a></li>
<li><a href="http://www.todayfocus.cn/p/22114.html" target="_blank">字节跳动为什么一直在招人？ -看美国-今日看点</a></li>
<li><a href="https://www.huxiu.com/article/368929.html" target="_blank">没搞笑，高德上线了“查岗功能”-虎嗅网</a></li>
<li><a href="https://mp.weixin.qq.com/s/8UwOurljsYNwy3cCLHIiZA" target="_blank">人活着就是在对抗熵增 | 熵增启示录</a></li>
<li><a href="https://sspai.com/post/61065" target="_blank">大三女生为什么选择了性教育创业 - 少数派</a></li>
</ul>

<h2 id="故事-现象">故事·现象</h2>

<ul>
<li><a href="https://mp.weixin.qq.com/s/kniadT7vkrugj9uPuVG2bQ" target="_blank">吴清源、聂卫平与柯洁：天才无法全身而退</a></li>
<li><a href="https://mp.weixin.qq.com/s/tfNbFdt0B_yGu56IKphFiw" target="_blank">我是黄盈盈，我今天讲的是「小姐研究二十年」｜一席 第779位讲者</a></li>
<li><a href="https://mp.weixin.qq.com/s/4GqI2tFRl_PcG-y_PcCdcw" target="_blank">世界在下沉，越发让人怀念王小波的黄金时代</a></li>
<li><a href="https://mp.weixin.qq.com/s/tbdT1N1YbFZh6T7fYiREYw" target="_blank">如果中国电影倒退20年</a></li>
<li><a href="https://mp.weixin.qq.com/s/vcH6pe8rBw348cIm7t3Kjw" target="_blank">《鬼子来了》20年，他是最“恨”姜文的日本人</a></li>
<li><a href="https://mp.weixin.qq.com/s/qrWFT2388mD2twa2kegX2w" target="_blank">毕设 | “生”不由己：中国单身女性生育之困</a></li>
<li><a href="https://mp.weixin.qq.com/s/DUF-x9ZRdgS1cV1bSc_xgg" target="_blank">闪婚又闪离，村里的婚姻不谈冷静期</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>短网址系统设计思路</title>
            <link>https://qxzzf.com/posts/%E7%9F%AD%E7%BD%91%E5%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF/</link>
            <pubDate>Sat, 04 Jul 2020 11:30:43 +0800</pubDate>
            
            <guid>https://qxzzf.com/posts/%E7%9F%AD%E7%BD%91%E5%9D%80%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1%E6%80%9D%E8%B7%AF/</guid>
            <description>差不多 5 年前逛 github 的时候偶然发现了 hashids 这个东西，当时就觉得 hashids 很适合用在短网址系统上，于是花了一天时间撸了个简单的短网址系统出来。
当时是纯粹为了练手，项目写完放 github 上，然后就在 v2ex 上发了个贴，最初稍微维护了一下后来也就没有再管。前几天上 github 发现，这个几年没维护的项目靠自然流量也有 200 star 了，看来短网址这个东西的需求仍然很旺盛。
现在回过头来看当时的实现方案还是比较粗糙的，个人项目玩玩可以，用在商业生产环境就不太够了。不过目前倒也没有自建短网址的需求，不会再像当时一样自己再撸一套，但短网址系统的设计思路和一些坑倒是可以整理一下。
背景 什么是短网址系统？ 短网址已经是一个老生常谈的话题了，这块想必不用多说，它的作用主要就是把一个很长的网址转换成一个较短的地址。像微博的 t.cn、百度的 dwz.cn、腾讯的 url.cn 都是常见的短网址系统。
为什么要用短网址系统？ 现在的很多链接由于需要带上很多参数来提供业务所需的数据，所以往往非常冗长，而相应地转换成短网址后能带来很多益处：
 在分发和使用的时候更方便、清爽 更好地适应微博、短信等有字数限制的场景 降低生成二维码的复杂度，提升扫码识别率 可以一定程度上隐藏部分参数，比如 aff 等 能够实现链接跳转的跟踪和各维度数据统计 原网址失效后可以不改变短网址，只修改跳转关系 个性短网址更有利于品牌建设和营销  设计思路 短网址系统做到可用是比较简单的，但是想要高性能、可靠且安全的话，涉及到的很多点也能展开得非常细。
长短链映射 短网址系统最核心的功能就是长短链之间的转换了，长网址的长度可以认为是没有限制的，所以使用可逆的压缩或者加密算法将其转换成一个长度有限的短网址是不可能做到的，我们必须借助 DB 或者其他存储系统来实现映射的存储。
发号 那么自然会产生的一种思路就是将长网址存入一张表，然后使用 DB 中的自增主键来作为短网址，此时我们得到的短网址类似这样 xx.xx/1、xx.xx/2。这其实就是发号式短网址的基本思路。
在此基础上我们可以做一些微小的改良来得到更短的链接，比如把 10 进制的 ID 转换成 16 进制，或者 a-z A-Z 0-9 这些字符组成的 62 进制，此时在数字比较大的时候我们得到的短网址就会类似 xx.xx/Ad3Ef。
上面一步完成后得到的地址看上去就和目前常见的短网址非常相似了，但这种直接暴露 ID 的方式会产生安全上的问题，别有用心的人发现短网址的规律之后可以很轻易地遍历出整个系统中存储的所有长网址了。这就意味着可能会被人直接拖库。
文中最初提到的 hashids 则是解决这个问题的一个极佳方案。它提供一种能把任意正整数转换为指定位数字符串的可逆算法，基于 salt 安全性也有保障。并且虽然它名字中含有 hash，但实际生成的字符串不会发生碰撞，当数字过大无法用指定位数字符串表示的时候会自动增加一位。</description>
            <content type="html"><![CDATA[

<p>差不多 5 年前逛 github 的时候偶然发现了 hashids 这个东西，当时就觉得 hashids 很适合用在短网址系统上，于是花了一天时间撸了个简单的短网址系统出来。</p>

<p>当时是纯粹为了练手，项目写完放 github 上，然后就在 v2ex 上发了个贴，最初稍微维护了一下后来也就没有再管。前几天上 github 发现，这个几年没维护的项目靠自然流量也有 200 star 了，看来短网址这个东西的需求仍然很旺盛。</p>

<p>现在回过头来看当时的实现方案还是比较粗糙的，个人项目玩玩可以，用在商业生产环境就不太够了。不过目前倒也没有自建短网址的需求，不会再像当时一样自己再撸一套，但短网址系统的设计思路和一些坑倒是可以整理一下。</p>

<h2 id="背景">背景</h2>

<h3 id="什么是短网址系统">什么是短网址系统？</h3>

<p>短网址已经是一个老生常谈的话题了，这块想必不用多说，它的作用主要就是把一个很长的网址转换成一个较短的地址。像微博的 t.cn、百度的 dwz.cn、腾讯的 url.cn 都是常见的短网址系统。</p>

<h3 id="为什么要用短网址系统">为什么要用短网址系统？</h3>

<p>现在的很多链接由于需要带上很多参数来提供业务所需的数据，所以往往非常冗长，而相应地转换成短网址后能带来很多益处：</p>

<ul>
<li>在分发和使用的时候更方便、清爽</li>
<li>更好地适应微博、短信等有字数限制的场景</li>
<li>降低生成二维码的复杂度，提升扫码识别率</li>
<li>可以一定程度上隐藏部分参数，比如 aff 等</li>
<li>能够实现链接跳转的跟踪和各维度数据统计</li>
<li>原网址失效后可以不改变短网址，只修改跳转关系</li>
<li>个性短网址更有利于品牌建设和营销</li>
</ul>

<h2 id="设计思路">设计思路</h2>

<p>短网址系统做到可用是比较简单的，但是想要高性能、可靠且安全的话，涉及到的很多点也能展开得非常细。</p>

<h3 id="长短链映射">长短链映射</h3>

<p>短网址系统最核心的功能就是长短链之间的转换了，长网址的长度可以认为是没有限制的，所以使用可逆的压缩或者加密算法将其转换成一个长度有限的短网址是不可能做到的，我们必须借助 DB 或者其他存储系统来实现映射的存储。</p>

<h4 id="发号">发号</h4>

<p>那么自然会产生的一种思路就是将长网址存入一张表，然后使用 DB 中的自增主键来作为短网址，此时我们得到的短网址类似这样 <code>xx.xx/1</code>、<code>xx.xx/2</code>。这其实就是发号式短网址的基本思路。</p>

<p>在此基础上我们可以做一些微小的改良来得到更短的链接，比如把 10 进制的 ID 转换成 16 进制，或者 <code>a-z A-Z 0-9</code> 这些字符组成的 62 进制，此时在数字比较大的时候我们得到的短网址就会类似 <code>xx.xx/Ad3Ef</code>。</p>

<p>上面一步完成后得到的地址看上去就和目前常见的短网址非常相似了，但这种直接暴露 ID 的方式会产生安全上的问题，别有用心的人发现短网址的规律之后可以很轻易地遍历出整个系统中存储的所有长网址了。这就意味着可能会被人直接拖库。</p>

<p>文中最初提到的 hashids 则是解决这个问题的一个极佳方案。它提供一种能把任意正整数转换为指定位数字符串的<strong>可逆</strong>算法，基于 salt 安全性也有保障。并且虽然它名字中含有 hash，但实际生成的字符串<strong>不会发生碰撞</strong>，当数字过大无法用指定位数字符串表示的时候会自动增加一位。</p>

<p>实测下来使用 62 进制字符串的情况下，6 位长度字符串可以表示至少 1 亿条数据，7 位长度可以表示近 50 亿条数据，可以说完全足够业务使用了。至于 hashids 的具体实现原理可以查看它的<a href="https://hashids.org/" target="_blank">官网介绍</a>。</p>

<h4 id="hash">Hash</h4>

<p>既然使用发号的方式也不能直接暴露 ID，那是否也可以使用 hash 来进行长网址的缩短呢？我们都知道 hash 是一定会存在碰撞的，在长地址空间不确定的情况下，碰撞概率以及碰撞后的处理都会存在很大的不确定性，所以一般来说 hash 在大规模的线上短链接系统中是不能被接受的。</p>

<p>不过近些年才出现的 <a href="https://zh.wikipedia.org/wiki/Murmur%E5%93%88%E5%B8%8C" target="_blank">MurmurHash</a> 对于类似场景则有一定程度的优化，它诞生也就十年出头，就已经被很多著名的开源项目使用，比如 Redis、Nginx、Hadoop 等等。对于规律性较强的 key，它的随机分布特征表现更良好，更好的平衡性和更低的碰撞率使得它也能够在特定场景下用于短网址系统。</p>

<h3 id="重定向跳转">重定向跳转</h3>

<p>实现了长短链的映射转换之后，只要再完成短链到长链的重定向跳转也就实现了短网址系统的核心功能了。</p>

<p>重定向这块主要涉及的是 301 和 302 的选择，当然 http 的跳转除了 301、302 之外 还有 303、307、308，不过在短网址系统中一般是用不到的。</p>

<p>简单来说 301 是永久重定向，302 是临时重定向。如果短链生成后就不会变化，那么使用 301 则更符合 http 语义，同时浏览器会缓存 301 跳转，这也能很大程度上减轻服务器压力。</p>

<p>不过在很多使用场景中我们往往都想要对链接跳转的数据进行统计，而且如果我们也需要实现活链功能，也就是同一个短链指向的长链后续可以修改的话，那就只有选择 302。</p>

<h3 id="优化">优化</h3>

<p>上面两步做完之后，一个简单的可用的短网址系统就实现了，不过如果想要在大型商用系统中使用还是需要做些性能上的优化。</p>

<h4 id="缓存">缓存</h4>

<p>性能优化最基本的自然是缓存，短链到长链的转换基本上就是一个 key-value 的查询过程，所以使用常见的 Redis 等缓存方案来缓存长短链的对应关系再合适不过了。先走缓存再查数据库，数据库对应字段索引合理的情况下，整个系统的性能就不会差。</p>

<p>在缓存大小有限的情况下也可以选择缓存热点数据，至于涉及到的其他诸如分布式缓存、缓存穿透和雪崩、迁移数据预热等等展开来又是一个比较大的话题了。</p>

<h4 id="布隆过滤器">布隆过滤器</h4>

<p>布隆过滤器也是一种非常适用于短网址系统的算法，它可以用来快速判断某个 url 是否在大量的 url 集合当中，并且空间复杂度也很低，我们大约只要 500M 左右的内存空间就能完成 20 亿左右 url 集合的判断。</p>

<p>布隆过滤器的具体原理就不赘述了，大概讲讲它在前面提到的发号和 Hash 两种长短链映射方式中的使用场景。</p>

<p>在发号式生成短链的系统中，如果同一个长链被转换多次，那么在没有判断长链是否已存在的情况下，这个地址会被转换成多个不同的短链。如果我们希望同一个长链多次转换的结果相同，那么查库显然比较低效，而缓存是 key-value 的，反过来查询 value 也很低效，这时就可以使用布隆过滤器。</p>

<p>而在 Hash 生成短链的系统中，布隆过滤器则可以用来很方便地判断哈希碰撞，所以说这个算法非常适合各种短网址系统。</p>

<h4 id="发号器选择">发号器选择</h4>

<p>发号式生成短网址方式的核心是发号器，也就是 ID 生成器，一般来说使用 MySQL 等数据库的自增主键就够了，毕竟大多数短网址系统应该是读操作更多，写操作较少。</p>

<p>不过硬要深究的话，也可以使用 Redis、Snowflake 来实现发号器，但这些方案无疑会极大地增加系统复杂度，除非是超大型规模的短网址项目才会考虑到。或者采用 uuid 的方式实现分布式的 ID 生成，但 uuid 的长度又有些过长了。</p>

<h4 id="语言选择">语言选择</h4>

<p>语言选择放在最后是因为个人觉得对于短网址这种简单业务来讲，在大多数项目里语言的选择并不会是一个很关键的注意点。</p>

<p>我几年前的那个项目是使用 PHP 加上一个基本只有路由功能的轻框架实现的，在这种文件 IO 较低的场景下主要的开销其实还是数据库层面的，与加上缓存带来的提升相比，语言的选择带来的影响就比较小了。</p>

<p>当然追求极致性能的话自然是有比 PHP 更适合的选择的，之前就有人把我的项目用 nginx + lua，也就是 OpenResty 改写出来一个版本。而现在如果让我再写一个短网址系统的话，综合性能以及开发和维护成本，我则可能更倾向于使用 Go 来实现。</p>

<h2 id="可能的坑">可能的坑</h2>

<p>短网址系统遇到的坑除了技术层面以外，一般都是恶意攻击和不合规滥用带来的。</p>

<p>短网址系统如果在转换地址的时候没有限制的话，攻击者很容易实现无限短址套娃，从而消耗大量服务器资源并产生大量垃圾数据，所以一般短网址系统是不让转换自身域名的地址的，也不让转换其他短网址域名的地址，防止攻击者通过多个短网址服务实现循环套娃。</p>

<p>至于不合规的滥用就主要是，很多涉及赌博色情等行业的网站会使用公开的短网址系统对他们网址进行包装，因为他们自己的域名一般已经被很多平台加入黑名单了，所以通过短网址的方式绕过。一旦遇到这种被滥用的情况，我们的域名很可能就会被微信、QQ、微博等平台封禁，损失惨重。</p>

<p>也正是因为容易遇到各种恶意使用者，短网址系统目前也很少有开放 API 的，基本都是各大平台自建之后自己使用，而那些不知名的短网址往往也都死得很快。</p>

<h2 id="参考">参考</h2>

<ul>
<li><a href="https://zhuanlan.zhihu.com/p/134246040" target="_blank">布隆过滤器：如何快速判断某URL是否在20亿的网址集合中？ - 知乎</a></li>
<li><a href="https://hashids.org/" target="_blank">Hashids - generate short unique ids from integers</a></li>
<li><a href="https://www.zhihu.com/question/29270034" target="_blank">短 URL 系统是怎么设计的？ - 知乎</a></li>
<li><a href="https://blog.csdn.net/thinkmo/article/details/26833565" target="_blank">Murmurhash介绍与实现_数据库_ThinkMo的专栏-CSDN博客</a></li>
<li><a href="https://www.jianshu.com/p/d7c1edc0836e" target="_blank">短网址系统（一）原理分析 - 简书</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/60669395" target="_blank">HTTP 中的 301、302、303、307、308 响应状态码 - 知乎</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>家居整理收纳经验学习</title>
            <link>https://qxzzf.com/posts/%E5%AE%B6%E5%B1%85%E6%95%B4%E7%90%86%E6%94%B6%E7%BA%B3%E7%BB%8F%E9%AA%8C%E5%AD%A6%E4%B9%A0/</link>
            <pubDate>Sat, 04 Jul 2020 11:14:29 +0800</pubDate>
            
            <guid>https://qxzzf.com/posts/%E5%AE%B6%E5%B1%85%E6%95%B4%E7%90%86%E6%94%B6%E7%BA%B3%E7%BB%8F%E9%AA%8C%E5%AD%A6%E4%B9%A0/</guid>
            <description>每次一到换季，就总感觉有几件衣服找不到了。实在是受不了这种感觉了，加上正好[[《怦然心动的人生整理魔法》]]的电子书上架了，就学习一下整理收纳的技巧。
收纳的前提是断舍离，如果有太多无用的纯粹占用空间的东西，那单纯靠收纳一定是没办法达到想要的结果的。好在我年初就在践行断舍离，前阵子还刚搬家，已经断断续续扔掉不少东西。
这次主要说说衣服的收纳。之前我收纳衣服时两个比较大的误区在于采用了堆叠和换季的收纳方式，采用这样的收纳方式主要是因为买了两个那种常见的塑料收纳箱，比较大比较深的那种。
这样的收纳方式会有几个问题：
 如果箱体不透明，那只能看到最上面的几件衣服，很多衣服想不起来放哪了 下层的衣服拿出来会十分麻烦，导致越下面的衣服使用频率越低 换季主要是按冬夏来分，但实际上很多衣服可以适应的季节跨度比较大，就算单独放一个箱子也很容易遇到上面说的两个问题  看完这本书之后我决定立马把衣服换成竖直收纳、不换季的收纳方式。
首先是收纳用具的替换，原来那种很深的收纳箱是不适合竖直收纳的，我买了两个拉链式的比较浅的布艺收纳盒。
也可以买抽屉式的塑料的收纳盒，防潮防虫的效果还更好一些，南方家庭收纳更推荐塑料的，不过相对来说会更贵。
当然如果家里的衣橱是本身就有抽屉的设计的话就不用买这些了。有了收纳箱之后就是按书里说的，把自己所有的衣服都拿出来，按照拿在手里是否心动的标准，一件一件地判断是否还留下，一般来说同类型的衣服保留几件就可以了。
选择好衣服之后就是相对比较枯燥的叠衣服部分了，我之前很少好好叠衣服，这次下来才知道衣服原来也有很多很多叠的方式，现在比较流行的也比较适合竖直收纳的叠法有 iBox 折叠法 和 叠成能立起来的三角状态的折叠法，具体的可以看 B 站 二彤ErTong 这个 UP 主的视频教程。
最后就是把衣服按照材质、厚度等排个顺序，竖直地放到收纳盒里，我的衣服比较少，整理好后是这样的效果，哪件衣服在哪里一眼扫去十分清晰，再也不用烦恼有衣服找不到了。
十分推荐同样经常被收纳困扰的小伙伴们读一读《怦然心动的人生整理魔法》这本书，里面的经验不仅对家居收纳有用，对我们每个人的精力、关系、知识、思考的整理也一样大有裨益。</description>
            <content type="html"><![CDATA[<p>每次一到换季，就总感觉有几件衣服找不到了。实在是受不了这种感觉了，加上正好[[《怦然心动的人生整理魔法》]]的电子书上架了，就学习一下整理收纳的技巧。</p>

<p>收纳的前提是断舍离，如果有太多无用的纯粹占用空间的东西，那单纯靠收纳一定是没办法达到想要的结果的。好在我年初就在践行断舍离，前阵子还刚搬家，已经断断续续扔掉不少东西。</p>

<p>这次主要说说衣服的收纳。之前我收纳衣服时两个比较大的误区在于采用了堆叠和换季的收纳方式，采用这样的收纳方式主要是因为买了两个那种常见的塑料收纳箱，比较大比较深的那种。</p>

<p><img src="https://superbed.qxzzf.com/item/5ee9d102a240b370e3eecb7c.png" alt="" /></p>

<p>这样的收纳方式会有几个问题：</p>

<ul>
<li>如果箱体不透明，那只能看到最上面的几件衣服，很多衣服想不起来放哪了</li>
<li>下层的衣服拿出来会十分麻烦，导致越下面的衣服使用频率越低</li>
<li>换季主要是按冬夏来分，但实际上很多衣服可以适应的季节跨度比较大，就算单独放一个箱子也很容易遇到上面说的两个问题</li>
</ul>

<p>看完这本书之后我决定立马把衣服换成竖直收纳、不换季的收纳方式。</p>

<p>首先是收纳用具的替换，原来那种很深的收纳箱是不适合竖直收纳的，我买了两个拉链式的比较浅的布艺收纳盒。</p>

<p><img src="https://superbed.qxzzf.com/item/5ee9d161a240b370e3ef2d8f.jpg" alt="" /></p>

<p>也可以买抽屉式的塑料的收纳盒，防潮防虫的效果还更好一些，南方家庭收纳更推荐塑料的，不过相对来说会更贵。</p>

<p><img src="https://superbed.qxzzf.com/item/5ee9d19ba240b370e3ef692c.png" alt="" /></p>

<p>当然如果家里的衣橱是本身就有抽屉的设计的话就不用买这些了。有了收纳箱之后就是按书里说的，把自己所有的衣服都拿出来，按照拿在手里是否心动的标准，一件一件地判断是否还留下，一般来说同类型的衣服保留几件就可以了。</p>

<p>选择好衣服之后就是相对比较枯燥的叠衣服部分了，我之前很少好好叠衣服，这次下来才知道衣服原来也有很多很多叠的方式，现在比较流行的也比较适合竖直收纳的叠法有 iBox 折叠法 和 叠成能立起来的三角状态的折叠法，具体的可以看 B 站 <a href="https://space.bilibili.com/233708504" target="_blank">二彤ErTong</a> 这个 UP 主的视频教程。</p>

<p>最后就是把衣服按照材质、厚度等排个顺序，竖直地放到收纳盒里，我的衣服比较少，整理好后是这样的效果，哪件衣服在哪里一眼扫去十分清晰，再也不用烦恼有衣服找不到了。</p>

<p><img src="https://superbed.qxzzf.com/item/5ee9d69ca240b370e3f52bd6.jpg" alt="" />
<img src="https://superbed.qxzzf.com/item/5ee9d6ada240b370e3f54595.jpg" alt="" /></p>

<p>十分推荐同样经常被收纳困扰的小伙伴们读一读《怦然心动的人生整理魔法》这本书，里面的经验不仅对家居收纳有用，对我们每个人的精力、关系、知识、思考的整理也一样大有裨益。</p>
]]></content>
        </item>
        
        <item>
            <title>时间和效率管理的一些经验谈</title>
            <link>https://qxzzf.com/posts/%E6%97%B6%E9%97%B4%E5%92%8C%E6%95%88%E7%8E%87%E7%AE%A1%E7%90%86%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C%E8%B0%88/</link>
            <pubDate>Fri, 03 Jul 2020 11:09:08 +0800</pubDate>
            
            <guid>https://qxzzf.com/posts/%E6%97%B6%E9%97%B4%E5%92%8C%E6%95%88%E7%8E%87%E7%AE%A1%E7%90%86%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%8F%E9%AA%8C%E8%B0%88/</guid>
            <description>虽然我并不是每天凌晨 5 点睡觉，但作为一个程序员，坚持了很多年晚上 11 点睡觉，在时间管理方面多多少少也有些经验。
之前我一直在凭直觉做事情，所以也没有把这些经验整理成系统的方法论。年岁越大，越觉得只是这样还远远不够，当别人问起对某件事物的见解的时候，我往往都很难给出一些系统性的知识或观点。
所以最近在学习一些东西的时候，我会刻意地培养记录整理的意识和习惯。今天就先来说说时间和效率管理。
记录时间支出 时间管理和财务管理很相似，只不过时间对大家都很公平，每个人每天都有且只有 24 个小时，那么我们需要管理的就是各自的时间支出。
首先要管理时间我们就要知道自己的时间都花在了哪些地方。我们可以每天记录自己做了哪些事情以及大概花了多少时间，然后按周、月之类的维度进行时间支出的分析。可选的方式包括日记、手帐，还有 RescueTime、ATimeLogger 之类的软件应用，挑符合自己习惯的使用即可。
我因为比较喜欢写字，所以工作的时候习惯把当天要做的和完成的事情记在本子上，有了这些记录也能方便写周报和 KPI 之类的。最近我也开始尝试在印象笔记上记日记，目前坚持了快 10 天了。
有了基础的数据之后，我们就可以进行分析和整理了。最终的目的可以概括成两个方面，做减法和提升效率。
做减法 做减法可以通过几种方式来实现，其中比较为人所熟知的是“四象限”法则，把我们要做的事情按紧急和重要进行划分，然后对不同象限的事情采取不同的行动，比如不重要不紧急的事情我们以后就可以不做。在实际操作中我们对事情的划分也可以不用过于严苛，因为价值判断往往会随时间和场景的变化而变化。
我觉得《高效能人士的七个习惯》一书当中引入的“关注圈”和“影响圈”的概念，和“四象限”法则有些相通的地方，也特别适合用来在这个信息爆炸的时代判断自己应该在哪些事情上花时间。比如各种娱乐花边新闻之类，并不在我们的影响范围内，就可以关注但不要花太多时间，而我们的家人、工作等我们能主动影响的圈子则应该多花时间。
或者再换一个角度，我们在衡量一件事对我们自身的价值的时候，可以把时间维度拉长去看。单纯为了杀时间地刷手机、玩游戏可能带来的只是短暂的多巴胺水平提升，几年之后这些时间并不会对我们带来什么收益，而读书学习则可能终身受用。这些非必要但我们却乐此不疲去做的事情其实有点像抽烟，所以不想在这些事情上花时间但又戒不掉的话也可以看看《这本书能让你戒烟》。
除了减少在非必要事务上的时间支出，我们也可以把一些需要去做但投入产出比较低的事情外包出去。比如住处的日常保洁就可以在家政平台上找阿姨来做，作为专业人士她们能做得又快又好，换来的时间我们可以做些自己更想去做的事情。外卖其实也是一样的道理，大多数人其实都在不知不觉中实践过这种方式。这种事务外包的思想在《每周工作4小时》中也有详细的阐述。
提升效率 上面这些减法做完之后，我们就可以更多地把时间花在自己必须做的事情上。这时候要想更好地利用时间就需要提升效率。
定 Routine 我们可以先确定适合自己的日常惯例，也就是 Routine。对我来说，每天上午和午觉后的两三个小时是头脑最清醒，意志力也比较强的时间段，这些时间就比较适合用来做偏理性的逻辑较强的工作，比如打码之类。而下午晚些时候开始的状态则可能更适合偏感性的工作，可以用来开开没什么营养的会，或者写作、健身之类。关于意志力对我们日常状态的影响推荐看看《意志力》这本书。
列清单 另外大家比较常用的辅助提升效率的方法就是列清单。常见的清单根据使用场景的不同我觉得大致可以分为两种：TodoList 和 CheckList。
TodoList 也就是待办清单，这个是 GTD 工作法的核心，应该不少人都有实际使用过类似的方法，该方法的具体细节可以看看《搞定》这本书。目前这块的工具做的比较好的还是滴答清单，之前曾经试用微软代办几个月的时间，我虽然喜欢微软代办的轻量简洁，但最终还是回到了滴答清单，因为滴答的提醒机制还是要强很多。
CheckList 则更多地是为了避免出错，有些事情如果步骤比较繁琐，即便是在经过了良好的培训甚至有充足的经验的情况下，单纯靠脑子记忆也还是有出现错漏的可能，这种情况下 CheckList 就能很好地减少问题的发生。关于 CheckList 也有一本书《清单革命》。
应对拖延 应该几乎每个人都或多或少地受到过拖延情绪的困扰，但实际上大多数情况并没有真正的严重到要用“症”字来形容。具体的拖延类型也多种多样，比如不到 deadline 就没生产力的期限拖延，这个事情很简单等下我一会就能做完了的简单拖延，还有我能做得到吗或者我想做得完美之类的复杂拖延等等。
应对拖延最重要的是认识到我们的哪些行为是在拖延以及拖延的具体原因，然后采取对应的处理方式。比如我们在做一件复杂或者有压力的事之前可能会想：“诶呀，指甲是不是该剪了”、“软件好像更新版本了，不如先更新下”之类，这些事情往往压力小且不重要，我们可能是通过这些事来避免做正事的不安情绪，或者是对事情做不好有种恐惧。
如果我们能认识到这些想法大多是在自欺欺人和饮鸩止渴，那也就能发现立即行动才是最好的选择。拖延展开来讲也是个比较复杂的话题，具体的可以看看《终结拖延症》这本书。
专注 正式开始做事情之后，影响效率最关键的点就是专注了。
保持专注的最好方法是真心喜欢一件事，这样的话就会积极地想做这件事，在做事的过程中也更容易获得高度集中的忘我体验。我们对待爱好和不那么喜欢的工作时的状态区别就很明显。专注做事达到废寝忘食程度的状态也可以叫做心流，相关的理论和方法可以看《心流》这本书。
但实际上我们经常要做一些没有那么喜欢的事，这些情况下我们至少要能认同这些事是自己应该做的事，并且积极主动地自发去做，而不是依赖他人的命令或者 deadline 去做。如果没办法做到这一点的话，可能就要好好考虑下自己是不是需要尝试做些大的改变了，比如换份工作、换个环境之类。
有了积极主动的心理建设作为基础，接下来我们就可以使用番茄工作法之类的方法来规划具体的执行。执行的过程中我们需要尽可能地屏蔽其他事情的干扰。日常当中比较常见的干扰大多是各种噪音和很多软件应用的通知提示之类，应对噪音可以买个好点的隔音降噪耳机，软件的通知也可以尽量关闭或静默，只是对于部分人来说关闭社交软件的通知可能需要一定的心理建设。
此外我们还需要提升做让我们分心的事情的成本。比如手机如果就在手边的话，很容易就拿起来看看，想要专注做事的时候我们就可以把手机放到视野范围外。还有像疫情期间在家办公，如果我们就在床上或床边工作的话，可能想眯一会就随时能眯一会，想当咸鱼就能立马当咸鱼，有条件的话就可以整个专门的工作区域。
在家办公的例子也涉及到另一个方面，周围环境的影响。很多准备考试的人会选择去图书馆学习，这样一方面远离了家里的床、游戏机之类的干扰源，另一方面周围都是在学习的人自己也比较容易进入学习的氛围。
环境也不只是我们所处的物理环境，我们所处的社交圈、社会环境等也会有很大影响，这也是大家都追求名校的原因之一。从学校出来之后，我们也可以通过多结交优秀的朋友，考虑加入优质的社群之类，来提升社交环境给自己的正面影响。
时间复用 除了专注我们也可以通过一些方法来提升时间的利用率。应该每个人都会遇到许多需要重复做 的事情，当我们发现一件事情需要多次去做并且每次都会花费一定时间的时候，就可以针对性地想一些解决方案，来实现一份时间的产出能够被多次使用。
对于我个人遇到的场景可以举几个具体的例子。比如招聘来的新人每个都需要培训，而培训内容基本都是一样的，那么就可以把这些内容形成文档并在后续进行维护优化，有这样的文档的帮助就可以极大地降低边际成本。还有就是作为程序员，很多类似服务器配置和简单的数据统计等重复性工作都可以通过代码来解决，这也是掌握编程技能的一个优势。
另外，一些琐碎的细小事务我们可以通过批处理的方式来减少状态切换带来的时间损失。比如固定一段时间来处理邮件和通讯软件上的消息回复、浏览和查询信息资讯等，然后有新的琐碎事务要做的时候可以通过清单等方式加入代办队列，到时间了再统一处理。就和汽车的频繁加减速最消耗能源一样，我们的大脑在切换上下文的时候也会有比较多的消耗，批处理能让大脑花在加载处理琐碎事务上下文的时间可以被复用。
以终为始 最后我们的产出和效率应该是可以被衡量的，否则也就没有进行优化的基准了。这就需要我们制定具体的可量化的目标，以终为始。
我们可以用远期的目标来确定自己努力的方向，用近期的目标来检验自己产出的成果。具体的实行方面可以参考《OKR工作法》，每个人其实都是一个小型的单元，我们可以把自己看作一家公司来进行运营和管理。</description>
            <content type="html"><![CDATA[

<p>虽然我并不是每天凌晨 5 点睡觉，但作为一个程序员，坚持了很多年晚上 11 点睡觉，在时间管理方面多多少少也有些经验。</p>

<p>之前我一直在凭直觉做事情，所以也没有把这些经验整理成系统的方法论。年岁越大，越觉得只是这样还远远不够，当别人问起对某件事物的见解的时候，我往往都很难给出一些系统性的知识或观点。</p>

<p>所以最近在学习一些东西的时候，我会刻意地培养记录整理的意识和习惯。今天就先来说说时间和效率管理。</p>

<h2 id="记录时间支出">记录时间支出</h2>

<p>时间管理和财务管理很相似，只不过时间对大家都很公平，每个人每天都有且只有 24 个小时，那么我们需要管理的就是各自的时间支出。</p>

<p>首先要管理时间我们就要知道自己的时间都花在了哪些地方。我们可以每天记录自己做了哪些事情以及大概花了多少时间，然后按周、月之类的维度进行时间支出的分析。可选的方式包括日记、手帐，还有 RescueTime、ATimeLogger 之类的软件应用，挑符合自己习惯的使用即可。</p>

<p>我因为比较喜欢写字，所以工作的时候习惯把当天要做的和完成的事情记在本子上，有了这些记录也能方便写周报和 KPI 之类的。最近我也开始尝试在印象笔记上记日记，目前坚持了快 10 天了。</p>

<p>有了基础的数据之后，我们就可以进行分析和整理了。最终的目的可以概括成两个方面，做减法和提升效率。</p>

<h2 id="做减法">做减法</h2>

<p>做减法可以通过几种方式来实现，其中比较为人所熟知的是“四象限”法则，把我们要做的事情按紧急和重要进行划分，然后对不同象限的事情采取不同的行动，比如不重要不紧急的事情我们以后就可以不做。在实际操作中我们对事情的划分也可以不用过于严苛，因为价值判断往往会随时间和场景的变化而变化。</p>

<p>我觉得《高效能人士的七个习惯》一书当中引入的“关注圈”和“影响圈”的概念，和“四象限”法则有些相通的地方，也特别适合用来在这个信息爆炸的时代判断自己应该在哪些事情上花时间。比如各种娱乐花边新闻之类，并不在我们的影响范围内，就可以关注但不要花太多时间，而我们的家人、工作等我们能主动影响的圈子则应该多花时间。</p>

<p>或者再换一个角度，我们在衡量一件事对我们自身的价值的时候，可以把时间维度拉长去看。单纯为了杀时间地刷手机、玩游戏可能带来的只是短暂的多巴胺水平提升，几年之后这些时间并不会对我们带来什么收益，而读书学习则可能终身受用。这些非必要但我们却乐此不疲去做的事情其实有点像抽烟，所以不想在这些事情上花时间但又戒不掉的话也可以看看《这本书能让你戒烟》。</p>

<p>除了减少在非必要事务上的时间支出，我们也可以把一些需要去做但投入产出比较低的事情外包出去。比如住处的日常保洁就可以在家政平台上找阿姨来做，作为专业人士她们能做得又快又好，换来的时间我们可以做些自己更想去做的事情。外卖其实也是一样的道理，大多数人其实都在不知不觉中实践过这种方式。这种事务外包的思想在《每周工作4小时》中也有详细的阐述。</p>

<h2 id="提升效率">提升效率</h2>

<p>上面这些减法做完之后，我们就可以更多地把时间花在自己必须做的事情上。这时候要想更好地利用时间就需要提升效率。</p>

<h3 id="定-routine">定 Routine</h3>

<p>我们可以先确定适合自己的日常惯例，也就是 Routine。对我来说，每天上午和午觉后的两三个小时是头脑最清醒，意志力也比较强的时间段，这些时间就比较适合用来做偏理性的逻辑较强的工作，比如打码之类。而下午晚些时候开始的状态则可能更适合偏感性的工作，可以用来开开没什么营养的会，或者写作、健身之类。关于意志力对我们日常状态的影响推荐看看《意志力》这本书。</p>

<h3 id="列清单">列清单</h3>

<p>另外大家比较常用的辅助提升效率的方法就是列清单。常见的清单根据使用场景的不同我觉得大致可以分为两种：TodoList 和 CheckList。</p>

<p>TodoList 也就是待办清单，这个是 GTD 工作法的核心，应该不少人都有实际使用过类似的方法，该方法的具体细节可以看看《搞定》这本书。目前这块的工具做的比较好的还是滴答清单，之前曾经试用微软代办几个月的时间，我虽然喜欢微软代办的轻量简洁，但最终还是回到了滴答清单，因为滴答的提醒机制还是要强很多。</p>

<p>CheckList 则更多地是为了避免出错，有些事情如果步骤比较繁琐，即便是在经过了良好的培训甚至有充足的经验的情况下，单纯靠脑子记忆也还是有出现错漏的可能，这种情况下 CheckList 就能很好地减少问题的发生。关于 CheckList 也有一本书《清单革命》。</p>

<h3 id="应对拖延">应对拖延</h3>

<p>应该几乎每个人都或多或少地受到过拖延情绪的困扰，但实际上大多数情况并没有真正的严重到要用“症”字来形容。具体的拖延类型也多种多样，比如不到 deadline 就没生产力的期限拖延，这个事情很简单等下我一会就能做完了的简单拖延，还有我能做得到吗或者我想做得完美之类的复杂拖延等等。</p>

<p>应对拖延最重要的是认识到我们的哪些行为是在拖延以及拖延的具体原因，然后采取对应的处理方式。比如我们在做一件复杂或者有压力的事之前可能会想：“诶呀，指甲是不是该剪了”、“软件好像更新版本了，不如先更新下”之类，这些事情往往压力小且不重要，我们可能是通过这些事来避免做正事的不安情绪，或者是对事情做不好有种恐惧。</p>

<p>如果我们能认识到这些想法大多是在自欺欺人和饮鸩止渴，那也就能发现立即行动才是最好的选择。拖延展开来讲也是个比较复杂的话题，具体的可以看看《终结拖延症》这本书。</p>

<h3 id="专注">专注</h3>

<p>正式开始做事情之后，影响效率最关键的点就是专注了。</p>

<p>保持专注的最好方法是真心喜欢一件事，这样的话就会积极地想做这件事，在做事的过程中也更容易获得高度集中的忘我体验。我们对待爱好和不那么喜欢的工作时的状态区别就很明显。专注做事达到废寝忘食程度的状态也可以叫做心流，相关的理论和方法可以看《心流》这本书。</p>

<p>但实际上我们经常要做一些没有那么喜欢的事，这些情况下我们至少要能认同这些事是自己应该做的事，并且积极主动地自发去做，而不是依赖他人的命令或者 deadline 去做。如果没办法做到这一点的话，可能就要好好考虑下自己是不是需要尝试做些大的改变了，比如换份工作、换个环境之类。</p>

<p>有了积极主动的心理建设作为基础，接下来我们就可以使用番茄工作法之类的方法来规划具体的执行。执行的过程中我们需要尽可能地屏蔽其他事情的干扰。日常当中比较常见的干扰大多是各种噪音和很多软件应用的通知提示之类，应对噪音可以买个好点的隔音降噪耳机，软件的通知也可以尽量关闭或静默，只是对于部分人来说关闭社交软件的通知可能需要一定的心理建设。</p>

<p>此外我们还需要提升做让我们分心的事情的成本。比如手机如果就在手边的话，很容易就拿起来看看，想要专注做事的时候我们就可以把手机放到视野范围外。还有像疫情期间在家办公，如果我们就在床上或床边工作的话，可能想眯一会就随时能眯一会，想当咸鱼就能立马当咸鱼，有条件的话就可以整个专门的工作区域。</p>

<p>在家办公的例子也涉及到另一个方面，周围环境的影响。很多准备考试的人会选择去图书馆学习，这样一方面远离了家里的床、游戏机之类的干扰源，另一方面周围都是在学习的人自己也比较容易进入学习的氛围。</p>

<p>环境也不只是我们所处的物理环境，我们所处的社交圈、社会环境等也会有很大影响，这也是大家都追求名校的原因之一。从学校出来之后，我们也可以通过多结交优秀的朋友，考虑加入优质的社群之类，来提升社交环境给自己的正面影响。</p>

<h3 id="时间复用">时间复用</h3>

<p>除了专注我们也可以通过一些方法来提升时间的利用率。应该每个人都会遇到许多需要重复做 的事情，当我们发现一件事情需要多次去做并且每次都会花费一定时间的时候，就可以针对性地想一些解决方案，来实现一份时间的产出能够被多次使用。</p>

<p>对于我个人遇到的场景可以举几个具体的例子。比如招聘来的新人每个都需要培训，而培训内容基本都是一样的，那么就可以把这些内容形成文档并在后续进行维护优化，有这样的文档的帮助就可以极大地降低边际成本。还有就是作为程序员，很多类似服务器配置和简单的数据统计等重复性工作都可以通过代码来解决，这也是掌握编程技能的一个优势。</p>

<p>另外，一些琐碎的细小事务我们可以通过批处理的方式来减少状态切换带来的时间损失。比如固定一段时间来处理邮件和通讯软件上的消息回复、浏览和查询信息资讯等，然后有新的琐碎事务要做的时候可以通过清单等方式加入代办队列，到时间了再统一处理。就和汽车的频繁加减速最消耗能源一样，我们的大脑在切换上下文的时候也会有比较多的消耗，批处理能让大脑花在加载处理琐碎事务上下文的时间可以被复用。</p>

<h3 id="以终为始">以终为始</h3>

<p>最后我们的产出和效率应该是可以被衡量的，否则也就没有进行优化的基准了。这就需要我们制定具体的可量化的目标，以终为始。</p>

<p>我们可以用远期的目标来确定自己努力的方向，用近期的目标来检验自己产出的成果。具体的实行方面可以参考《OKR工作法》，每个人其实都是一个小型的单元，我们可以把自己看作一家公司来进行运营和管理。</p>

<h2 id="结语">结语</h2>

<p>当然，高效地利用时间并不意味着我们每天都要把自己搞得精疲力尽，享受生活和创造价值也并不矛盾。如果能够做着自己喜欢的事，内心充实快乐，不被焦虑所打扰，好好地虚度时光又何妨。</p>

<p>不过对于大多数普通人来说，做好时间和效率管理大概就是获得更多可以被虚度的时光的最好办法了吧。</p>

<p><strong>附1：文中提到的书单</strong></p>

<ul>
<li>《心流》</li>
<li>《搞定》</li>
<li>《意志力》</li>
<li>《清单革命》</li>
<li>《终结拖延症》</li>
<li>《OKR工作法》</li>
<li>《每周工作4小时》</li>
<li>《这本书能让你戒烟》</li>
<li>《高效能人士的七个习惯》</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>WSL2 使用体验</title>
            <link>https://qxzzf.com/posts/wsl2-%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</link>
            <pubDate>Thu, 16 Apr 2020 11:39:55 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/wsl2-%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</guid>
            <description>去年全面转向 Windows 设备之后，为了追求更友好的开发体验，我就开始尝试了还处在 Preview 阶段的 WSL2。到现在 Win10 2004 中 WSL2 全面可用，我也算重度使用了快半年了。
作为一个被 WSL 一代伤过的人，一开始对于 WSL2 其实也没有抱太高的预期，也正因为如此，微软在 WSL2 上下的功夫倒是给了我不少惊喜，而且这半年的时间能明显感觉到 WSL2 在变得越来越好用。
WSL2 最核心的变化，自然是这一代使用了跑在虚拟机中的完整 Linux，在各方面和原生的 Linux 区别已经很少了（具体见参考链接），可以支持更底层的应用，也不需要为了兼容性做各种 trick，这也使得 Windows 版的 Docker 在代码改动量很少的情况下就支持了使用 WSL2 做 backend。
在性能方面 WSL2 也有着大幅的提升，降低了进程启动的开销，本地文件系统的读写能力也大大提高，可以充分享受高性能 SSD 的爽快感。不过 /mnt 下挂载的 Windows 磁盘因为改成通过网络协议进行交互，所以读写性能反而下降了，尤其是在大量小文件读写比如使用 git 或者较重的 web 框架的情况下，慢到简直怀疑人生。
不过 /mnt 磁盘性能慢的问题基本是可以规避掉的，所有的项目开发都放在 WSL2 本地盘就好了。现在 VS Code 和 JetBrains 家的 IDE 对 WSL2 的支持都不错，不仅项目的打开和管理没什么区别，而且如果把这两者的 Terminal 换成 WSL 的话，更是如同直接在使用 Linux。
这种顺滑的体验也要归功于微软在 WSL2 与 Win10 系统集成度上的打磨。现在 Win10 在文件目录下按住 Shift 时弹出的右键菜单中直接就有“在此处打开 Linux Shell”选项，这在去年早期的时候还是没有的。而接下来的一个预览版里更是会加入直接在 Windows 资源管理器中访问 WSL 文件系统的功能。</description>
            <content type="html"><![CDATA[<p>去年全面转向 Windows 设备之后，为了追求更友好的开发体验，我就开始尝试了还处在 Preview 阶段的 WSL2。到现在 Win10 2004 中 WSL2 全面可用，我也算重度使用了快半年了。</p>

<p>作为一个被 WSL 一代伤过的人，一开始对于 WSL2 其实也没有抱太高的预期，也正因为如此，微软在 WSL2 上下的功夫倒是给了我不少惊喜，而且这半年的时间能明显感觉到 WSL2 在变得越来越好用。</p>

<p>WSL2  最核心的变化，自然是这一代使用了跑在虚拟机中的完整 Linux，在各方面和原生的 Linux 区别已经很少了（具体见参考链接），可以支持更底层的应用，也不需要为了兼容性做各种 trick，这也使得 Windows 版的 Docker 在代码改动量很少的情况下就支持了使用 WSL2 做 backend。</p>

<p>在性能方面 WSL2 也有着大幅的提升，降低了进程启动的开销，本地文件系统的读写能力也大大提高，可以充分享受高性能 SSD 的爽快感。不过 /mnt 下挂载的 Windows 磁盘因为改成通过网络协议进行交互，所以读写性能反而下降了，尤其是在大量小文件读写比如使用 git 或者较重的 web 框架的情况下，慢到简直怀疑人生。</p>

<p>不过 /mnt 磁盘性能慢的问题基本是可以规避掉的，所有的项目开发都放在 WSL2 本地盘就好了。现在 VS Code 和 JetBrains 家的 IDE 对 WSL2 的支持都不错，不仅项目的打开和管理没什么区别，而且如果把这两者的 Terminal 换成 WSL 的话，更是如同直接在使用 Linux。</p>

<p>这种顺滑的体验也要归功于微软在 WSL2 与 Win10 系统集成度上的打磨。现在 Win10 在文件目录下按住 Shift 时弹出的右键菜单中直接就有“在此处打开 Linux Shell”选项，这在去年早期的时候还是没有的。而接下来的一个预览版里更是会加入直接在 Windows 资源管理器中访问 WSL 文件系统的功能。</p>

<p>另外通过配置可以让 WSL 挂载的 Windows 文件系统在 WSL 里面不再全都是 777 的权限，这也进一步降低了在 Win10 当中 Windows 和 WSL 两者的割裂感。你们可能不知道让用户能在 Windows 上拥有 Linux 的开发体验是什么概念，我们一般只会用两个字来形容这种公司：巨硬！</p>

<p>虽然 WSL2 现在还是存在一些问题，比如和部分代理软件会有冲突、挂载磁盘性能低等，不过鉴于整体体验已经很棒了，还是应该给巨硬倒一杯卡布奇诺。</p>

<p>参考：</p>

<ul>
<li><a href="https://docs.microsoft.com/en-us/windows/wsl/wsl2-install" target="_blank">Installation Instructions for WSL 2</a></li>
<li><a href="https://www.v2ex.com/t/588377" target="_blank">没忍住，还是上了 wsl2 的车，说下体验</a></li>
<li><a href="https://p3terx.com/archives/problems-and-solutions-encountered-in-wsl-use-2.html" target="_blank">WSL 使用中遇到的问题及解决方案 #2 - DrvFs 文件系统权限问题</a></li>
<li><a href="http://www.mocihan.ml/archives/267/" target="_blank">WSL 和 WSL2 简单对比</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Google Adsense 收款注意点记录</title>
            <link>https://qxzzf.com/posts/google-adsense-%E6%94%B6%E6%AC%BE%E6%B3%A8%E6%84%8F%E7%82%B9%E8%AE%B0%E5%BD%95/</link>
            <pubDate>Fri, 26 Jul 2019 11:08:46 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/google-adsense-%E6%94%B6%E6%AC%BE%E6%B3%A8%E6%84%8F%E7%82%B9%E8%AE%B0%E5%BD%95/</guid>
            <description>之前 Google Adsense 申请注册还挺难成功的，后来去年的时候顺便申请了一下就通过了。
今年上半年开始在网站上投 Google Adsense 的广告，投一个月的时候收益满 10$ 会开始需要验证身份信息。Google 会通过平邮或者挂号信发一个 pin 码到帐号信息里填写的地址，第一个 pin 码是在余额达到 10$ 后自动发出的，发出后无法修改地址，所以在这之前需要确认好自己的地址填写是否正确。
不过这个 pin 码在国内收到的概率非常低，我填过上海的两个地址都没有收到过。所以基本就只能靠人工认证，人工认证需要三次发送 pin 码都没有收到后才能申请，每次申请 pin 码之后过 20 天可以再次申请 pin 码，如果想要尽快通过认证一定要记得到时间就去点一下申请。
第三个 pin 码发出后的 30 天如果还是没收到，就可以填写在线表单申请人工认证，只要填下基本信息然后传下自己身份证的照片就可以了。审核一般都很快，正常半小时内就会通过了。具体填写见参考链接。
然后收款方式方面国内能收到的就是西联汇款和国际电汇。西联电汇不需要手续费，但是支持的银行不多，收起来也比较麻烦；国际电汇各大银行一般都支持，但是需要手续费。
西联汇款现在很多银行像农行、工行都不支持了，部分支持的银行也存在限制，比如浦发银行就只支持个人对个人的汇款，Google Adsense 的发汇人是组织机构，所以收不了，非常坑。邮政储蓄那边倒是能收，不过在手机银行上收款时会报“对方交易次数超出限制”，网上很多人都遇到过这个问题，但去柜台可以正常收取。据说中国银行和光大银行比较方便，不过我没有实际使用过也不太确定。
发汇人写到 LTD，也就是 “Google Asia Pacific Pte Ltd”。
参考链接：
 收不到Google Adsense PIN码怎么办?在线验证秒通过 如何顺利收取 AdSense 广告款？  </description>
            <content type="html"><![CDATA[<p>之前 Google Adsense 申请注册还挺难成功的，后来去年的时候顺便申请了一下就通过了。</p>

<p>今年上半年开始在网站上投 Google Adsense 的广告，投一个月的时候收益满 10$ 会开始需要验证身份信息。Google 会通过平邮或者挂号信发一个 pin 码到帐号信息里填写的地址，第一个 pin 码是在余额达到 10$ 后自动发出的，发出后无法修改地址，所以在这之前需要确认好自己的地址填写是否正确。</p>

<p>不过这个 pin 码在国内收到的概率非常低，我填过上海的两个地址都没有收到过。所以基本就只能靠人工认证，人工认证需要三次发送 pin 码都没有收到后才能申请，每次申请 pin 码之后过 20 天可以再次申请 pin 码，如果想要尽快通过认证一定要记得到时间就去点一下申请。</p>

<p>第三个 pin 码发出后的 30 天如果还是没收到，就可以填写在线表单申请人工认证，只要填下基本信息然后传下自己身份证的照片就可以了。审核一般都很快，正常半小时内就会通过了。具体填写见参考链接。</p>

<p>然后收款方式方面国内能收到的就是西联汇款和国际电汇。西联电汇不需要手续费，但是支持的银行不多，收起来也比较麻烦；国际电汇各大银行一般都支持，但是需要手续费。</p>

<p>西联汇款现在很多银行像农行、工行都不支持了，部分支持的银行也存在限制，比如浦发银行就只支持个人对个人的汇款，Google Adsense 的发汇人是组织机构，所以收不了，非常坑。邮政储蓄那边倒是能收，不过在手机银行上收款时会报“对方交易次数超出限制”，网上很多人都遇到过这个问题，但去柜台可以正常收取。据说中国银行和光大银行比较方便，不过我没有实际使用过也不太确定。</p>

<p>发汇人写到 LTD，也就是 “Google Asia Pacific Pte Ltd”。</p>

<p>参考链接：</p>

<ul>
<li><a href="https://www.yigujin.cn/1756.html" target="_blank">收不到Google Adsense PIN码怎么办?在线验证秒通过</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzU4ODQwMTkxMg==&amp;mid=2247484762&amp;idx=1&amp;sn=7a16cb63d3cd3b1491cb2511396c409b&amp;chksm=fddc18cdcaab91dbabbe60db4577cb7c503e2ac8c4965e7e641c41005f07e7f290c6e8b56085&amp;mpshare=1&amp;scene=1&amp;srcid=12143v8sDHKs2yP2d7cvfN5Q#rd" target="_blank">如何顺利收取 AdSense 广告款？</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Spring-Boot Jpa 踩坑记录</title>
            <link>https://qxzzf.com/posts/spring-boot-jpa-%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</link>
            <pubDate>Tue, 28 May 2019 20:58:28 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/spring-boot-jpa-%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95/</guid>
            <description>与 lombok 配合使用的问题 如果 Entity 直接使用 @Data 注解的话，如果 Entity 之间存在关联关系，则会产生 StackOverflow 的问题。
产生这个问题的原因是 lombok 默认自动生成的 toString() 方法和 hashCode 方法会产生循环依赖。
解决方案就是只用 @Getter、@Setter 注解，然后自己重写 toString() 和 hashCode 方法。或者使用 @EqualsAndHashCode 注解时，在依赖的被维护端字段加上 @EqualsAndHashCode.Exclude 注解，也就是凡是关系注解里有 mappedBy 的都要加上 @EqualsAndHashCode.Exclude。
参考文档：
 使用Hibernate、JPA、Lombok遇到的有趣问题 Lombok.hashCode issue with “java.lang.StackOverflowError: null” @EqualsAndHashCode  ManyToMany 关系的关联表含有其他字段的情况 这种情况下中间表需要一个单独的 Entity 进行维护，可以考虑把 ManyToMany 转成 ManyToOne 和 OneToMany 进行维护。
参考文档：
 The best way to map a many-to-many association with extra columns when using JPA and Hibernate JPA and Hibernate Many To Many Extra Columns Relationship Mapping Example with Spring Boot and MySQL  如何自动维护记录创建更新信息  Application 类上加上 @EnableJpaAuditing 对应 Entity 上加上 @EntityListeners(AuditingEntityListener.</description>
            <content type="html"><![CDATA[

<h3 id="与-lombok-配合使用的问题">与 lombok 配合使用的问题</h3>

<p>如果 Entity 直接使用 <code>@Data</code> 注解的话，如果 Entity 之间存在关联关系，则会产生 StackOverflow 的问题。</p>

<p>产生这个问题的原因是 lombok 默认自动生成的 <code>toString()</code> 方法和 <code>hashCode</code> 方法会产生循环依赖。</p>

<p>解决方案就是只用 <code>@Getter</code>、<code>@Setter</code> 注解，然后自己重写 <code>toString()</code> 和 <code>hashCode</code> 方法。或者使用 <code>@EqualsAndHashCode</code> 注解时，在依赖的被维护端字段加上 <code>@EqualsAndHashCode.Exclude</code> 注解，也就是凡是关系注解里有 <code>mappedBy</code> 的都要加上 <code>@EqualsAndHashCode.Exclude</code>。</p>

<p>参考文档：</p>

<ul>
<li><a href="https://juejin.im/post/5b3ca5386fb9a04fd34370d2" target="_blank">使用Hibernate、JPA、Lombok遇到的有趣问题</a></li>
<li><a href="https://stackoverflow.com/questions/34972895/lombok-hashcode-issue-with-java-lang-stackoverflowerror-null" target="_blank">Lombok.hashCode issue with “java.lang.StackOverflowError: null”</a></li>
<li><a href="https://projectlombok.org/features/EqualsAndHashCode" target="_blank">@EqualsAndHashCode</a></li>
</ul>

<h3 id="manytomany-关系的关联表含有其他字段的情况">ManyToMany 关系的关联表含有其他字段的情况</h3>

<p>这种情况下中间表需要一个单独的 Entity 进行维护，可以考虑把 ManyToMany 转成 ManyToOne 和 OneToMany 进行维护。</p>

<p>参考文档：</p>

<ul>
<li><a href="https://vladmihalcea.com/the-best-way-to-map-a-many-to-many-association-with-extra-columns-when-using-jpa-and-hibernate/" target="_blank">The best way to map a many-to-many association with extra columns when using JPA and Hibernate</a></li>
<li><a href="https://hellokoding.com/jpa-many-to-many-extra-columns-relationship-mapping-example-with-spring-boot-maven-and-mysql/" target="_blank">JPA and Hibernate Many To Many Extra Columns Relationship Mapping Example with Spring Boot and MySQL</a></li>
</ul>

<h3 id="如何自动维护记录创建更新信息">如何自动维护记录创建更新信息</h3>

<ul>
<li><code>Application</code> 类上加上 <code>@EnableJpaAuditing</code></li>
<li>对应 Entity 上加上 <code>@EntityListeners(AuditingEntityListener.class)</code></li>
<li>对应的四个字段使用注解 <code>@CreatedDate/@CreatedBy/@LastModifiedDate/@LastModifiedBy</code></li>
<li>新增一个 <code>@Configuration</code> 类实现 <code>AuditorAware</code> 接口</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>个人常用软件整理 - 2019</title>
            <link>https://qxzzf.com/posts/%E4%B8%AA%E4%BA%BA%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%95%B4%E7%90%86-2019/</link>
            <pubDate>Tue, 28 May 2019 17:45:08 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E4%B8%AA%E4%BA%BA%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%95%B4%E7%90%86-2019/</guid>
            <description> 日常使用  Chrome - 首先用 Edge 或 Safari 把这个下下来 HoneyView - 目前用得最舒服的图片浏览器 BandiZip - 最佳的 WinRAR 替代品 护眼大师 - 感觉比护眼宝更好用一些 SS/SSR - 基本云游必备了 MOEW - 虽然已经没人维护了但仍然是比较好用的云游套件 有道云笔记 - 因为印象笔记手机端不支持 Markdown 而转的，虽然也不怎么好用 有道词典 - 界面还比较美观 微信 - 大环境下几乎不得不用 QQ拼音输入法 - 相对比较舒服的输入法了 百度网盘 - 虽然不开会员的话很恶心，但没办法 ShareMouse - 很小众的一个软件，用来实现在 Mac 和 Windows 两台电脑间共享同一套键鼠  开发相关  Git - 基础设施 JetBrains 全家桶 - 开发必备 Sublime Text - 必备的文本编辑器之一 Notepad++ - 必备的文本编辑器之二 XShell 家族 - Windows 下最好用的终端软件 Docker - 现代开发者必备了几乎 Postman - 接口调试利器，云端同步很爽 Charles - 感觉比 Fiddler 好用一点点 Navicat - 比较好用的数据库客户端，DataGrip 不支持 http tunnel 的话还是无法完全替代 各语言各自的开发执行环境  时代的眼泪  office - 现在用得很少，基本可以被在线文档取代 迅雷 - 感觉死了好几年了  </description>
            <content type="html"><![CDATA[

<h3 id="日常使用">日常使用</h3>

<ul>
<li>Chrome - 首先用 Edge 或 Safari 把这个下下来</li>
<li>HoneyView - 目前用得最舒服的图片浏览器</li>
<li>BandiZip - 最佳的 WinRAR 替代品</li>
<li>护眼大师 - 感觉比护眼宝更好用一些</li>
<li>SS/SSR - 基本云游必备了</li>
<li>MOEW - 虽然已经没人维护了但仍然是比较好用的云游套件</li>
<li>有道云笔记 - 因为印象笔记手机端不支持 Markdown 而转的，虽然也不怎么好用</li>
<li>有道词典 - 界面还比较美观</li>
<li>微信 - 大环境下几乎不得不用</li>
<li>QQ拼音输入法 - 相对比较舒服的输入法了</li>
<li>百度网盘 - 虽然不开会员的话很恶心，但没办法</li>
<li>ShareMouse - 很小众的一个软件，用来实现在 Mac 和 Windows 两台电脑间共享同一套键鼠</li>
</ul>

<h3 id="开发相关">开发相关</h3>

<ul>
<li>Git - 基础设施</li>
<li>JetBrains 全家桶 - 开发必备</li>
<li>Sublime Text - 必备的文本编辑器之一</li>
<li>Notepad++ - 必备的文本编辑器之二</li>
<li>XShell 家族 - Windows 下最好用的终端软件</li>
<li>Docker - 现代开发者必备了几乎</li>
<li>Postman - 接口调试利器，云端同步很爽</li>
<li>Charles - 感觉比 Fiddler 好用一点点</li>
<li>Navicat - 比较好用的数据库客户端，DataGrip 不支持 http tunnel 的话还是无法完全替代</li>
<li>各语言各自的开发执行环境</li>
</ul>

<h3 id="时代的眼泪">时代的眼泪</h3>

<ul>
<li>office - 现在用得很少，基本可以被在线文档取代</li>
<li>迅雷 - 感觉死了好几年了</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Spring Boot 中自定义 MessageConverter</title>
            <link>https://qxzzf.com/posts/spring-boot-%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89-messageconverter/</link>
            <pubDate>Fri, 01 Mar 2019 14:46:10 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/spring-boot-%E4%B8%AD%E8%87%AA%E5%AE%9A%E4%B9%89-messageconverter/</guid>
            <description>背景 Spring MVC 自带比较强大的消息格式转化能力，它内部默认支持将接口返回值根据请求 header 中的 Accept 字段的值将结果转化为 纯文本、xml、json 等格式。
但是现在 web 开发和前端交互的过程中基本只会用到 json 格式，在默认配置下，浏览器直接访问接口时，由于浏览器请求 header 中会默认加上 Accept: text/html,application/xhtml+xml,application/xml，所以接口会返回 xml 格式的数据，导致我们的前端同学十分反感。
解决方案 一开始我们找到的解决方案都是只能在每个接口的 RequestMapping 注解里加上 produces 指定返回的格式，或者自定义一个 JsonRequestMapping 注解，这些都无法全局生效，不是特别方便和优雅。
后来参考了一篇文章，看了下 RequestMappingHandlerAdapter 类的源码，大概知道了 Spring MVC 消息格式自动转化的原理，然后顺着这个思路找了下自定义 MessageConverter 的方法。
最终的实现方案就是写一个 WebConfiguration 类，在 extendMessageConverters 方法中把其他 converter 都清掉，只留一个 json 的 converter，虽然也不算很优雅。示例代码如下：
package com.demo; import org.springframework.context.annotation.Configuration; import org.springframework.http.converter.HttpMessageConverter; import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter; import org.springframework.web.servlet.config.annotation.WebMvcConfigurer; import java.util.List; /** * @author zhangzhoufei */ @Configuration public class WebConfiguration implements WebMvcConfigurer { @Override public void extendMessageConverters(List&amp;lt;HttpMessageConverter&amp;lt;?</description>
            <content type="html"><![CDATA[

<h3 id="背景">背景</h3>

<p>Spring MVC 自带比较强大的消息格式转化能力，它内部默认支持将接口返回值根据请求 header 中的 Accept 字段的值将结果转化为 纯文本、xml、json 等格式。</p>

<p>但是现在 web 开发和前端交互的过程中基本只会用到 json 格式，在默认配置下，浏览器直接访问接口时，由于浏览器请求 header 中会默认加上 <code>Accept: text/html,application/xhtml+xml,application/xml</code>，所以接口会返回 xml 格式的数据，导致我们的前端同学十分反感。</p>

<h3 id="解决方案">解决方案</h3>

<p>一开始我们找到的解决方案都是只能在每个接口的 <code>RequestMapping</code> 注解里加上 <code>produces</code> 指定返回的格式，或者自定义一个 <code>JsonRequestMapping</code> 注解，这些都无法全局生效，不是特别方便和优雅。</p>

<p>后来参考了一篇文章，看了下 <code>RequestMappingHandlerAdapter</code> 类的源码，大概知道了 Spring MVC 消息格式自动转化的原理，然后顺着这个思路找了下自定义 MessageConverter 的方法。</p>

<p>最终的实现方案就是写一个 <code>WebConfiguration</code> 类，在 <code>extendMessageConverters</code> 方法中把其他 converter 都清掉，只留一个 json 的 converter，虽然也不算很优雅。示例代码如下：</p>

<pre><code class="language-java">package com.demo;

import org.springframework.context.annotation.Configuration;
import org.springframework.http.converter.HttpMessageConverter;
import org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

import java.util.List;

/**
 * @author zhangzhoufei
 */
@Configuration
public class WebConfiguration implements WebMvcConfigurer {

    @Override
    public void extendMessageConverters(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters) {
        converters.clear();
        //具体保留哪个 json converter 要看项目中依赖的 json 组件是哪一个
        MappingJackson2HttpMessageConverter converter = new MappingJackson2HttpMessageConverter();
        converters.add(converter);
    }
}

</code></pre>

<p>非 spring boot 的项目中可以通过配置 <code>&lt;mvc:annotation-driven/&gt;</code> 来实现同样的效果。</p>

<h3 id="参考文档">参考文档</h3>

<ul>
<li><a href="https://www.cnblogs.com/fangjian0423/p/springMVC-xml-json-convert.html" target="_blank">SpringMVC关于json、xml自动转换的原理研究</a></li>
<li><a href="https://www.jianshu.com/p/ffe56d9553fd" target="_blank">Spring Boot：定制HTTP消息转换器</a></li>
<li><a href="https://segmentfault.com/a/1190000011420942" target="_blank">SpringBoot配置类WebMvcConfigurerAdapter</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Spring Boot 中 MyBatis 自定义 TypeHandler</title>
            <link>https://qxzzf.com/posts/spring-boot-%E4%B8%AD-mybatis-%E8%87%AA%E5%AE%9A%E4%B9%89-typehandler/</link>
            <pubDate>Wed, 20 Feb 2019 17:15:55 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/spring-boot-%E4%B8%AD-mybatis-%E8%87%AA%E5%AE%9A%E4%B9%89-typehandler/</guid>
            <description>有了 Spring-Boot 全家桶之后，很多配置都不用写 xml 了，MyBatis 我也比较喜欢通过纯注解方式实现所有功能，感觉方便很多，所以这篇文章里不涉及任何的 xml 配置。
应用配置中增加 type-handlers-package 配置项 mybatis.type-handlers-package=com.xxx.handlers
写具体的实现类 自定义的 TypeHandler 类可以继承 BaseTypeHandler，或者实现 TypeHandler。
可以通过 MappedJdbcTypes 注解设置映射的 Jdbc 数据类型，通过 MappedTypes 注解设置映射到的 Java 数据类型。
由于 MyBatis 默认的 TypeHandler 在把数据库中的 timestamp 类型映射到 String 的时候会带上毫秒，而我在项目中需要的格式不需要毫秒，所以我自己写了一个 TypeHandler。完整的实例如下：
package com.xxx.type; import lombok.extern.slf4j.Slf4j; import org.apache.commons.lang3.StringUtils; import org.apache.ibatis.type.JdbcType; import org.apache.ibatis.type.MappedJdbcTypes; import org.apache.ibatis.type.MappedTypes; import org.apache.ibatis.type.TypeHandler; import java.sql.CallableStatement; import java.sql.PreparedStatement; import java.sql.ResultSet; import java.sql.SQLException; /** * @author zhangzhoufei */ @MappedJdbcTypes(JdbcType.TIMESTAMP) @MappedTypes(String.class) @Slf4j public class TimeStringTypeHandler implements TypeHandler { @Override public void setParameter(PreparedStatement preparedStatement, int i, Object o, JdbcType jdbcType) throws SQLException { String value = (String) o; preparedStatement.</description>
            <content type="html"><![CDATA[

<p>有了 Spring-Boot 全家桶之后，很多配置都不用写 xml 了，MyBatis 我也比较喜欢通过纯注解方式实现所有功能，感觉方便很多，所以这篇文章里不涉及任何的 xml 配置。</p>

<h3 id="应用配置中增加-type-handlers-package-配置项">应用配置中增加 type-handlers-package 配置项</h3>

<p>mybatis.type-handlers-package=com.xxx.handlers</p>

<h3 id="写具体的实现类">写具体的实现类</h3>

<p>自定义的 TypeHandler 类可以继承 <code>BaseTypeHandler</code>，或者实现 <code>TypeHandler</code>。</p>

<p>可以通过 <code>MappedJdbcTypes</code> 注解设置映射的 Jdbc 数据类型，通过 <code>MappedTypes</code> 注解设置映射到的 Java 数据类型。</p>

<p>由于 MyBatis 默认的 TypeHandler 在把数据库中的 timestamp 类型映射到 String 的时候会带上毫秒，而我在项目中需要的格式不需要毫秒，所以我自己写了一个 TypeHandler。完整的实例如下：</p>

<pre><code class="language-java">package com.xxx.type;

import lombok.extern.slf4j.Slf4j;
import org.apache.commons.lang3.StringUtils;
import org.apache.ibatis.type.JdbcType;
import org.apache.ibatis.type.MappedJdbcTypes;
import org.apache.ibatis.type.MappedTypes;
import org.apache.ibatis.type.TypeHandler;

import java.sql.CallableStatement;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 * @author zhangzhoufei
 */
@MappedJdbcTypes(JdbcType.TIMESTAMP)
@MappedTypes(String.class)
@Slf4j
public class TimeStringTypeHandler implements TypeHandler {

    @Override
    public void setParameter(PreparedStatement preparedStatement, int i, Object o, JdbcType jdbcType) throws SQLException {
        String value = (String) o;
        preparedStatement.setString(i, value);
    }

    @Override
    public Object getResult(ResultSet resultSet, String s) throws SQLException {
        return this.formatTime(resultSet.getString(s));
    }

    @Override
    public Object getResult(ResultSet resultSet, int i) throws SQLException {
        return this.formatTime(resultSet.getString(i));
    }

    @Override
    public Object getResult(CallableStatement callableStatement, int i) throws SQLException {
        return this.formatTime(callableStatement.getString(i));
    }

    private String formatTime(String timeStr) {
        if (StringUtils.isEmpty(timeStr)) {
            return timeStr;
        }

        // 2019-02-20 10:00:00
        try {
            return timeStr.substring(0, 19);
        } catch (Exception e) {
            e.printStackTrace();
        }

        return timeStr;
    }
}

</code></pre>

<p>参考文档中的实例大多是枚举值的映射，在实际项目中也很常用。</p>

<h3 id="配置-mapper-类结果集映射中使用的-typehandler">配置 Mapper 类结果集映射中使用的 TypeHandler</h3>

<pre><code class="language-java">@Results(id = &quot;entity&quot;, value = {
        @Result(column = &quot;created_at&quot;, property = &quot;createdAt&quot;, typeHandler = TimeStringTypeHandler.class),
})
</code></pre>

<h3 id="参考文档">参考文档</h3>

<ul>
<li><a href="https://www.jianshu.com/p/93de918655eb" target="_blank">mybatis-自定义TypeHandler</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/43165846" target="_blank">Mybatis TypeHandler</a></li>
<li><a href="https://juejin.im/entry/59225b9f8d6d810058e39536" target="_blank">浅析 mybatis 中 TypeHandler 类型转换器 + 自定义 TypeHandler</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>人生中对自己产生重要影响的几句话的感悟记录</title>
            <link>https://qxzzf.com/posts/%E4%BA%BA%E7%94%9F%E4%B8%AD%E5%AF%B9%E8%87%AA%E5%B7%B1%E4%BA%A7%E7%94%9F%E9%87%8D%E8%A6%81%E5%BD%B1%E5%93%8D%E7%9A%84%E5%87%A0%E5%8F%A5%E8%AF%9D%E7%9A%84%E6%84%9F%E6%82%9F%E8%AE%B0%E5%BD%95/</link>
            <pubDate>Wed, 31 Oct 2018 14:42:46 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E4%BA%BA%E7%94%9F%E4%B8%AD%E5%AF%B9%E8%87%AA%E5%B7%B1%E4%BA%A7%E7%94%9F%E9%87%8D%E8%A6%81%E5%BD%B1%E5%93%8D%E7%9A%84%E5%87%A0%E5%8F%A5%E8%AF%9D%E7%9A%84%E6%84%9F%E6%82%9F%E8%AE%B0%E5%BD%95/</guid>
            <description>&amp;ldquo;你到底是粗心大意还是确实没有掌握&amp;rdquo;——初中念书时成绩基本都是年级第一，有一次可能是数学还是哪一科有题目做错时我把原因归结为粗心大意，当时做语文老师的班主任就对我说了这句话，于是我仔细思考了下发现好像这个知识点我真的没有深入理解才会做错。这句话对我的影响十分深远，一直到现在每当我有事情做得不够好时，就会思考自己到底是技能方面有所欠缺还是没有用心去做，然后针对性地去解决，争取以后能做得更好。
&amp;ldquo;不要把别人想像得太聪明&amp;rdquo;——上家公司的 leader 在发生一次线上事件后对我说的一句话，当时主要责任可能在于产品经理没有去跟进数据的变化，开发这边领了次责。这句话一直提醒我在工作中做事情的时候要有主人翁意识，有时需要主动关心一些职责范围以外的东西，任何时候都不能把命运完全交托到别人的手里。
&amp;ldquo;工作的这几年里你学到的最重要的东西是什么&amp;rdquo;——从上家公司跳槽出来找工作时某家最后没有发 offer 的公司的技术负责人面试时问我的最后一个问题，当时完全没有想到会被问到这样的问题，我的回答基本也是一些偏技术方面的东西，事后想想自己对自己的回答不是很满意。其实工作的这几年里学到的最重要的东西根本不是技术方面的这些知识，而是如何去学习、如何去做事，比如反思、总结、整理和分享的重要性等。</description>
            <content type="html"><![CDATA[<p>&ldquo;你到底是粗心大意还是确实没有掌握&rdquo;——初中念书时成绩基本都是年级第一，有一次可能是数学还是哪一科有题目做错时我把原因归结为粗心大意，当时做语文老师的班主任就对我说了这句话，于是我仔细思考了下发现好像这个知识点我真的没有深入理解才会做错。这句话对我的影响十分深远，一直到现在每当我有事情做得不够好时，就会思考自己到底是技能方面有所欠缺还是没有用心去做，然后针对性地去解决，争取以后能做得更好。</p>

<p>&ldquo;不要把别人想像得太聪明&rdquo;——上家公司的 leader 在发生一次线上事件后对我说的一句话，当时主要责任可能在于产品经理没有去跟进数据的变化，开发这边领了次责。这句话一直提醒我在工作中做事情的时候要有主人翁意识，有时需要主动关心一些职责范围以外的东西，任何时候都不能把命运完全交托到别人的手里。</p>

<p>&ldquo;工作的这几年里你学到的最重要的东西是什么&rdquo;——从上家公司跳槽出来找工作时某家最后没有发 offer 的公司的技术负责人面试时问我的最后一个问题，当时完全没有想到会被问到这样的问题，我的回答基本也是一些偏技术方面的东西，事后想想自己对自己的回答不是很满意。其实工作的这几年里学到的最重要的东西根本不是技术方面的这些知识，而是如何去学习、如何去做事，比如反思、总结、整理和分享的重要性等。</p>
]]></content>
        </item>
        
        <item>
            <title>使用 fork 和 pull request 参与维护开源项目代码</title>
            <link>https://qxzzf.com/posts/%E4%BD%BF%E7%94%A8-fork-%E5%92%8C-pull-request-%E5%8F%82%E4%B8%8E%E7%BB%B4%E6%8A%A4%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/</link>
            <pubDate>Mon, 29 Oct 2018 17:49:39 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E4%BD%BF%E7%94%A8-fork-%E5%92%8C-pull-request-%E5%8F%82%E4%B8%8E%E7%BB%B4%E6%8A%A4%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E4%BB%A3%E7%A0%81/</guid>
            <description> 与原项目代码保持同步 我们 fork 出的项目 clone 到本地之后，需要在本地项目的 remote 源中添加原项目的地址。
注意将 project-git-path 替换为实际路径，其中 upstream 是上游源的命名，这个命名可以自定义，不过和默认的 remote 源叫 origin 一样，这个 upstream 也是约定俗称的命名。
git remote add upstream &amp;lt;project-git-path&amp;gt;  当原项目的代码更新时可以通过下面的命令同步原项目的代码：
git fetch upstream git checkout master git merge upstream/master -no-ff  其中 merge 时的 --no-ff 参数是关闭默认的快速合并模式，为什么要使用这个参数可以查看参考文档中的“Git 分支管理策略”。
使用 pull request 首先对于 fork 的项目我们一般会新建一个分支进行维护，编码完成之后将代码 push 到自己的项目之前注意先同步原项目代码。
代码 push 上去之后就可以在 github 的界面上操作 pull request 了：
 到原项目的 pull request 页面，点击右上角的 New pull request 按钮 点击 compare across forks 以选择我们 fork 的项目 左边 base 选择原项目的主分支，右边 compare 选择我们 fork 出的项目里自己创建的分支 这时页面上会展示出两个分支间的 diff 信息，确认无误后点击创建按钮并填写描述信息即可  参考文档  github fork 代码同步与pull request Git分支管理策略 Make-a-Pull-Request About pull requests（Github 官方）  </description>
            <content type="html"><![CDATA[

<h3 id="与原项目代码保持同步">与原项目代码保持同步</h3>

<p>我们 fork 出的项目 clone 到本地之后，需要在本地项目的 remote 源中添加原项目的地址。</p>

<p>注意将 project-git-path 替换为实际路径，其中 upstream 是上游源的命名，这个命名可以自定义，不过和默认的 remote 源叫 origin 一样，这个 upstream 也是约定俗称的命名。</p>

<pre><code>git remote add upstream &lt;project-git-path&gt;
</code></pre>

<p>当原项目的代码更新时可以通过下面的命令同步原项目的代码：</p>

<pre><code>git fetch upstream
git checkout master
git merge upstream/master -no-ff
</code></pre>

<p>其中 merge 时的 <code>--no-ff</code> 参数是关闭默认的快速合并模式，为什么要使用这个参数可以查看参考文档中的“Git 分支管理策略”。</p>

<h3 id="使用-pull-request">使用 pull request</h3>

<p>首先对于 fork 的项目我们一般会新建一个分支进行维护，编码完成之后将代码 push 到自己的项目之前注意先同步原项目代码。</p>

<p>代码 push 上去之后就可以在 github 的界面上操作 pull request 了：</p>

<ol>
<li>到原项目的 pull request 页面，点击右上角的 <code>New pull request</code> 按钮</li>
<li>点击 <code>compare across forks</code> 以选择我们 fork 的项目</li>
<li>左边 <code>base</code> 选择原项目的主分支，右边 <code>compare</code> 选择我们 fork 出的项目里自己创建的分支</li>
<li>这时页面上会展示出两个分支间的 diff 信息，确认无误后点击创建按钮并填写描述信息即可</li>
</ol>

<h3 id="参考文档">参考文档</h3>

<ul>
<li><a href="https://www.jianshu.com/p/ce8496320c21" target="_blank">github fork 代码同步与pull request</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2012/07/git.html" target="_blank">Git分支管理策略</a></li>
<li><a href="https://github.com/rishabh-bansal/Make-a-Pull-Request" target="_blank">Make-a-Pull-Request</a></li>
<li><a href="https://help.github.com/articles/about-pull-requests/" target="_blank">About pull requests（Github 官方）</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>从谈恋爱的角度理解各种 IO 模型</title>
            <link>https://qxzzf.com/posts/%E4%BB%8E%E8%B0%88%E6%81%8B%E7%88%B1%E7%9A%84%E8%A7%92%E5%BA%A6%E7%90%86%E8%A7%A3%E5%90%84%E7%A7%8D-io-%E6%A8%A1%E5%9E%8B/</link>
            <pubDate>Sun, 28 Oct 2018 17:30:14 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E4%BB%8E%E8%B0%88%E6%81%8B%E7%88%B1%E7%9A%84%E8%A7%92%E5%BA%A6%E7%90%86%E8%A7%A3%E5%90%84%E7%A7%8D-io-%E6%A8%A1%E5%9E%8B/</guid>
            <description>首先，本文把女孩子的爱慕看作在恋爱关系中的资源，那么就可以把男孩子看作应用程序，女孩子看作系统内核，这是文章的大前提。
同步阻塞 IO 男孩子追求某个女孩子，并且专注于这个女孩子，在追到手或者失败前不会对其他女孩子有任何行动，这就是同步阻塞 IO。
同步非阻塞 IO 男孩子表白了某个女孩子，但是没有去追求她，等女孩子准备好之后就自然成了他女朋友，这就是同步非阻塞 IO。
IO 多路复用 多路复用分两种，一种是男孩子使用广撒网的方式同时撩多个妹子，相当于使用 select 方法轮询，当有女孩子愿意成为他的女朋友时则配对成功。 还有一种就就比较高级，男孩子只要向一群女孩子发出寻女友的信号，这当中就会有妹子自动找上门来当他的女朋友，这就是使用 epoll 方法的 IO 多路复用。这也就是为啥 epoll 比 select 性能要高的多的原因。
异步 IO 异步 IO 是所有 IO 模型中编程难度最高的一种，如果非要类比的话大概只能比作可能存在未来的 Open Relationship 吧，但实际上也不太好类比。</description>
            <content type="html"><![CDATA[

<p>首先，本文把女孩子的爱慕看作在恋爱关系中的资源，那么就可以把男孩子看作应用程序，女孩子看作系统内核，这是文章的大前提。</p>

<h3 id="同步阻塞-io">同步阻塞 IO</h3>

<p>男孩子追求某个女孩子，并且专注于这个女孩子，在追到手或者失败前不会对其他女孩子有任何行动，这就是同步阻塞 IO。</p>

<h3 id="同步非阻塞-io">同步非阻塞 IO</h3>

<p>男孩子表白了某个女孩子，但是没有去追求她，等女孩子准备好之后就自然成了他女朋友，这就是同步非阻塞 IO。</p>

<h3 id="io-多路复用">IO 多路复用</h3>

<p>多路复用分两种，一种是男孩子使用广撒网的方式同时撩多个妹子，相当于使用 select 方法轮询，当有女孩子愿意成为他的女朋友时则配对成功。
还有一种就就比较高级，男孩子只要向一群女孩子发出寻女友的信号，这当中就会有妹子自动找上门来当他的女朋友，这就是使用 epoll 方法的 IO 多路复用。这也就是为啥 epoll 比 select 性能要高的多的原因。</p>

<h3 id="异步-io">异步 IO</h3>

<p>异步 IO 是所有 IO 模型中编程难度最高的一种，如果非要类比的话大概只能比作可能存在未来的 Open Relationship 吧，但实际上也不太好类比。</p>
]]></content>
        </item>
        
        <item>
            <title>CentOS 6 安装 swoole4 记录</title>
            <link>https://qxzzf.com/posts/centos-6-%E5%AE%89%E8%A3%85-swoole4-%E8%AE%B0%E5%BD%95/</link>
            <pubDate>Wed, 10 Oct 2018 15:57:28 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/centos-6-%E5%AE%89%E8%A3%85-swoole4-%E8%AE%B0%E5%BD%95/</guid>
            <description>首先需要将 gcc 的版本升级到 4.8，参考 CentOS yum安装或者升级GCC到4.8。
具体步骤如下：
# 下载源并进行 yum 安装 wget http://people.centos.org/tru/devtools-2/devtools-2.repo -O /etc/yum.repos.d/devtools-2.repo yum install devtoolset-2-gcc devtoolset-2-binutils devtoolset-2-gcc-c++ # 替换系统默认软链至新版本位置 ln -s /opt/rh/devtoolset-2/root/usr/bin/gcc /usr/bin/gcc ln -s /opt/rh/devtoolset-2/root/usr/bin/c++ /usr/bin/c++ ln -s /opt/rh/devtoolset-2/root/usr/bin/g++ /usr/bin/g++ # 查看当前版本 gcc --version  这一步可能遇到报错：
http://people.centos.org/tru/devtools-2/6Server/x86_64/RPMS/repodata/repomd.xml:` [Errno 14] PYCURL ERROR 22 - &amp;quot;The requested URL returned error: 404&amp;quot; Trying other mirror. Error: Cannot retrieve repository metadata (repomd.xml) for repository: testing-devtools-2-centos-6Server. Please verify its path and try again  可以通过修改 /etc/yum.</description>
            <content type="html"><![CDATA[<p>首先需要将 gcc 的版本升级到 4.8，参考 <a href="https://blog.csdn.net/ljxfblog/article/details/80119228" target="_blank">CentOS yum安装或者升级GCC到4.8</a>。</p>

<p>具体步骤如下：</p>

<pre><code class="language-shell"># 下载源并进行 yum 安装
wget http://people.centos.org/tru/devtools-2/devtools-2.repo -O /etc/yum.repos.d/devtools-2.repo
yum install devtoolset-2-gcc devtoolset-2-binutils devtoolset-2-gcc-c++

# 替换系统默认软链至新版本位置
ln -s /opt/rh/devtoolset-2/root/usr/bin/gcc /usr/bin/gcc
ln -s /opt/rh/devtoolset-2/root/usr/bin/c++ /usr/bin/c++
ln -s /opt/rh/devtoolset-2/root/usr/bin/g++ /usr/bin/g++

# 查看当前版本
gcc --version
</code></pre>

<p>这一步可能遇到报错：</p>

<pre><code>http://people.centos.org/tru/devtools-2/6Server/x86_64/RPMS/repodata/repomd.xml:` [Errno 14] PYCURL ERROR 22 - &quot;The requested URL returned error: 404&quot;
Trying other mirror.
Error: Cannot retrieve repository metadata (repomd.xml) for repository: testing-devtools-2-centos-6Server. Please verify its path and try again
</code></pre>

<p>可以通过修改 <code>/etc/yum.repos.d/devtools-2.repo</code> 中的路径解决，参考 <a href="https://gist.github.com/giwa/b1fb1e44dc0a7d270881" target="_blank">https://gist.github.com/giwa/b1fb1e44dc0a7d270881</a>：</p>

<pre><code># 将
http://people.centos.org/tru/devtools-2/$releasever/$basearch/RPMS
# 修改为
http://people.centos.org/tru/devtools-2/6/x86_64/RPMS
</code></pre>

<p>再次执行第一步的 yum install 命令即可。</p>

<p>之后就可以正常编译安装 swoole4 了。</p>
]]></content>
        </item>
        
        <item>
            <title>手机 https 抓包折腾记</title>
            <link>https://qxzzf.com/posts/%E6%89%8B%E6%9C%BA-https-%E6%8A%93%E5%8C%85%E6%8A%98%E8%85%BE%E8%AE%B0/</link>
            <pubDate>Thu, 02 Aug 2018 17:27:31 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E6%89%8B%E6%9C%BA-https-%E6%8A%93%E5%8C%85%E6%8A%98%E8%85%BE%E8%AE%B0/</guid>
            <description>目前常用的抓包软件一般是 Fiddler 和 Charles，个人感觉 Charles 的用户体验比 Fiddler 好不少，不过 Charles 是收费的。
这两个软件抓 https 的教程网上有很多，可以参考如下几篇： - fiddler抓包HTTPS请求 - Charles 4.2.1 HTTPS抓包 - Mac下用Charles實現Android http和https抓包
简而言之，一般这个过程主要就是两步：
 开启 https 抓包配置，fiddler 是一个勾选框，charles 则是自己配需要抓的域名，可以通配 在需要抓包的客户端安装证书并添加信任  其中不同客户端的操作又分别如下：
 PC 上需要把证书安装到 “受信任的根证书颁发机构”，默认一般是安装在个人或者其他几个选项卡里的，需要自己手工导出然后导入 iOS 上安装完证书后要在设置里添加信任，可以参考上面的教程 Android 低版本只要安装好证书就行  一般来说是这样的，但是安卓就特别坑，坑就坑在安卓太碎片化了，每家对于安装证书的处理都不太一样，据我所知 oppo 安装证书就比较麻烦，具体的可以自己搜索教程。 另外 Android N 开始用户安装的证书是没犯法被应用信任的，除非应用自身配置了安全策略，详见 charles 官网文档：https://www.charlesproxy.com/documentation/using-charles/ssl-certificates/ 中 Android 部分。</description>
            <content type="html"><![CDATA[<p>目前常用的抓包软件一般是 Fiddler 和 Charles，个人感觉 Charles 的用户体验比 Fiddler 好不少，不过 Charles 是收费的。</p>

<p>这两个软件抓 https 的教程网上有很多，可以参考如下几篇：
- <a href="https://www.jianshu.com/p/0244146090c7" target="_blank">fiddler抓包HTTPS请求</a>
- <a href="https://juejin.im/post/5a30a52a6fb9a0451d4175ed" target="_blank">Charles 4.2.1 HTTPS抓包</a>
- <a href="https://com-it.tech/archives/6960" target="_blank">Mac下用Charles實現Android http和https抓包</a></p>

<p>简而言之，一般这个过程主要就是两步：</p>

<ul>
<li>开启 https 抓包配置，fiddler 是一个勾选框，charles 则是自己配需要抓的域名，可以通配</li>
<li>在需要抓包的客户端安装证书并添加信任</li>
</ul>

<p>其中不同客户端的操作又分别如下：</p>

<ul>
<li>PC 上需要把证书安装到 “受信任的根证书颁发机构”，默认一般是安装在个人或者其他几个选项卡里的，需要自己手工导出然后导入</li>
<li>iOS 上安装完证书后要在设置里添加信任，可以参考上面的教程</li>
<li>Android 低版本只要安装好证书就行</li>
</ul>

<p>一般来说是这样的，但是安卓就特别坑，坑就坑在安卓太碎片化了，每家对于安装证书的处理都不太一样，据我所知 oppo 安装证书就比较麻烦，具体的可以自己搜索教程。
另外 Android N 开始用户安装的证书是没犯法被应用信任的，除非应用自身配置了安全策略，详见 charles 官网文档：<a href="https://www.charlesproxy.com/documentation/using-charles/ssl-certificates/" target="_blank">https://www.charlesproxy.com/documentation/using-charles/ssl-certificates/</a> 中 Android 部分。</p>
]]></content>
        </item>
        
        <item>
            <title>从 IO 到协程</title>
            <link>https://qxzzf.com/posts/%E4%BB%8E-io-%E5%88%B0%E5%8D%8F%E7%A8%8B/</link>
            <pubDate>Thu, 26 Jul 2018 20:02:50 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E4%BB%8E-io-%E5%88%B0%E5%8D%8F%E7%A8%8B/</guid>
            <description>这篇文章是为了准备内部的技术分享，将 ppt 的内容进行了一定的整理，作为演讲的基础。
确定这个分享内容是周末看到一篇讲 异步、并发、协程 相关的文章，想到平时的工作中虽然经常和这些概念打交道，但是却没有真正地对每个相关的概念都理解得很透彻，便决定自己整理一遍。
Unix 体系架构 首先说到 IO，就不得不先说一说 Unix 的体系架构。由于部分指令的权限较高，一旦错用可能产生严重的后果，所以 CPU 将指令分为不同级别，内核才能调用高级别的指令，对于普通的应用程序来说，则只能调用低级别的指令。基于此，操作系统产生了三层的体系架构，分别是最内层的内核、最外层的用户空间和连接两者的系统调用。
内核拥有最高级别的权限，可以访问内存的所有数据，控制所有的硬件设备，以及执行任务调度等。而上层的应用程序则只能访问受限的内存空间，也不能访问硬件设备，其运行须依赖内核提供的资源，而且占用 CPU 资源可能被其他程序获取。为了使上层应用能够访问到这些资源，内核为上层应用提供了系统调用作为访问的接口，系统调用是系统中的最小功能单位。
用户态和内核态 用户态和内核态则是描述操作系统的两种运行状态，当一个任务(进程)执行系统调用而陷入内核代码中执行时，我们就称进程处于内核态。此时处理器处于特权级最高的内核代码。当进程在执行用户自己的代码时，则称其处于用户态。即此时处理器在特权级最低的用户代码中运行。应用程序创建的进程开始是运行在用户态的，如果需要进行 I/O 操作，则需通过系统调用从内核态将数据拷贝到用户态，这中间会经历 等待数据准备 和 拷贝数据 两个阶段。在调用 IO 操作时，应用程序与内核之间的不通交互模式就是不同的 IO 模型。
同步和异步 在讲常见的 IO 模型之前，有两对概念可以先看一看。
同步是指应用程序发起 I/O 请求后需要等待或者轮询内核 I/O 操作完成后才能继续执行。 异步是指应用程序发起 I/O 请求后仍继续执行，当内核 I/O 操作完成后会通知应用程序，或者调用应用程序注册的回调函数。 同步（Synchronised）和异步（Asynchronized）的概念描述的是应用程序与内核的交互方式，与这两个概念相关的是指令执行顺序。
简单的来说，同步是指在代码中包含 IO 操作的时候，代码是顺序执行的，IO 操作完成后，代码才会继续往下执行，而异步则是指发起 IO 操作后代码会继续往下执行，等到 IO 操作完成后，内核通过发送信号通知或者执行回调函数的方式让程序继续执行。异步需要多线程、多 CPU 或者 非阻塞 IO 的支持。
阻塞和非阻塞 阻塞是指 I/O 操作需要彻底完成后才返回到用户空间，在此之前调用线程或进程会被操作系统挂起。 非阻塞是指 I/O 操作被调用后立即返回给用户一个状态值，无需等到 I/O 操作彻底完成，而不会挂起调用线程或进程。 阻塞（Blocking）和非阻塞（Non-blocking）的概念描述的是进程或线程调用内核 I/O 操作的结果。</description>
            <content type="html"><![CDATA[

<p>这篇文章是为了准备内部的技术分享，将 ppt 的内容进行了一定的整理，作为演讲的基础。</p>

<p>确定这个分享内容是周末看到一篇讲 异步、并发、协程 相关的文章，想到平时的工作中虽然经常和这些概念打交道，但是却没有真正地对每个相关的概念都理解得很透彻，便决定自己整理一遍。</p>

<h3 id="unix-体系架构">Unix 体系架构</h3>

<p><img src="https://ws2.sinaimg.cn/large/006tKfTcgy1ftnbzqkealj30b30920uq.jpg" alt="Unix 体系架构" />
首先说到 IO，就不得不先说一说 Unix 的体系架构。由于部分指令的权限较高，一旦错用可能产生严重的后果，所以 CPU 将指令分为不同级别，内核才能调用高级别的指令，对于普通的应用程序来说，则只能调用低级别的指令。基于此，操作系统产生了三层的体系架构，分别是最内层的内核、最外层的用户空间和连接两者的系统调用。</p>

<p>内核拥有最高级别的权限，可以访问内存的所有数据，控制所有的硬件设备，以及执行任务调度等。而上层的应用程序则只能访问受限的内存空间，也不能访问硬件设备，其运行须依赖内核提供的资源，而且占用 CPU 资源可能被其他程序获取。为了使上层应用能够访问到这些资源，内核为上层应用提供了系统调用作为访问的接口，系统调用是系统中的最小功能单位。</p>

<h3 id="用户态和内核态">用户态和内核态</h3>

<p>用户态和内核态则是描述操作系统的两种运行状态，当一个任务(进程)执行系统调用而陷入内核代码中执行时，我们就称进程处于内核态。此时处理器处于特权级最高的内核代码。当进程在执行用户自己的代码时，则称其处于用户态。即此时处理器在特权级最低的用户代码中运行。应用程序创建的进程开始是运行在用户态的，如果需要进行 I/O 操作，则需通过系统调用从内核态将数据拷贝到用户态，这中间会经历 等待数据准备 和 拷贝数据 两个阶段。在调用 IO 操作时，应用程序与内核之间的不通交互模式就是不同的 IO 模型。</p>

<h3 id="同步和异步">同步和异步</h3>

<p>在讲常见的 IO 模型之前，有两对概念可以先看一看。</p>

<p>同步是指应用程序发起 I/O 请求后需要等待或者轮询内核 I/O 操作完成后才能继续执行。
异步是指应用程序发起 I/O 请求后仍继续执行，当内核 I/O 操作完成后会通知应用程序，或者调用应用程序注册的回调函数。
同步（Synchronised）和异步（Asynchronized）的概念描述的是应用程序与内核的交互方式，与这两个概念相关的是指令执行顺序。</p>

<p>简单的来说，同步是指在代码中包含 IO 操作的时候，代码是顺序执行的，IO 操作完成后，代码才会继续往下执行，而异步则是指发起 IO 操作后代码会继续往下执行，等到 IO 操作完成后，内核通过发送信号通知或者执行回调函数的方式让程序继续执行。异步需要多线程、多 CPU 或者 非阻塞 IO 的支持。</p>

<h3 id="阻塞和非阻塞">阻塞和非阻塞</h3>

<p>阻塞是指 I/O 操作需要彻底完成后才返回到用户空间，在此之前调用线程或进程会被操作系统挂起。
非阻塞是指 I/O 操作被调用后立即返回给用户一个状态值，无需等到 I/O 操作彻底完成，而不会挂起调用线程或进程。
阻塞（Blocking）和非阻塞（Non-blocking）的概念描述的是进程或线程调用内核 I/O 操作的结果。</p>

<p>虽然乍一看阻塞非阻塞和同步异步有点相似，但是实际上这两组概念是完全不同的，它们之间也并没有什么必然联系。</p>

<h3 id="常见的网络-io-模型">常见的网络 IO 模型</h3>

<h4 id="同步阻塞io-blocking-io">同步阻塞IO（Blocking IO）</h4>

<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1ftngszoft6j30kk0b6wg3.jpg" alt="同步阻塞IO" /></p>

<p>1.当用户进程调用了recvfrom这个系统调用，kernel就开始了IO的第一个阶段：准备数据。(用户态切换到内核态-准备数据)</p>

<p>2.对于network io来说，很多时候数据在一开始还没有到达，这个时候kernel就要等待足够的数据到来。而在用户进程这边，整个进程会被阻塞。(用户态-阻塞，内核态-准备数据中)</p>

<p>3.当kernel一直等到数据准备好了，它就会将数据从kernel中拷贝到用户内存，然后kernel返回结果(用户态-阻塞，内核态-拷贝数据到用户进程)</p>

<p>4.用户进程才解除block的状态，重新运行起来。(用户态-解除阻塞，内核态-数据返回完毕)</p>

<p>特点：blocking IO的特点就是在IO执行的两个阶段都被block了。</p>

<h4 id="同步非阻塞io-non-blocking-io">同步非阻塞IO（Non-blocking IO）</h4>

<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1ftngszoft6j30kk0b6wg3.jpg" alt="同步阻塞IO" /></p>

<p>1.当用户进程发出read操作时，如果kernel中的数据还没有准备好，那么它并不会block用户进程，而是立刻返回一个error。(用户态 不阻塞&mdash;&mdash;内核态-准备数据中)</p>

<p>2.从用户进程角度讲，它发起一个read操作后，并不需要等待，而是用户进程马上获取结果，如果结果是error，它就知道数据还没有准备好，于是它可以再次发送read操作。(用户态 不阻塞&mdash;&mdash;-内核态-准备数据中)</p>

<p>3.一旦kernel中的数据准备好了，并且又再次收到了用户进程的system call，那么它马上就将数据拷贝到了用户内存，然后返回。(用户态 进入阻塞&mdash;&ndash;内核态-拷贝数据回进程)</p>

<p>特点：用户进程其实是需要不断的主动询问kernel数据好了没有。</p>

<h4 id="io多路复用-io-multiplexing">IO多路复用（IO Multiplexing）</h4>

<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1ftngszoft6j30kk0b6wg3.jpg" alt="同步阻塞IO" /></p>

<p>1.当用户进程调用了select，那么整个进程会被block，而同时，kernel会“监视”所有select负责的socket，当任何一个socket中的数据准备好了，select就会返回。(用户态-阻塞，内核态-准备数据中并通知)</p>

<p>2.这个时候用户进程再调用read操作，将数据从kernel拷贝到用户进程。(用户态-阻塞，内核态-拷贝数据会用户进程)</p>

<p>特点：这里需要使用两个system call (select 和 recvfrom)，而blocking IO只调用了一个system call (recvfrom)。但是，用select的优势在于它可以同时处理多个connection。</p>

<p>这里“多路”指的是多个网络连接，“复用”指的是复用同一个线程。采用多路 I/O 复用技术可以让单个线程高效的处理多个连接请求（尽量减少网络 IO 的时间消耗）。</p>

<p>select 和 epoll 的区别例子：滴滴司机接到一单，乘客在地铁站，如果是 select 方式的话司机不知道乘客在哪个出口，epoll 方式则会知道具体出口。</p>

<h4 id="异步io-asynchronous-io">异步IO（Asynchronous IO）</h4>

<p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1ftngszoft6j30kk0b6wg3.jpg" alt="同步阻塞IO" /></p>

<p>用户进程发起read操作之后，立刻就可以开始去做其它的事。而另一方面，从kernel的角度，当它收到一个asynchronous read之后，首先它会立刻返回，所以不会对用户进程产生任何block。然后，kernel会等待数据准备完成，然后将数据拷贝到用户内存，当这一切都完成之后，kernel会给用户进程发送一个signal，告诉它read操作完成了。</p>

<p>另外还有一种信号驱动 IO，但是由于 tcp 连接中信号发生特别频繁，所以只适用于 UDP，使用并不广泛。</p>

<h3 id="并发和并行">并发和并行</h3>

<p>用户进程发起read操作之后，立刻就可以开始去做其它的事。而另一方面，从kernel的角度，当它收到一个asynchronous read之后，首先它会立刻返回，所以不会对用户进程产生任何block。然后，kernel会等待数据准备完成，然后将数据拷贝到用户内存，当这一切都完成之后，kernel会给用户进程发送一个signal，告诉它read操作完成了。</p>

<p>另外还有一种信号驱动 IO，但是由于 tcp 连接中信号发生特别频繁，所以只适用于 UDP，使用并不广泛。</p>

<h3 id="抢占式调度和协同式调度">抢占式调度和协同式调度</h3>

<p>抢占式调度允许操作系统剥夺进程执行权限，抢占控制流，因而天然适合服务器和图形操作系统，因为调度器可以优先保证对用户交互和网络事件的快速响应。抢占式调度依赖于 CPU，只有 CPU 支持分级特权指令才能实现抢占式调度。</p>

<p>协同式调度则等到进程时间片用完或系统调用时转移执行权限，因此适合实时或分时等等对运行时间有保障的系统。因为协同式调度对硬件没有什么要求，所以可以运行在很多嵌入式设备上，像我们现在用的 mac 和 windows 在早期由于 CPU 不支持也是用的协同式调度。</p>

<h3 id="进程-线程-协程">进程、线程、协程</h3>

<h4 id="进程">进程</h4>

<ul>
<li>进程是资源分配的最小单位</li>
<li>进程间不共享内存，每个进程拥有自己独立的内存</li>
<li>进程间可以通过信号、信号量、共享内存、管道、队列等来通信</li>
<li>新开进程开销大，并且 CPU 切换进程成本也大</li>
<li>进程由操作系统调度</li>
<li>多进程方式比多线程更加稳定</li>
</ul>

<h4 id="线程">线程</h4>

<ul>
<li>线程是程序执行流的最小单位</li>
<li>线程是来自于进程的，一个进程下面可以开多个线程</li>
<li>每个线程都有自己一个栈，不共享栈，但多个线程能共享同一个属于进程的堆</li>
<li>线程因为是在同一个进程内的，可以共享内存</li>
<li>线程也是由操作系统调度，线程是 CPU 调度的最小单位</li>
<li>新开线程开销小于进程，CPU 在切换线程成本也小于进程</li>
<li>某个线程发生致命错误会导致整个进程崩溃</li>
<li>线程间读写变量存在锁的问题处理起来相对麻烦</li>
</ul>

<h4 id="协程">协程</h4>

<ul>
<li>对于操作系统来说只有进程和线程，协程的控制由应用程序显式调度，非抢占式的</li>
<li>协程的执行最终靠的还是线程，应用程序来调度协程选择合适的线程来获取执行权</li>
<li>切换非常快，成本低。一般占用栈大小远小于线程（协程 KB 级别，线程 MB 级别），所以可以开更多的协程</li>
<li>协程比线程更轻量级</li>
</ul>

<p>从编程角度上看，协程的思想本质上就是控制流的主动让出（yield）和恢复（resume）机制，迭代器常被用来实现协程，所以大部分的语言实现的协程中都有 yield 关键字，比如 Python、PHP、Lua。但也有特殊比如 Go 就使用的是通道来通信。Swoole 2.0、3.0、4.0 分别用不同的方式实现了协程。</p>

<h3 id="参考文档">参考文档</h3>

<ul>
<li><p><a href="https://www.fanhaobai.com/2017/11/synchronised-asynchronized-coroutine.html" target="_blank">异步、并发、协程原理</a></p></li>

<li><p><a href="https://www.cnblogs.com/euphie/p/6376508.html" target="_blank">常见 IO 模型</a></p></li>

<li><p><a href="https://www.cnblogs.com/zemliu/p/3695503.html" target="_blank">用户态和内核态</a></p></li>

<li><p><a href="https://www.jianshu.com/p/85e931636f27" target="_blank">用户态与内核态</a></p></li>

<li><p><a href="http://yanan0628.iteye.com/blog/2268934" target="_blank">IO 与操作系统关系</a></p></li>

<li><p><a href="https://blog.csdn.net/a987073381/article/details/52201200" target="_blank">linux基础——linux下五种IO模型小结（阻塞IO、非阻塞IO、IO复用、信号驱动式IO、异步IO）</a></p></li>

<li><p><a href="https://github.com/calidion/calidion.github.io/issues/40" target="_blank">同步，异步，阻塞，非阻塞等关系轻松理解</a></p></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>使用 ShareMouse 实现 Mac、Windows 共享键鼠记录</title>
            <link>https://qxzzf.com/posts/%E4%BD%BF%E7%94%A8-sharemouse-%E5%AE%9E%E7%8E%B0-macwindows-%E5%85%B1%E4%BA%AB%E9%94%AE%E9%BC%A0%E8%AE%B0%E5%BD%95/</link>
            <pubDate>Mon, 23 Jul 2018 21:51:58 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E4%BD%BF%E7%94%A8-sharemouse-%E5%AE%9E%E7%8E%B0-macwindows-%E5%85%B1%E4%BA%AB%E9%94%AE%E9%BC%A0%E8%AE%B0%E5%BD%95/</guid>
            <description>在多台电脑间共享键鼠相对来说是个比较小众的需求，所以这方面的软件数量并不很多，其中最为有名的要数 Synergy 了。Synergy 貌似最初是开源免费的，现在收费好像也逐渐提高了，不过它是一次性买断终身使用权的，其实也算比较实惠了。
之前用过一段时间 Synergy，整体来说体验也算还可以，但是长期使用时还是发现存在一些问题：
 有 Server 和 Client 的区别，只能将 Server 的键鼠共享给 Client 配置相对较麻烦，需要自己手工添加 Screen，并且需要配置正确 Screen 的名字 有时在 Client 上操作会有延迟和卡顿 复制粘贴也不太稳定有时能用有时有点异常，比如粘贴出现乱码等 拖拽文件可以从 mac 拖到 Windows 但是反之可能有问题，并且 utf8 的文件名可能乱码以及文件夹的处理不够完善  因为存在比较多的问题，所以我一直没有将 Synergy 作为常规方案来日常使用。周末的时候突然发现 ShareMouse 这款软件，试用了一下发现它比起 Synergy 真的要强大很多，上面列出的 Synergy 的问题我一天体验下来基本都能解决，真的是十分完美了。
不过要说缺点的话也是有的，一个是相对来说比较贵，不过虽然 ShareMouse 的授权是按年卖的，但是我看官网说明是授权到期仍可使用，但是发布新版本之类的维护就享受不到了。另外 ShareMouse 除了默认的 BroadCast 方式连接各台电脑之外只支持通过具体的 ip 和 port 进行连接，这对于部分 ip 通过 dhcp 获取的网络环境的用户来说就不太方便了。
ShareMouse 和 Synergy 更多的评测可以参考这篇文章：多机共享键鼠软件横向测评，这篇文章评测了多款键鼠共享软件，包括微软自家出的针对 Windows 机器间的 Mouse without Borders，如果全部是 Windows 机器的话，用这个会更适合。
至于 ShareMouse 的安装和配置也十分简单，一般就是直接安装好安装包之后，同网段内的电脑启动服务后即可自动连接上，连接不上的话可以在 Settings &amp;gt; Clients 里手动添加。其他的配置基本看看描述也就大概知道是干嘛的了，另外值得一提的是在 mac 的客户端里已经可以配置按键映射了，这个也算是把之前的一个短板给补上了。</description>
            <content type="html"><![CDATA[<p>在多台电脑间共享键鼠相对来说是个比较小众的需求，所以这方面的软件数量并不很多，其中最为有名的要数 <a href="https://symless.com/synergy" target="_blank">Synergy</a> 了。Synergy 貌似最初是开源免费的，现在收费好像也逐渐提高了，不过它是一次性买断终身使用权的，其实也算比较实惠了。</p>

<p>之前用过一段时间 Synergy，整体来说体验也算还可以，但是长期使用时还是发现存在一些问题：</p>

<ul>
<li>有 Server 和 Client 的区别，只能将 Server 的键鼠共享给 Client</li>
<li>配置相对较麻烦，需要自己手工添加 Screen，并且需要配置正确 Screen 的名字</li>
<li>有时在 Client 上操作会有延迟和卡顿</li>
<li>复制粘贴也不太稳定有时能用有时有点异常，比如粘贴出现乱码等</li>
<li>拖拽文件可以从 mac 拖到 Windows 但是反之可能有问题，并且 utf8 的文件名可能乱码以及文件夹的处理不够完善</li>
</ul>

<p>因为存在比较多的问题，所以我一直没有将 Synergy 作为常规方案来日常使用。周末的时候突然发现 <a href="http://www.keyboard-and-mouse-sharing.com/" target="_blank">ShareMouse</a> 这款软件，试用了一下发现它比起 Synergy 真的要强大很多，上面列出的 Synergy 的问题我一天体验下来基本都能解决，真的是十分完美了。</p>

<p>不过要说缺点的话也是有的，一个是相对来说比较贵，不过虽然 ShareMouse 的授权是按年卖的，但是我看官网说明是授权到期仍可使用，但是发布新版本之类的维护就享受不到了。另外 ShareMouse 除了默认的 BroadCast 方式连接各台电脑之外只支持通过具体的 ip 和 port 进行连接，这对于部分 ip 通过 dhcp 获取的网络环境的用户来说就不太方便了。</p>

<p>ShareMouse 和 Synergy 更多的评测可以参考这篇文章：<a href="http://blog.shrp.me/Multi-Computer-Mouse-and-Keyboard-sharing.html" target="_blank">多机共享键鼠软件横向测评</a>，这篇文章评测了多款键鼠共享软件，包括微软自家出的针对 Windows 机器间的 Mouse without Borders，如果全部是 Windows 机器的话，用这个会更适合。</p>

<p>至于 ShareMouse 的安装和配置也十分简单，一般就是直接安装好安装包之后，同网段内的电脑启动服务后即可自动连接上，连接不上的话可以在 Settings &gt; Clients 里手动添加。其他的配置基本看看描述也就大概知道是干嘛的了，另外值得一提的是在 mac 的客户端里已经可以配置按键映射了，这个也算是把之前的一个短板给补上了。</p>
]]></content>
        </item>
        
        <item>
            <title>laravel5.6 &#43; vue2 开发单页应用坑点记录</title>
            <link>https://qxzzf.com/posts/laravel5.6-&#43;-vue2-%E5%BC%80%E5%8F%91%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8%E5%9D%91%E7%82%B9%E8%AE%B0%E5%BD%95/</link>
            <pubDate>Sun, 24 Jun 2018 12:13:10 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/laravel5.6-&#43;-vue2-%E5%BC%80%E5%8F%91%E5%8D%95%E9%A1%B5%E5%BA%94%E7%94%A8%E5%9D%91%E7%82%B9%E8%AE%B0%E5%BD%95/</guid>
            <description>node-sass 在 windows 上的编译问题 node-sass 在 windows 上遇到的问题蛮多，如果顺利的话可以通过 npm rebuild node-sass --force 解决，但是重新编译的过程中可能会报 python executable file not found 类似的问题，然后提示通过设置 python 环境变量解决。但奇怪的是报错里面写的 python 可执行文件路径命名是正确的，本来准备放弃在 windows 上用 npm 准备直接在 docker 里操作了，不过搜索出来一个解决方案结果成功了。
通过管理员权限打开 PowerShell 然后执行以下命令之后重新编译 node-sass 即可：
npm --add-python-to-path=&#39;true&#39; --debug install --global windows-build-tools  不一定适用于所有人，参考链接：
Can&amp;rsquo;t find Python executable &amp;ldquo;python&amp;rdquo; after installing #56
修改 vue 的组件文件后 BrowserSync 不会自动刷新 我目前在 webpack.mix.js 文件中按照查到的资料添加了如下部分，但是依旧不行：
mix.webpackConfig({ devServer: { watchOptions: { poll: true } } });  改成用 npm run watch-poll 也不行，而且如果是 win10 上的话，这个模式会不停地弹 toast。</description>
            <content type="html"><![CDATA[

<h3 id="node-sass-在-windows-上的编译问题">node-sass 在 windows 上的编译问题</h3>

<p>node-sass 在 windows 上遇到的问题蛮多，如果顺利的话可以通过 <code>npm rebuild node-sass --force</code> 解决，但是重新编译的过程中可能会报 <code>python executable file not found</code> 类似的问题，然后提示通过设置 <code>python</code> 环境变量解决。但奇怪的是报错里面写的 python 可执行文件路径命名是正确的，本来准备放弃在 windows 上用 npm 准备直接在 docker 里操作了，不过搜索出来一个解决方案结果成功了。</p>

<p>通过管理员权限打开 PowerShell 然后执行以下命令之后重新编译 node-sass 即可：</p>

<pre><code class="language-shell">npm --add-python-to-path='true' --debug install --global windows-build-tools
</code></pre>

<p>不一定适用于所有人，参考链接：</p>

<p><a href="https://github.com/felixrieseberg/windows-build-tools/issues/56" target="_blank">Can&rsquo;t find Python executable &ldquo;python&rdquo; after installing #56</a></p>

<h3 id="修改-vue-的组件文件后-browsersync-不会自动刷新">修改 vue 的组件文件后 BrowserSync 不会自动刷新</h3>

<p>我目前在 <code>webpack.mix.js</code> 文件中按照查到的资料添加了如下部分，但是依旧不行：</p>

<pre><code class="language-js">mix.webpackConfig({
    devServer: {
        watchOptions: {
            poll: true
        }
    }
});
</code></pre>

<p>改成用 <code>npm run watch-poll</code> 也不行，而且如果是 win10 上的话，这个模式会不停地弹 toast。</p>

<p>参考链接：</p>

<p><a href="https://github.com/vuejs-templates/webpack/issues/378" target="_blank">Hot Reload not responding to changes on components #378</a></p>

<p><a href="https://github.com/vuejs-templates/webpack/issues/349" target="_blank">watch is not working in windows #349</a></p>

<p><a href="https://www.jianshu.com/p/04eca89456d9" target="_blank">关于webpack在docker容器内监听文件更改</a></p>
]]></content>
        </item>
        
        <item>
            <title>vim 常用命令和语法总结</title>
            <link>https://qxzzf.com/posts/vim-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</link>
            <pubDate>Sun, 27 May 2018 20:24:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/vim-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E5%92%8C%E8%AF%AD%E6%B3%95%E6%80%BB%E7%BB%93/</guid>
            <description>文件操作 vim filename //打开filename文件 :w //保存文件 :w filename //保存至filename文件 :q //退出编辑器，如果文件已修改请使用下面的命令 :q! //退出编辑器，且不保存 :wq //退出编辑器，且保存文件  进入插入模式 i //在光标所在字符前进入插入模式 a //在光标所在字符后进入插入模式 I //在当前行的开始处添加文本(非空字符的行首) A //在当前行的末尾位置添加文本 s //删除光标所在位置字符并进入插入模式 cw //删除光标所在位置至当前单词结尾内容并进入插入模式 c$ //删除光标所在位置至当前行结尾内容并进入插入模式 cc //删除光标所在行所有内容并进入插入模式 o //在当前行下方插入新行并进入插入模式 O //在当前行上方插入新行并进入插入模式 R //替换(覆盖)当前光标位置及后面的若干文本 r //替换(覆盖)当前光标位置字符(依然在命令模式)  复制、粘贴 yy //将当前行复制到缓存区，也可以用 &amp;quot;ayy 复制，&amp;quot;a 为缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务 nyy、yny //将当前行向下n行复制到缓冲区，也可以用 &amp;quot;anyy 复制，&amp;quot;a 为缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务 yw //复制从光标开始到词尾的字符 nyw //复制从光标开始的n个单词 y^ //复制从光标到行首的内容 y$ //复制从光标到行尾的内容 p //粘贴剪切板里的内容在光标后，如果使用了前面的自定义缓冲区，建议使用 &amp;quot;ap 进行粘贴 P //粘贴剪切板里的内容在光标前，如果使用了前面的自定义缓冲区，建议使用 &amp;quot;aP 进行粘贴  删除、撤销 x //删除光标所在位置字符 nx //删除从光标开始的n个字符 dw //删除光标所在位置至当前单词结尾内容 d$ //删除光标所在位置至当前行结尾内容 dd //删除当前行，删除内容会进入 vim 剪贴板 dnd、ndd //删除n行，例：d3d 为删除3行 u //撤销上一步操作 U //撤销对当前行的所有操作  移动 h,j,k,l //左、下、上、右 空格键 //向右 Backspace //向左 Enter //移动到下一行首 - //移动到上一行首 w //正向移动到下一单词的开头 e //正向移动到当前/下一单词的结尾 b //反向移动到当前/上一单词的开头 ge //反向移动到上一单词的结尾 gg //到文档顶部 G //到文档底部 n+ //向下跳n行 n- //向上跳n行 ngg、nG //到第 n 行 f{char} //正向移动到下一个{char}所在位置 F{char} //反向移动到上一个{char}所在位置 t{char} //正向移动到下一个{char}的前一个字符上 T{char} //反向移动到上一个{char}的后一个字符上 `` //当前文件上次跳转操作的位置 `.</description>
            <content type="html"><![CDATA[

<h3 id="文件操作">文件操作</h3>

<pre><code>vim filename    //打开filename文件
:w              //保存文件
:w filename     //保存至filename文件
:q              //退出编辑器，如果文件已修改请使用下面的命令
:q!             //退出编辑器，且不保存
:wq             //退出编辑器，且保存文件
</code></pre>

<h3 id="进入插入模式">进入插入模式</h3>

<pre><code>i   //在光标所在字符前进入插入模式
a   //在光标所在字符后进入插入模式
I   //在当前行的开始处添加文本(非空字符的行首)
A   //在当前行的末尾位置添加文本
s   //删除光标所在位置字符并进入插入模式
cw  //删除光标所在位置至当前单词结尾内容并进入插入模式
c$  //删除光标所在位置至当前行结尾内容并进入插入模式
cc  //删除光标所在行所有内容并进入插入模式
o   //在当前行下方插入新行并进入插入模式
O   //在当前行上方插入新行并进入插入模式
R   //替换(覆盖)当前光标位置及后面的若干文本
r   //替换(覆盖)当前光标位置字符(依然在命令模式)
</code></pre>

<h3 id="复制-粘贴">复制、粘贴</h3>

<pre><code>yy          //将当前行复制到缓存区，也可以用 &quot;ayy 复制，&quot;a 为缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务
nyy、yny    //将当前行向下n行复制到缓冲区，也可以用 &quot;anyy 复制，&quot;a 为缓冲区，a也可以替换为a到z的任意字母，可以完成多个复制任务
yw          //复制从光标开始到词尾的字符
nyw         //复制从光标开始的n个单词
y^          //复制从光标到行首的内容
y$          //复制从光标到行尾的内容

p           //粘贴剪切板里的内容在光标后，如果使用了前面的自定义缓冲区，建议使用 &quot;ap 进行粘贴
P           //粘贴剪切板里的内容在光标前，如果使用了前面的自定义缓冲区，建议使用 &quot;aP 进行粘贴
</code></pre>

<h3 id="删除-撤销">删除、撤销</h3>

<pre><code>x           //删除光标所在位置字符
nx          //删除从光标开始的n个字符
dw          //删除光标所在位置至当前单词结尾内容
d$          //删除光标所在位置至当前行结尾内容
dd          //删除当前行，删除内容会进入 vim 剪贴板
dnd、ndd    //删除n行，例：d3d 为删除3行

u       //撤销上一步操作
U       //撤销对当前行的所有操作
</code></pre>

<h3 id="移动">移动</h3>

<pre><code>h,j,k,l     //左、下、上、右
空格键      //向右
Backspace   //向左
Enter       //移动到下一行首
-           //移动到上一行首
w           //正向移动到下一单词的开头
e           //正向移动到当前/下一单词的结尾
b           //反向移动到当前/上一单词的开头
ge          //反向移动到上一单词的结尾
gg          //到文档顶部
G           //到文档底部
n+          //向下跳n行
n-          //向上跳n行
ngg、nG     //到第 n 行

f{char}     //正向移动到下一个{char}所在位置
F{char}     //反向移动到上一个{char}所在位置
t{char}     //正向移动到下一个{char}的前一个字符上
T{char}     //反向移动到上一个{char}的后一个字符上

``  //当前文件上次跳转操作的位置
`.  //上次修改操作的地方
`^  //上次插入的地方
`[  //上次修改或复制的起始位置
`]  //上次修改或复制的结束位置
`&lt;  //上次高亮选区的起始位置
`&gt;  //上次高亮选区的结束位置
</code></pre>

<h3 id="查找和替换">查找和替换</h3>

<pre><code>/str        //向光标下搜索 str 字符串
?str        //向光标上搜索 str 字符串
n           //向下搜索前一个搜素动作
N           //向上搜索前一个搜索动作

:s/old/new          //用new替换行中首次出现的old
:s/old/new/g        //用new替换行中所有的old
:n,m s/old/new/g    //用new替换从n到m行里所有的old
:%s/old/new/g       //用new替换当前文件里所有的old
</code></pre>

<h3 id="其他">其他</h3>

<pre><code>=               //格式化，例 gg=G 格式化整个文件
:e otherfile    //编辑文件名为 otherfile 的文件，支持编辑远程文件，可通过 ftp、sftp、scp、http、rsync 等多种方式访问
:r otherfile    //将 otherfile 文件中的内容写到当前文件，和 :e 一样可以支持远程文件，详见文末参考文档
:set  nu        //显示行号
:set nonu       //取消显示行号
:set paste      //设置插入模式为 paste，这个在复制代码块时很有用，粘贴的代码会保持原有的缩进而不会被 vim 的自动缩进打乱
:set fileformat=unix    //将文件修改为unix格式，如win下面的文本文件在linux下会出现^M
:w !sudo tee %          //保存时获取sudo权限
</code></pre>

<h3 id="vim-的常规语法">vim 的常规语法</h3>

<h4 id="动词">动词</h4>

<p>动词代表了我们打算对文本进行什么样的操作。例如：</p>

<ul>
<li>d 表示删除（delete）</li>
<li>r 表示替换（replace）</li>
<li>c 表示修改（change）</li>
<li>y 表示复制（yank）</li>
<li>v 表示选取（visual select）</li>
</ul>

<h4 id="名词">名词</h4>

<p>名词代表了我们即将处理的文本。Vim 中有一个专门的术语叫做文本对象（text object），下面是一些文本对象的示例：</p>

<ul>
<li>$ 表示行尾</li>
<li>^ 表示行首</li>
<li>w 表示一个单词（word）</li>
<li>s 表示一个句子（sentence）</li>
<li>p 表示一个段落（paragraph）</li>
<li>t 表示一个 HTML 标签（tag）</li>
<li>引号或者各种括号所包含的文本称作一个文本块。</li>
</ul>

<h4 id="介词">介词</h4>

<p>介词界定了待编辑文本的范围或者位置。例如：</p>

<ul>
<li>i 表示“在&hellip;之内”（inside）</li>
<li>a 表示“环绕&hellip;”（around）</li>
<li>t 表示“到&hellip;位置前”（to）</li>
<li>f 表示“到&hellip;位置上”（forward）</li>
</ul>

<p><img src="https://upload-images.jianshu.io/upload_images/825085-48660a4ed983c4df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/700" alt="示意图" /></p>

<h4 id="组词为句">组词为句</h4>

<p>动词 + 介词 + 名词 （介词可选，默认介词为 i）</p>

<pre><code>dip //删除一个段落: delete inside paragraph
vis //选取一个句子: visual select inside sentence
ciw //修改一个单词: change inside word
caw //修改一个单词: change around word
dtx //删除文本直到字符“x”（不包括字符“x”）: delete to x
dfx //删除文本直到字符“x”（包括字符“x”）: delete forward x
</code></pre>

<p>动词 + 数词 + 名词 or 数词 + 动词 + 名词 （数词可选，默认数词为 1）</p>

<pre><code>c3w //修改三个单词：change three words
d2w //删除两个单词：delete two words

2dw //两次删除单词（等价于删除两个单词）: twice delete word
3x  //三次删除字符（等价于删除三个字符）：three times delete character
</code></pre>

<h3 id="参考文档">参考文档</h3>

<ul>
<li><a href="https://mp.weixin.qq.com/s/zZAWpZbDtSFK6EROxaBRKw" target="_blank">有关vi(vim)的常用命令</a></li>
<li><a href="https://www.jianshu.com/p/52b1b41de71f" target="_blank">Vim常用文档动作命令总结</a></li>
<li><a href="https://www.jianshu.com/p/a361ce8c97bc" target="_blank">一起来说 Vim 语</a></li>
<li><a href="https://blog.csdn.net/lovelirui/article/details/6272536" target="_blank">用Vim编辑远程文件</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>大学时期群演等经历记录</title>
            <link>https://qxzzf.com/posts/%E5%A4%A7%E5%AD%A6%E6%97%B6%E6%9C%9F%E7%BE%A4%E6%BC%94%E7%AD%89%E7%BB%8F%E5%8E%86%E8%AE%B0%E5%BD%95/</link>
            <pubDate>Sun, 27 May 2018 12:46:31 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E5%A4%A7%E5%AD%A6%E6%97%B6%E6%9C%9F%E7%BE%A4%E6%BC%94%E7%AD%89%E7%BB%8F%E5%8E%86%E8%AE%B0%E5%BD%95/</guid>
            <description>今天突然有兴致想把曾经经历过的一些不太一样的印象比较深的事情记录一下，于是就写了这篇博客。
做群演 这应该是我大学时期赚的第一桶金了，虽然就 100 块钱，不过我大学时期没有发过传单或者去快餐店打工之类的，除了通过写代码之外赚过的钱好像就 200，这是其中之一。
这是我大一时期的事情了，当时央视的一部剧《我们的法兰西岁月》来苏大本部取景，需要好像几十个群演拍两场戏。大学生是极佳的廉价劳动力，于是剧组便“就地取材”，当时不知道是不是学生会的决定，让学生会的全员去做群演。当时我本来在科协，不过在学生会的室友想周末回家，于是我便替他去了。另外因为需要一些外国人扮演法国的警察等角色，所以还找了好几个外国留学生做群演。
当天早上七点好像就要在拍摄地点也就是钟楼那边集合了，起的比平时还要早一些。到时间之后剧组就组织大家理发，基本发型都得整成符合那个时代的，然后发戏服道具啥的。不得不说群演的服装真的是稀烂，央视的剧组都如此，估计一般的电视剧剧组就更穷了。
这部剧讲的是周总理和邓小平等先贤年轻时在法国留学时期的故事。第一场戏貌似是谁组织留学生游行抗议不清楚什么事情了，剧组本来好像估计两小时拍完的，不过不清楚是学生们演技捉急还是剧组没准备充分，拍了一个上午，穿着那稀烂又硌脚的大号皮鞋来来回回半天下来简直快废了。
下午的戏在室内，各位领导人组织留学生开大会，大多数时候是坐着的，相对体力上要轻松很多，但也拍了很长时间，晚上 7 点才结束。中间休息的时候，剧组的主要演员有拍一些留念照，这些照片在豆瓣的剧照上能看到，其中有一张里我还当了背景板。几年前的时候在豆瓣上本剧的工作照里还能看到这张照片，今天再去翻的时候发现已经没有了。
这部剧在豆瓣上的评分高达 9.0，看起来质量还是不错的，不过由于对这种历史正剧兴趣不是很大，所以我到现在也都没看过这部剧。总的来说做群演真的相当累，报酬也比较低，作为一种体验来讲倒是蛮有意思的，所以到现在我的印象也挺深刻。
做机器人大赛裁判 这就是上面说的 200 中的另外 100 了，刚开始报名参加这个是想挣点零花，因为听说一天 100，总共 3 天。但实际上真正算工作的只有比赛当天，之前都是去培训。
这个比赛好像是江苏省的青少年儿童机器人编程大赛，还蛮正式的，分小学、初中、高中三个组，做裁判的学生总数也有好几十人，貌似都是男女两人一组，每几组都由一个有经验的裁判协助，主要就是负责进行计时还有判断各个项目机器人是否完成以及选手有没有违规等。
我当时被分到了小学组，同组的女生很担心小学的小孩子会不会容易受打击或者发脾气，不过好在全程还蛮顺利的，没遇到啥大问题，有个小女孩想要一次重赛的机会，协助我们的主裁判也直接就给了。
不得不说现在小孩子的学习条件是真的不一样了，这么小就能接触到各种各样的东西。虽然这个机器人基本都是用的市面上的几种型号的半成品，编程部分的话好像也是图形化的那种，但是对于小学的孩子来说也是挺不容易的了。
献血 这个也是大一时候的事了，本着有机会就要试一试的原则，而且好像献血对评奖学金有加分，最重要的是很多人都想知道自己的血型，所以我和大多数同学都参与了。因为大学生人数比较多，所以血站是直接把采血车开到学校的，直接在学校食堂进行验血和体质检查，来判断每个人是否可以献血和可以献多少血。
当时我记得我是献了 300cc 的血，大家基本都在 200-400 之间。还有比较有趣的是我们宿舍 4 个人里有 3 个都是 AB 型血，而 AB 型血的占比貌似是四种血型里最少的。</description>
            <content type="html"><![CDATA[

<p>今天突然有兴致想把曾经经历过的一些不太一样的印象比较深的事情记录一下，于是就写了这篇博客。</p>

<h3 id="做群演">做群演</h3>

<p>这应该是我大学时期赚的第一桶金了，虽然就 100 块钱，不过我大学时期没有发过传单或者去快餐店打工之类的，除了通过写代码之外赚过的钱好像就 200，这是其中之一。</p>

<p>这是我大一时期的事情了，当时央视的一部剧《我们的法兰西岁月》来苏大本部取景，需要好像几十个群演拍两场戏。大学生是极佳的廉价劳动力，于是剧组便“就地取材”，当时不知道是不是学生会的决定，让学生会的全员去做群演。当时我本来在科协，不过在学生会的室友想周末回家，于是我便替他去了。另外因为需要一些外国人扮演法国的警察等角色，所以还找了好几个外国留学生做群演。</p>

<p>当天早上七点好像就要在拍摄地点也就是钟楼那边集合了，起的比平时还要早一些。到时间之后剧组就组织大家理发，基本发型都得整成符合那个时代的，然后发戏服道具啥的。不得不说群演的服装真的是稀烂，央视的剧组都如此，估计一般的电视剧剧组就更穷了。</p>

<p>这部剧讲的是周总理和邓小平等先贤年轻时在法国留学时期的故事。第一场戏貌似是谁组织留学生游行抗议不清楚什么事情了，剧组本来好像估计两小时拍完的，不过不清楚是学生们演技捉急还是剧组没准备充分，拍了一个上午，穿着那稀烂又硌脚的大号皮鞋来来回回半天下来简直快废了。</p>

<p>下午的戏在室内，各位领导人组织留学生开大会，大多数时候是坐着的，相对体力上要轻松很多，但也拍了很长时间，晚上 7 点才结束。中间休息的时候，剧组的主要演员有拍一些留念照，这些照片在豆瓣的剧照上能看到，其中有一张里我还当了背景板。几年前的时候在豆瓣上本剧的工作照里还能看到这张照片，今天再去翻的时候发现已经没有了。</p>

<p>这部剧在豆瓣上的评分高达 9.0，看起来质量还是不错的，不过由于对这种历史正剧兴趣不是很大，所以我到现在也都没看过这部剧。总的来说做群演真的相当累，报酬也比较低，作为一种体验来讲倒是蛮有意思的，所以到现在我的印象也挺深刻。</p>

<h3 id="做机器人大赛裁判">做机器人大赛裁判</h3>

<p>这就是上面说的 200 中的另外 100 了，刚开始报名参加这个是想挣点零花，因为听说一天 100，总共 3 天。但实际上真正算工作的只有比赛当天，之前都是去培训。</p>

<p>这个比赛好像是江苏省的青少年儿童机器人编程大赛，还蛮正式的，分小学、初中、高中三个组，做裁判的学生总数也有好几十人，貌似都是男女两人一组，每几组都由一个有经验的裁判协助，主要就是负责进行计时还有判断各个项目机器人是否完成以及选手有没有违规等。</p>

<p>我当时被分到了小学组，同组的女生很担心小学的小孩子会不会容易受打击或者发脾气，不过好在全程还蛮顺利的，没遇到啥大问题，有个小女孩想要一次重赛的机会，协助我们的主裁判也直接就给了。</p>

<p>不得不说现在小孩子的学习条件是真的不一样了，这么小就能接触到各种各样的东西。虽然这个机器人基本都是用的市面上的几种型号的半成品，编程部分的话好像也是图形化的那种，但是对于小学的孩子来说也是挺不容易的了。</p>

<h3 id="献血">献血</h3>

<p>这个也是大一时候的事了，本着有机会就要试一试的原则，而且好像献血对评奖学金有加分，最重要的是很多人都想知道自己的血型，所以我和大多数同学都参与了。因为大学生人数比较多，所以血站是直接把采血车开到学校的，直接在学校食堂进行验血和体质检查，来判断每个人是否可以献血和可以献多少血。</p>

<p>当时我记得我是献了 300cc 的血，大家基本都在 200-400 之间。还有比较有趣的是我们宿舍 4 个人里有 3 个都是 AB 型血，而 AB 型血的占比貌似是四种血型里最少的。</p>
]]></content>
        </item>
        
        <item>
            <title>Ubuntu 添加 swap 分区</title>
            <link>https://qxzzf.com/posts/ubuntu-%E6%B7%BB%E5%8A%A0-swap-%E5%88%86%E5%8C%BA/</link>
            <pubDate>Mon, 14 May 2018 11:19:33 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/ubuntu-%E6%B7%BB%E5%8A%A0-swap-%E5%88%86%E5%8C%BA/</guid>
            <description>前段时间上车了腾讯云 360 买三年多的学生机的活动，加上降配总共获得 6 年，然而内存降到 1G 后，跑个 mysql 时间长了内存都不够。而且腾讯云的 ubuntu 不知道什么原因 1G 内存实际只有 800+M，更加雪上加霜。
终于前两天服务器由于内存爆了而又没有开 swap 崩了，几乎死机状态，ssh 都连不上，控制台强制重启才恢复正常。为了防止再次出现这种情况，我就给服务器加了个 swap。
参考文档：https://askubuntu.com/questions/33697/how-do-i-add-a-swap-partition-after-system-installation/796997#796997
具体步骤和命令如下：
# 创建一个空文件，具体大小的话对于小内存机器建议为内存的两倍 (例子中 1K * 4M = 4 GiB). sudo mkdir -v /var/cache/swap cd /var/cache/swap sudo dd if=/dev/zero of=swapfile bs=1K count=4M sudo chmod 600 swapfile # 将新建的文件转换为 swap 文件. sudo mkswap swapfile # 开启 swap. sudo swapon swapfile # 通过 swapon 或者 top 命令进行验证: swapon -s # 或者 top -bn1 | grep -i swap # 会显示类似信息: KiB Swap: 4194300 total, 4194300 free # 禁用 swap 时可以使用 sudo swapoff swapfile.</description>
            <content type="html"><![CDATA[<p>前段时间上车了腾讯云 360 买三年多的学生机的活动，加上降配总共获得 6 年，然而内存降到 1G 后，跑个 mysql 时间长了内存都不够。而且腾讯云的 ubuntu 不知道什么原因 1G 内存实际只有 800+M，更加雪上加霜。</p>

<p>终于前两天服务器由于内存爆了而又没有开 swap 崩了，几乎死机状态，ssh 都连不上，控制台强制重启才恢复正常。为了防止再次出现这种情况，我就给服务器加了个 swap。</p>

<p>参考文档：<a href="https://askubuntu.com/questions/33697/how-do-i-add-a-swap-partition-after-system-installation/796997#796997" target="_blank">https://askubuntu.com/questions/33697/how-do-i-add-a-swap-partition-after-system-installation/796997#796997</a></p>

<p>具体步骤和命令如下：</p>

<pre><code class="language-shell"># 创建一个空文件，具体大小的话对于小内存机器建议为内存的两倍 (例子中 1K * 4M = 4 GiB).
sudo mkdir -v /var/cache/swap
cd /var/cache/swap
sudo dd if=/dev/zero of=swapfile bs=1K count=4M
sudo chmod 600 swapfile

# 将新建的文件转换为 swap 文件.
sudo mkswap swapfile

# 开启 swap.

sudo swapon swapfile

# 通过 swapon 或者 top 命令进行验证:
swapon -s
# 或者
top -bn1 | grep -i swap
# 会显示类似信息: KiB Swap:  4194300 total,  4194300 free

# 禁用 swap 时可以使用 sudo swapoff swapfile.

# 将该分区设置成开机加载.
echo &quot;/var/cache/swap/swapfile none swap sw 0 0&quot; | sudo tee -a /etc/fstab

# 测试开机加载:
sudo swapoff swapfile
sudo swapon -va
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>利用 Docker 搭建 PHP 开发及生产环境</title>
            <link>https://qxzzf.com/posts/%E5%88%A9%E7%94%A8-docker-%E6%90%AD%E5%BB%BA-php-%E5%BC%80%E5%8F%91%E5%8F%8A%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83/</link>
            <pubDate>Sat, 17 Mar 2018 17:56:32 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E5%88%A9%E7%94%A8-docker-%E6%90%AD%E5%BB%BA-php-%E5%BC%80%E5%8F%91%E5%8F%8A%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83/</guid>
            <description>Docker 现在是越来越火了，它的出现让很多开发和运维的痛点得到了解决：
 大多数公司配备的开发机是 Windows，在 Windows 上配置开发和本地测试环境是非常无解的，常规虚拟机使用十分麻烦并且无法协作，Win10 的 WSL 目前看来只能当作玩具。 多台开发机或者多人的开发团队的开发环境的同步问题，Vagrant 在一定程度上可以解决开发环境的问题，不过在团队协作方面还是 Docker 这种轻量级的方案更灵活快速，更重要的是 Vagrant 目前来看并不适合用于生产环境，而 Docker 则都能 hold 住，真的是一次配置，到处运行。 开发完成项目进行上线后出现因环境不同而产生的问题，此时可能运维会背锅，不过其实在传统的模式下要想保障开发生产环境的一致需要开发和运维的密切配合，但由于处在两个体系下，往往难以避免地会出现问题，所以之前 DevOps 也很火。而有了 Docker 之后这个问题就很容易解决了，开发交付的时候给出的就是容器，运维只要负责把容器上线就行了，不用关心具体环境。 安装各种应用时配置十分繁琐，编译安装时可能还需要解决依赖问题，第一次安装一个大型应用可能整个一套搞下来一天就过去了，甚至对主机造成一些不可逆的影响。现在大多数常见应用都提供官方 Docker 镜像了，只要 pull 下来改改环境变量，立马就能跑起来，节省了大量时间，也不用担心搞坏主机。  每个人对环境的需求可能都或多或少有些区别，如果简单使用的话推荐 laradock，可以说是 Docker 化的 homestead，对 Docker 有一定了解之后就可以根据自己的需求自己构建一套环境。
最后开源我自己常用的一套开发环境，后面准备把搭建博客的环境也改成用这套环境来搭建：https://github.com/takashiki/docker-env。
参考文档：
徒手用 Docker 构建自己的 PHP 开发环境</description>
            <content type="html"><![CDATA[<p>Docker 现在是越来越火了，它的出现让很多开发和运维的痛点得到了解决：</p>

<ul>
<li>大多数公司配备的开发机是 Windows，在 Windows 上配置开发和本地测试环境是非常无解的，常规虚拟机使用十分麻烦并且无法协作，Win10 的 WSL 目前看来只能当作玩具。</li>
<li>多台开发机或者多人的开发团队的开发环境的同步问题，Vagrant 在一定程度上可以解决开发环境的问题，不过在团队协作方面还是 Docker 这种轻量级的方案更灵活快速，更重要的是 Vagrant 目前来看并不适合用于生产环境，而 Docker 则都能 hold 住，真的是一次配置，到处运行。</li>
<li>开发完成项目进行上线后出现因环境不同而产生的问题，此时可能运维会背锅，不过其实在传统的模式下要想保障开发生产环境的一致需要开发和运维的密切配合，但由于处在两个体系下，往往难以避免地会出现问题，所以之前 DevOps 也很火。而有了 Docker 之后这个问题就很容易解决了，开发交付的时候给出的就是容器，运维只要负责把容器上线就行了，不用关心具体环境。</li>
<li>安装各种应用时配置十分繁琐，编译安装时可能还需要解决依赖问题，第一次安装一个大型应用可能整个一套搞下来一天就过去了，甚至对主机造成一些不可逆的影响。现在大多数常见应用都提供官方 Docker 镜像了，只要 pull 下来改改环境变量，立马就能跑起来，节省了大量时间，也不用担心搞坏主机。</li>
</ul>

<p>每个人对环境的需求可能都或多或少有些区别，如果简单使用的话推荐 <a href="https://github.com/laradock/laradock" target="_blank">laradock</a>，可以说是 Docker 化的 homestead，对 Docker 有一定了解之后就可以根据自己的需求自己构建一套环境。</p>

<p>最后开源我自己常用的一套开发环境，后面准备把搭建博客的环境也改成用这套环境来搭建：<a href="https://github.com/takashiki/docker-env" target="_blank">https://github.com/takashiki/docker-env</a>。</p>

<p>参考文档：</p>

<p><a href="https://segmentfault.com/a/1190000013303332" target="_blank">徒手用 Docker 构建自己的 PHP 开发环境</a></p>
]]></content>
        </item>
        
        <item>
            <title>CentOS 6.x 安装 Docker、Docker Compose 以及切换镜像源记录</title>
            <link>https://qxzzf.com/posts/centos-6.x-%E5%AE%89%E8%A3%85-dockerdocker-compose-%E4%BB%A5%E5%8F%8A%E5%88%87%E6%8D%A2%E9%95%9C%E5%83%8F%E6%BA%90%E8%AE%B0%E5%BD%95/</link>
            <pubDate>Wed, 28 Feb 2018 18:56:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/centos-6.x-%E5%AE%89%E8%A3%85-dockerdocker-compose-%E4%BB%A5%E5%8F%8A%E5%88%87%E6%8D%A2%E9%95%9C%E5%83%8F%E6%BA%90%E8%AE%B0%E5%BD%95/</guid>
            <description>首先，这是个大坑，不到万不得已千万不要轻易尝试！！！
由于工作需要，我不得不在 CentOS 6.x 上安装 Docker，而且由于需要一次性部署多个关联服务，不用 docker-compose 的话又会相当麻烦，于是便开始了这段折腾之路。
我这里总结一下主要步骤和注意事项，详细步骤包括具体命令请参见文末的参考链接。
 首先 CentOS 6.x 用的报管理器是 yum，yum 只支持 python 2.6 及以下的版本，而 docker compose 只支持 python 2.7 及以上的版本，所以要编译安装 python 2.7，然后把 yum 的几个脚本里的 python 路径改成 2.6 版本的路径，默认的 python 改成 2.7 版本 然后根据参考链接里的步骤通过 epel 安装 1.7.1 版本的 docker，这个版本的 docker 是支持 CentOS 6.x 的最后一个版本了。貌似没有非常靠谱的方案在 CentOS 6.x 的机器上安装更高版本的 docker 了，因为新版本 docker 需要 3.x 的内核，以及其他很多高版本的依赖包，可能会出现问题，不过网上有成功升级内核至 3.10 并且升级 Docker 至 1.9.1 版本的记录，具体可查看文末参考链接 之后通过 pip 安装 docker-compose，需要注意支持 docker 1.7.1 的最后一个版本的 docker-compose 是 1.</description>
            <content type="html"><![CDATA[<p><strong>首先，这是个大坑，不到万不得已千万不要轻易尝试！！！</strong></p>

<p>由于工作需要，我不得不在 CentOS 6.x 上安装 Docker，而且由于需要一次性部署多个关联服务，不用 docker-compose 的话又会相当麻烦，于是便开始了这段折腾之路。</p>

<p>我这里总结一下主要步骤和注意事项，详细步骤包括具体命令请参见文末的参考链接。</p>

<ul>
<li>首先 CentOS 6.x 用的报管理器是 yum，yum 只支持 python 2.6 及以下的版本，而 docker compose 只支持 python 2.7 及以上的版本，所以要编译安装 python 2.7，然后把 yum 的几个脚本里的 python 路径改成 2.6 版本的路径，默认的 python 改成 2.7 版本</li>
<li>然后根据参考链接里的步骤通过 epel 安装 1.7.1 版本的 docker，这个版本的 docker 是支持 CentOS 6.x 的最后一个版本了。貌似没有非常靠谱的方案在 CentOS 6.x 的机器上安装更高版本的 docker 了，因为新版本 docker 需要 3.x 的内核，以及其他很多高版本的依赖包，可能会出现问题，不过网上有成功升级内核至 3.10 并且升级 Docker 至 1.9.1 版本的记录，具体可查看文末参考链接</li>
<li>之后通过 pip 安装 docker-compose，需要注意支持 docker 1.7.1 的最后一个版本的 docker-compose 是 1.5.2 版本，所以安装的时候要指定安装这个版本</li>
<li>1.5.2 版本的 docker-compose 只能支持 version 1 的 docker-compose.yml 配置文件，使用新版本的配置文件时需要自己手工改成 v1 的格式</li>
<li>daocloud 的镜像加速器亲测不支持 1.7 版本的 docker，中科大的镜像貌似也有点问题，阿里云的镜像可以完美支持，需要注意 1.7 版本的 docker 修改 registry 需要修改 <code>/etc/sysconfig/docker</code> 中的启动参数，详见参考链接</li>
</ul>

<p>参考链接：</p>

<p><a href="http://blog.csdn.net/kinginblue/article/details/73527832" target="_blank">CentOS6.x 安装 Docker 和 Docker Compose</a>
<a href="http://blog.csdn.net/MR_REN019235/article/details/78416802" target="_blank">centos 6.5 &amp; docker1.7.1 &amp; docker的阿里云代理镜像设置</a>
<a href="http://blog.csdn.net/renhanchi/article/details/76050421" target="_blank">CentOs 6.x升级内核到3.10, 安装并升级docker1.9.1</a></p>
]]></content>
        </item>
        
        <item>
            <title>Windows 10 开启 Bash On Ubuntu记录</title>
            <link>https://qxzzf.com/posts/windows-10-%E5%BC%80%E5%90%AF-bash-on-ubuntu%E8%AE%B0%E5%BD%95/</link>
            <pubDate>Sun, 04 Feb 2018 21:19:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/windows-10-%E5%BC%80%E5%90%AF-bash-on-ubuntu%E8%AE%B0%E5%BD%95/</guid>
            <description>2018.02.04 更新：
这周折腾了半天准备用 WSL (Windows Subsystem for Linux) 搭个开发环境，结果发现这个玩意儿虽然出来一段时间了，但是坑还是真的多。
首先是没有支持 TCP_INFO socket option，参考 php-fpm启动提示Protocol not available (92)该怎么解决呢？，这导致了 php-fpm 监听端口时，日志里会一直打印错误，但是能用，很神奇，而如果 listen 的是 socket 的话，则功能不正常，一直超时。
我发现的还有，如果 mysql 的 data 目录不是放在 WSL 自身硬盘路径内，而是放到 D 盘或者其他外部目录的话，虽然能新建数据库，但是建表有问题。
其他比如不支持升级发行版之类的必然的问题就不多说了，还有就是新版的 Win10 WSL 的安装路径是 C:\Users\&amp;lt;username&amp;gt;\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState。
所以从亲身的惨痛经历来看，建议还是不要妄想在 Windows 上用虚拟化以外的方案搭建开发环境。
===
步骤记录如下：
1.设置 -&amp;gt; 更新和安全 -&amp;gt; 针对开发人员，选择开启开发人员模式，这一步可能需要重启。
2.控制面板 -&amp;gt; 程序 -&amp;gt; 启用或关闭windows功能，选中 “适用于 Linux 的 Windows 子系统（Beta）”，然后重启。
3.打开 cmd 或者 PowerShell，点击左上角进入设置，在 ‘选项’ 面板中将 “使用旧版控制台” 取消选中，然后重启命令行。
4.在命令行中键入 ‘bash’，然后系统就会让你下载系统文件，选择 ‘y’ 之后就等待下载安装完成吧。
几个注意点：</description>
            <content type="html"><![CDATA[<p><strong>2018.02.04 更新</strong>：</p>

<p>这周折腾了半天准备用 WSL (Windows Subsystem for Linux) 搭个开发环境，结果发现这个玩意儿虽然出来一段时间了，但是坑还是真的多。</p>

<p>首先是没有支持 <code>TCP_INFO socket option</code>，参考 <a href="https://www.zhihu.com/question/62495462" target="_blank">php-fpm启动提示Protocol not available (92)该怎么解决呢？</a>，这导致了 php-fpm 监听端口时，日志里会一直打印错误，但是能用，很神奇，而如果 listen 的是 socket 的话，则功能不正常，一直超时。</p>

<p>我发现的还有，如果 mysql 的 data 目录不是放在 WSL 自身硬盘路径内，而是放到 D 盘或者其他外部目录的话，虽然能新建数据库，但是建表有问题。</p>

<p>其他比如不支持升级发行版之类的必然的问题就不多说了，还有就是新版的 Win10 WSL 的安装路径是 <code>C:\Users\&lt;username&gt;\AppData\Local\Packages\CanonicalGroupLimited.UbuntuonWindows_79rhkp1fndgsc\LocalState</code>。</p>

<p>所以从亲身的惨痛经历来看，建议还是不要妄想在 Windows 上用虚拟化以外的方案搭建开发环境。</p>

<p>===</p>

<p>步骤记录如下：</p>

<p>1.设置 -&gt; 更新和安全 -&gt; 针对开发人员，选择开启开发人员模式，这一步可能需要重启。</p>

<p>2.控制面板 -&gt; 程序 -&gt; 启用或关闭windows功能，选中 “适用于 Linux 的 Windows 子系统（Beta）”，然后重启。</p>

<p>3.打开 cmd 或者 PowerShell，点击左上角进入设置，在 ‘选项’ 面板中将 “使用旧版控制台” 取消选中，然后重启命令行。</p>

<p>4.在命令行中键入 ‘bash’，然后系统就会让你下载系统文件，选择 ‘y’ 之后就等待下载安装完成吧。</p>

<p>几个注意点：</p>

<p>1.不翻墙的话下载速度很慢，反正电信不翻墙是几乎下载不了的。
2.这个子系统的根目录默认在 <code>%userprofile%\AppData\Local\Lxss\rootfs</code>，这个略坑。</p>

<p>使用<code>xshell</code>或<code>putty</code>等ssh终端连接本地<code>bash</code>方式：</p>

<p>1.卸载并重新安装 openssh-server:</p>

<pre><code class="language-shell">sudo apt-get remove --purge openssh-server
sudo apt-get install openssh-server
</code></pre>

<p>2.在<code>/etc/ssh/sshd_config</code>中添加或将原有的配置项的值修改为如下：</p>

<pre><code>ListenAddress 0.0.0.0
UsePrivilegeSeparation no
PasswordAuthentication yes
</code></pre>

<p>3.运行<code>service ssh --full-restart</code>即可</p>
]]></content>
        </item>
        
        <item>
            <title>使用 LaraDock 搭建 Laravel 的 Docker 开发环境</title>
            <link>https://qxzzf.com/posts/%E4%BD%BF%E7%94%A8-laradock-%E6%90%AD%E5%BB%BA-laravel-%E7%9A%84-docker-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link>
            <pubDate>Sat, 03 Feb 2018 16:24:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E4%BD%BF%E7%94%A8-laradock-%E6%90%AD%E5%BB%BA-laravel-%E7%9A%84-docker-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid>
            <description>参考链接：基于 LaraDock 在 Docker 中快速构建 Laravel 应用系列教程 —— 搭建开发环境
基本参考上文的步骤即可，不过有如下注意点：
 LaraDock 现在只支持原生 Docker， Docker Toolbox 这种基于虚拟机的方案需要使用比较老的版本 如果是在 Windows 上使用的话，LaraDock 的 .env 文件 中需要配置 COMPOSE_PATH_SEPARATOR=; 和COMPOSE_FILE=docker-compose.yml;docker-compose.dev.yml，因为这个分隔符在 Windows 中不支持使用 : 千万不要用 DaoCloud 的加速器，其他加速器貌似也不行，用了这个之后 docker pull laradock/workspace 一直失败，这个包会循环下载直到提示 no space left on device，一开始我以为是 Windows Docker 或者配置的问题，顺着这个方向去查解决方案，查了好久都没头绪，后来把加速器去掉果然好了 设置 proxy 时，格式为 http://host:port，如果 host 是在本机上的的话，需要写成 DockerNAT 那个网卡的 IP 地址，比如 10.0.75.1，另外这个 proxy 的配置也会被 docker 写入到容器中，具体见官网文档  </description>
            <content type="html"><![CDATA[<p>参考链接：<a href="http://laravelacademy.org/post/6569.html" target="_blank">基于 LaraDock 在 Docker 中快速构建 Laravel 应用系列教程 —— 搭建开发环境</a></p>

<p>基本参考上文的步骤即可，不过有如下注意点：</p>

<ul>
<li>LaraDock 现在只支持原生 Docker， Docker Toolbox 这种基于虚拟机的方案需要使用比较老的版本</li>
<li>如果是在 Windows 上使用的话，LaraDock 的 .env 文件 中需要配置 <code>COMPOSE_PATH_SEPARATOR=;</code> 和<code>COMPOSE_FILE=docker-compose.yml;docker-compose.dev.yml</code>，因为这个分隔符在 Windows 中不支持使用 <code>:</code></li>
<li>千万不要用 DaoCloud 的加速器，其他加速器貌似也不行，用了这个之后 <code>docker pull laradock/workspace</code> 一直失败，这个包会循环下载直到提示 <code>no space left on device</code>，一开始我以为是 Windows Docker 或者配置的问题，顺着这个方向去查解决方案，查了好久都没头绪，后来把加速器去掉果然好了</li>
<li>设置 proxy 时，格式为 <code>http://host:port</code>，如果 host 是在本机上的的话，需要写成 DockerNAT 那个网卡的 IP 地址，比如 <code>10.0.75.1</code>，另外这个 proxy 的配置也会被 docker 写入到容器中，具体见官网文档</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>腾讯云 COS webpack 插件开源</title>
            <link>https://qxzzf.com/posts/%E8%85%BE%E8%AE%AF%E4%BA%91-cos-webpack-%E6%8F%92%E4%BB%B6%E5%BC%80%E6%BA%90/</link>
            <pubDate>Sun, 14 Jan 2018 22:13:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E8%85%BE%E8%AE%AF%E4%BA%91-cos-webpack-%E6%8F%92%E4%BB%B6%E5%BC%80%E6%BA%90/</guid>
            <description>今天想把一个老的 Yii2 项目改成比较时髦的前后端分离的开发模式，于是试用了 webpack，感觉还不错。
项目线上我是想直接把编译后的文件传到带 cdn 的对象存储上，因为服务器用的是腾讯云的 cvm，所以对象存储就顺便选择了 cos。
Github 上搜了下没有现成的 webpack 插件，不过有几个现成的七牛的，比较了一下发现 https://github.com/lyfeyaj/qn-webpack 这个项目的代码最简洁清晰，于是就在这个项目的基础上自己改出了一个 cos 的 webpack 插件并开源了出来：https://github.com/takashiki/cos-webpack。
npm 发布包的步骤参考：手把手教你用npm发布一个包。
下面是该插件的安装和使用方式：
前提 需要 Node 版本在 v4.0 以上，COS V4 以上（APPID 为 125 开头）
安装 npm i -D cos-webpack  使用方法 支持的配置项:
 secretId COS SecretId secretKey COS SecretKey bucket COS 存储对象名称，格式为对象名称加应用 ID，如：bucket-1250000000 region COS 存储地域，参见官方文档 path 存储路径， 默认为 [hash]，也可以指定 hash 长度，如: [hash:8] exclude 可选，排除特定文件，正则表达式，如: /index\.html$/ include 可选，指定要上传的文件，正则表达式，如: /app\.js$/ batch 可选，批量上传文件并发数，默认 20  注: Webpack 的 output.</description>
            <content type="html"><![CDATA[

<p>今天想把一个老的 Yii2 项目改成比较时髦的前后端分离的开发模式，于是试用了 webpack，感觉还不错。</p>

<p>项目线上我是想直接把编译后的文件传到带 cdn 的对象存储上，因为服务器用的是腾讯云的 cvm，所以对象存储就顺便选择了 cos。</p>

<p>Github 上搜了下没有现成的 webpack 插件，不过有几个现成的七牛的，比较了一下发现 <a href="https://github.com/lyfeyaj/qn-webpack" target="_blank">https://github.com/lyfeyaj/qn-webpack</a> 这个项目的代码最简洁清晰，于是就在这个项目的基础上自己改出了一个 cos 的 webpack 插件并开源了出来：<a href="https://github.com/takashiki/cos-webpack" target="_blank">https://github.com/takashiki/cos-webpack</a>。</p>

<p>npm 发布包的步骤参考：<a href="https://www.jianshu.com/p/36d3e0e00157" target="_blank">手把手教你用npm发布一个包</a>。</p>

<p>下面是该插件的安装和使用方式：</p>

<h2 id="前提">前提</h2>

<p>需要 Node 版本在 v4.0 以上，COS V4 以上（APPID 为 125 开头）</p>

<h2 id="安装">安装</h2>

<pre><code class="language-sh">npm i -D cos-webpack
</code></pre>

<h2 id="使用方法">使用方法</h2>

<p>支持的配置项:</p>

<ul>
<li><code>secretId</code> COS SecretId</li>
<li><code>secretKey</code> COS SecretKey</li>
<li><code>bucket</code> COS 存储对象名称，格式为对象名称加应用 ID，如：<code>bucket-1250000000</code></li>
<li><code>region</code> COS 存储地域，参见<a href="https://cloud.tencent.com/document/product/436/6224" target="_blank">官方文档</a></li>
<li><code>path</code> 存储路径， 默认为 <code>[hash]</code>，也可以指定 hash 长度，如: <code>[hash:8]</code></li>
<li><code>exclude</code> 可选，排除特定文件，正则表达式，如: <code>/index\.html$/</code></li>
<li><code>include</code> 可选，指定要上传的文件，正则表达式，如: <code>/app\.js$/</code></li>
<li><code>batch</code> 可选，批量上传文件并发数，默认 20</li>
</ul>

<p><strong><em>注: Webpack 的 <code>output.publicPath</code> 要指向 COS（或自定义的）域名地址</em></strong></p>

<pre><code class="language-js">// 引入
const CosPlugin = require('cos-webpack');

// 配置 Plugin
const cosPlugin = new CosPlugin({
  secretId: 'my-secret-id',
  secretKey: 'my-secret-key',
  bucket: 'my-125000000',
  region: 'ap-chengdu',
  path: '[hash]/'
});

// Webpack 的配置
module.exports = {
 output: {
    // 此处为 COS 访问域名(bucket-1250000000.file.myqcloud.com) 加上 path([hash]/)
    publicPath: &quot;http://bucket-1250000000.file.myqcloud.com/[hash]/&quot;
    // ...
 },
 plugins: [
   cosPlugin
   // ...
 ]
 // ...
}
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Ajax 跨域解决方案</title>
            <link>https://qxzzf.com/posts/ajax-%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
            <pubDate>Thu, 11 Jan 2018 18:56:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/ajax-%E8%B7%A8%E5%9F%9F%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
            <description> document.domain 该方案只能适用于跨子域的情况，无法跨不同二级域名。
window.name 利用同一窗口打开的所有 frame 共享同一个 window.name 来传递数据，只能传递字符串。
jsonp 比较常见的一种跨域解决方案，利用 &amp;lt;script&amp;gt; 标签可以跨域的特性实现 ajax 请求跨域。
服务端设置 CORS 头 这种方式多见于上传文件的服务器，比如图床、云存储等。
代理请求 一般前端开发人员使用 node 进行代理比较方便，也可以用 php 等，也可以直接用 nginx 做反代。
postMessage 这个 html5 中新增的 api 非常强大，不仅可以用作跨域，最重要的是还能实现跨窗口消息传递，现在很多 h5 游戏平台都是用这个 api 来实现自己的 js sdk 来和 cp 进行对接的。
参考文档：
 ajax跨域，这应该是最全的解决方案了 Web开发之跨域与跨域资源共享 跨域资源共享 CORS 详解  </description>
            <content type="html"><![CDATA[

<h3 id="document-domain">document.domain</h3>

<p>该方案只能适用于跨子域的情况，无法跨不同二级域名。</p>

<h3 id="window-name">window.name</h3>

<p>利用同一窗口打开的所有 frame 共享同一个 window.name 来传递数据，只能传递字符串。</p>

<h3 id="jsonp">jsonp</h3>

<p>比较常见的一种跨域解决方案，利用 &lt;script&gt; 标签可以跨域的特性实现 ajax 请求跨域。</p>

<h3 id="服务端设置-cors-头">服务端设置 CORS 头</h3>

<p>这种方式多见于上传文件的服务器，比如图床、云存储等。</p>

<h3 id="代理请求">代理请求</h3>

<p>一般前端开发人员使用 node 进行代理比较方便，也可以用 php 等，也可以直接用 nginx 做反代。</p>

<h3 id="postmessage">postMessage</h3>

<p>这个 html5 中新增的 api 非常强大，不仅可以用作跨域，最重要的是还能实现跨窗口消息传递，现在很多 h5 游戏平台都是用这个 api 来实现自己的 js sdk 来和 cp 进行对接的。</p>

<p>参考文档：</p>

<ul>
<li><a href="https://segmentfault.com/a/1190000012469713" target="_blank">ajax跨域，这应该是最全的解决方案了</a></li>
<li><a href="http://www.devsai.com/2016/11/24/talk-CORS/" target="_blank">Web开发之跨域与跨域资源共享</a></li>
<li><a href="www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank">跨域资源共享 CORS 详解</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>SSH 客户端中 zsh/vim 主题显示乱码的解决办法</title>
            <link>https://qxzzf.com/posts/ssh-%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%AD-zshvim-%E4%B8%BB%E9%A2%98%E6%98%BE%E7%A4%BA%E4%B9%B1%E7%A0%81%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link>
            <pubDate>Thu, 11 Jan 2018 13:46:26 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/ssh-%E5%AE%A2%E6%88%B7%E7%AB%AF%E4%B8%AD-zshvim-%E4%B8%BB%E9%A2%98%E6%98%BE%E7%A4%BA%E4%B9%B1%E7%A0%81%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid>
            <description>zsh 和 vim 之类的工具有很多比较漂亮的主题，但是这些里面用到了一些比较特殊的字体，需要字体支持 powerline 才行，比如 zsh 的 agnoster，windows 上用 xshell 或者 mobaxterm 连接时均有不同程度的乱码。
解决方案就是安装支持 powerline 的字体，字体下载可以到 https://github.com/powerline/fonts。
参考链接：
http://pdalinis.blogspot.tw/2013/08/putty-powerline.html
https://morecomputerstuff.wordpress.com/2017/04/30/oh-my-zsh-agnoster-theme-windows-10-client/</description>
            <content type="html"><![CDATA[<p>zsh 和 vim 之类的工具有很多比较漂亮的主题，但是这些里面用到了一些比较特殊的字体，需要字体支持 powerline 才行，比如 zsh 的 agnoster，windows 上用 xshell 或者 mobaxterm 连接时均有不同程度的乱码。</p>

<p>解决方案就是安装支持 powerline 的字体，字体下载可以到 <a href="https://github.com/powerline/fonts" target="_blank">https://github.com/powerline/fonts</a>。</p>

<p>参考链接：</p>

<p><a href="http://pdalinis.blogspot.tw/2013/08/putty-powerline.html" target="_blank">http://pdalinis.blogspot.tw/2013/08/putty-powerline.html</a></p>

<p><a href="https://morecomputerstuff.wordpress.com/2017/04/30/oh-my-zsh-agnoster-theme-windows-10-client/" target="_blank">https://morecomputerstuff.wordpress.com/2017/04/30/oh-my-zsh-agnoster-theme-windows-10-client/</a></p>
]]></content>
        </item>
        
        <item>
            <title>使用 Docker 部署 Upsource </title>
            <link>https://qxzzf.com/posts/%E4%BD%BF%E7%94%A8-docker-%E9%83%A8%E7%BD%B2-upsource-/</link>
            <pubDate>Thu, 28 Dec 2017 16:03:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E4%BD%BF%E7%94%A8-docker-%E9%83%A8%E7%BD%B2-upsource-/</guid>
            <description>Upsource 是 Jetbrains 推出的一款用于 Code Review 的基于 Web 的系统，功能十分强大，最重要的是和 IDE 全家桶无缝集成，可以直接在 IDE 里进行 Code Review。
在选择 Upsource 之前我也调研了 Gerrit 和 Phabricator，觉得不太适合当前的团队。这两个工具更适用于强制 Code Review 并且把其作为 CI 的一环的团队使用，这自然是有好处，不过稍微有些繁琐。这两者的具体区别可以参考 https://stackoverflow.com/questions/10545480/gerrit-phabricator-review。
使用 Docker 部署 使用 Docker 部署 Upsource 可以参考官方的文档 https://www.jetbrains.com/upsource/download/#section=docker。
有几个注意点：
 docker pull 的时候必须指定镜像版本号（也就是 .，见https://hub.docker.com/r/jetbrains/upsource/tags/），不然找不到 在跑容器之前，记得把映射的那几个目录按照教程上 chown 一下 配置 base url 时可以先按照能检测通过的配，后面可以通过修改 conf/internal/bundle.properties 来修改 如果提示某个目录不为空，无法下一步的话，可以进目录看看有没有隐藏文件，如果有就全删了  不出意外的话应该就能正常跑起来了。
使用 nginx 配置反代 由于 Upsource 使用了 websocket，所以常规的反代配置可能有问题，直接参考官方文档就 ok 了，见 https://www.jetbrains.com/help/upsource/proxy-configuration.html#NginxConfiguration。
server { listen 2222; server_name localhost; location / { proxy_set_header X-Forwarded-Host $http_host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme; proxy_http_version 1.</description>
            <content type="html"><![CDATA[

<p>Upsource 是 Jetbrains 推出的一款用于 Code Review 的基于 Web 的系统，功能十分强大，最重要的是和 IDE 全家桶无缝集成，可以直接在 IDE 里进行 Code Review。</p>

<p>在选择 Upsource 之前我也调研了 Gerrit 和 Phabricator，觉得不太适合当前的团队。这两个工具更适用于强制 Code Review 并且把其作为 CI 的一环的团队使用，这自然是有好处，不过稍微有些繁琐。这两者的具体区别可以参考 <a href="https://stackoverflow.com/questions/10545480/gerrit-phabricator-review" target="_blank">https://stackoverflow.com/questions/10545480/gerrit-phabricator-review</a>。</p>

<h3 id="使用-docker-部署">使用 Docker 部署</h3>

<p>使用 Docker 部署 Upsource 可以参考官方的文档 <a href="https://www.jetbrains.com/upsource/download/#section=docker" target="_blank">https://www.jetbrains.com/upsource/download/#section=docker</a>。</p>

<p>有几个注意点：</p>

<ul>
<li>docker pull 的时候必须指定镜像版本号（也就是 <version>.<build>，见<a href="https://hub.docker.com/r/jetbrains/upsource/tags/" target="_blank">https://hub.docker.com/r/jetbrains/upsource/tags/</a>），不然找不到</li>
<li>在跑容器之前，记得把映射的那几个目录按照教程上 chown 一下</li>
<li>配置 base url 时可以先按照能检测通过的配，后面可以通过修改 <code>conf/internal/bundle.properties</code> 来修改</li>
<li>如果提示某个目录不为空，无法下一步的话，可以进目录看看有没有隐藏文件，如果有就全删了</li>
</ul>

<p>不出意外的话应该就能正常跑起来了。</p>

<h3 id="使用-nginx-配置反代">使用 nginx 配置反代</h3>

<p>由于 Upsource 使用了 websocket，所以常规的反代配置可能有问题，直接参考官方文档就 ok 了，见 <a href="https://www.jetbrains.com/help/upsource/proxy-configuration.html#NginxConfiguration" target="_blank">https://www.jetbrains.com/help/upsource/proxy-configuration.html#NginxConfiguration</a>。</p>

<pre><code class="language-nginx">server {
         listen  2222;
         server_name  localhost;
         location  / {
            proxy_set_header X-Forwarded-Host $http_host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_http_version 1.1;

            # to proxy WebSockets in nginx
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection &quot;upgrade&quot;;
            
            proxy_pass http://upsourcemachine.domain.local:1111;
            proxy_pass_header Sec-Websocket-Extensions;
         }
      }
</code></pre>

<h3 id="与-ide-的整合">与 IDE 的整合</h3>

<p>安装 Upsource Integration 插件即可，首先 Upsource 上先连接号该项目的 Git，然后本地打开的项目右下角点击 Upsource 图标就可以进行关联。</p>

<p>参考链接</p>

<p><a href="http://blog.csdn.net/nikobelic8/article/details/54897314" target="_blank">http://blog.csdn.net/nikobelic8/article/details/54897314</a></p>
]]></content>
        </item>
        
        <item>
            <title>使用 Docker 搭建 Gitlab &#43; Jenkins &#43; SonarQube 的 PHP 持续集成环境</title>
            <link>https://qxzzf.com/posts/%E4%BD%BF%E7%94%A8-docker-%E6%90%AD%E5%BB%BA-gitlab-&#43;-jenkins-&#43;-sonarqube-%E7%9A%84-php-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E7%8E%AF%E5%A2%83/</link>
            <pubDate>Wed, 20 Dec 2017 17:19:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E4%BD%BF%E7%94%A8-docker-%E6%90%AD%E5%BB%BA-gitlab-&#43;-jenkins-&#43;-sonarqube-%E7%9A%84-php-%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E7%8E%AF%E5%A2%83/</guid>
            <description>对于开源 PHP 项目，现在比较成熟的一套持续集成方案是使用 Github + TravisCI + StyleCI + Scrutinizer + coveralls，不过这套方案如果想要用于私有项目的话就抓狂了，个个要买套餐，其中很多还不便宜。而且对于公司内使用的项目来说，内部搭建的 Gitlab 方案更为常见，对于这种情况，我们可以使用 Gitlab + Jenkins + SonarQube 来进行代替。
安装 SonarQube $ docker pull postgres $ docker run --name db -e POSTGRES_USER=sonar -e POSTGRES_PASSWORD=sonar -d postgres $ docker pull sonarqube $ docker run --name sq --link db -e SONARQUBE_JDBC_URL=jdbc:postgresql://db:5432/sonar -p 9000:9000 -d sonarqube  执行完毕上面的命令后通过浏览器进入 SonarQube，默认用户名和密码都是 admin，进去后会有一段引导，里面会让你生成一个 access token，这个后面的配置 Jenkins 时会用到。
如果没有记下来的话，可以点右上角的用户头像里面的 My Account &amp;gt; Security 标签中可以生成一个新的。
配置 Jenkins Jenkins 需要在全局的 系统设置 里面添加 SonarQube Server，填下对应的访问地址和上一步获取的 access token 即可。服务器地址填写 localhost 可能会有问题，填 ip 会比较好些。</description>
            <content type="html"><![CDATA[

<p>对于开源 PHP 项目，现在比较成熟的一套持续集成方案是使用 Github + TravisCI + StyleCI + Scrutinizer + coveralls，不过这套方案如果想要用于私有项目的话就抓狂了，个个要买套餐，其中很多还不便宜。而且对于公司内使用的项目来说，内部搭建的 Gitlab 方案更为常见，对于这种情况，我们可以使用 Gitlab + Jenkins + SonarQube 来进行代替。</p>

<h3 id="安装-sonarqube">安装 SonarQube</h3>

<pre><code class="language-shell">$ docker pull postgres

$ docker run --name db -e POSTGRES_USER=sonar -e POSTGRES_PASSWORD=sonar -d postgres

$ docker pull sonarqube

$ docker run --name sq --link db -e SONARQUBE_JDBC_URL=jdbc:postgresql://db:5432/sonar -p 9000:9000 -d sonarqube
</code></pre>

<p>执行完毕上面的命令后通过浏览器进入 SonarQube，默认用户名和密码都是 admin，进去后会有一段引导，里面会让你生成一个 access token，这个后面的配置 Jenkins 时会用到。</p>

<p>如果没有记下来的话，可以点右上角的用户头像里面的 My Account &gt; Security 标签中可以生成一个新的。</p>

<h3 id="配置-jenkins">配置 Jenkins</h3>

<p>Jenkins 需要在全局的 系统设置 里面添加 SonarQube Server，填下对应的访问地址和上一步获取的 access token 即可。服务器地址填写 localhost 可能会有问题，填 ip 会比较好些。</p>

<p>然后需要在 系统管理 的 Global Tool Configuration 菜单中配置 SonarQube Scanner 安装，这个直接选择自动安装就好了，十分方便。</p>

<p>这两步配好之后就到对应的项目配置中添加构建步骤，下拉选择 Execute SonarQube Scanner，然后对于 2.1 版本以上的 SonarQube Scanner 就只需要配置 Analysis properties 这一项就可以了，比较常用的参数包括 <code>sonar.projectKey</code> (用来确定 该项目在 SonarQube 中叫什么名字) 和 <code>sonar.sources=</code>(用来指定需要扫描的目录)。</p>

<p>配完之后选择构建即可，可以去当前构建的 Console Output 里面查看有没有报错，正常执行完成的话，在 SonarQube 项目面板中就可以看到一个新增的命名为配置的  <code>sonar.projectKey</code> 的 项目了。</p>

<h3 id="注意点">注意点：</h3>

<ul>
<li>SonarPHP 自定义检查规则需要用 java 来写扩展，比较新的版本内置了 psr2 的规则基本够用，内置的 Quality Profiles 是可以复制一个出来进行自定义的</li>
<li>Sonar 嗅探出的一些问题可能实际上并没有什么影响，比如变量名中含有 ‘pwd’ 等，如果原本使用方式确实合理则可适当忽略</li>
</ul>

<h3 id="参考链接">参考链接：</h3>

<ul>
<li><a href="http://www.jianshu.com/p/a1450aeb3379" target="_blank">使用 Docker 搭建代码质量检测平台 SonarQube</a></li>
<li><a href="http://www.52devops.com/chuck/1404.html" target="_blank">使用GIT+JENKINS+DOCKER+SONAR+DISCONF+HARBOR+TOMCAT实现持续部署CD(上)</a></li>
<li><a href="http://www.52devops.com/chuck/1422.html" target="_blank">使用GIT+JENKINS+DOCKER+SONAR+DISCONF+HARBOR+TOMCAT实现持续部署CD(下)</a></li>
<li><a href="http://www.cnblogs.com/zhuhongbao/p/4197974.html" target="_blank">[转]配置sonar、jenkins进行持续审查</a></li>
<li><a href="https://www.cnblogs.com/wangxin37/p/6397755.html" target="_blank">SonarQube+Jenkins,搭建持续交付平台</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>《星之所在》布鲁斯口琴 BD 谱</title>
            <link>https://qxzzf.com/posts/%E6%98%9F%E4%B9%8B%E6%89%80%E5%9C%A8%E5%B8%83%E9%B2%81%E6%96%AF%E5%8F%A3%E7%90%B4-bd-%E8%B0%B1/</link>
            <pubDate>Sun, 19 Nov 2017 20:56:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E6%98%9F%E4%B9%8B%E6%89%80%E5%9C%A8%E5%B8%83%E9%B2%81%E6%96%AF%E5%8F%A3%E7%90%B4-bd-%E8%B0%B1/</guid>
            <description>从百度知道和贴吧里找的，应该基本差不多：
 Part1:
7B 7D 7B 8B 7D
6D 6B 6D 7B 6B
5D 5B 5D 7B 7D 6B
6D 7D 7B 8B 8D
7B 7D 7B 8B 7D 6B
6D 7D 7B 8D 8B
8B 9D 8B 8D 7B 7D 8B 6D~ 7D 6D
Part2:
8B 8D 9B 9D 8B 8D 7D 7D 7B 6D
5D 6B 6D 7B 7D7B 8D 9D 8B
Part3:
7B 7D 7B 8B 7D</description>
            <content type="html"><![CDATA[<p>从百度知道和贴吧里找的，应该基本差不多：</p>

<blockquote>
<p>Part1:<br />
7B 7D 7B 8B 7D<br />
6D 6B 6D 7B 6B<br />
5D 5B 5D 7B 7D 6B<br />
6D 7D 7B 8B 8D<br />
7B 7D 7B 8B 7D 6B<br />
6D 7D 7B 8D 8B<br />
8B 9D 8B 8D 7B 7D 8B 6D~ 7D 6D</p>

<p>Part2:<br />
8B 8D 9B 9D 8B 8D 7D 7D 7B 6D<br />
5D 6B 6D 7B 7D7B 8D 9D 8B</p>

<p>Part3:<br />
7B 7D 7B 8B 7D<br />
6D 6B 6D 7B 6B<br />
5D 5B 5D 7B 7D 6B<br />
6D 7D 7B 8B 8D</p>

<p>Part4:<br />
7B 7D 7B 8D 8B<br />
8B 9B 9D 8B 8D 7B 8B<br />
8B 9D 8B 8D 7B 8B 8D 7B 7D 7D 6D</p>
</blockquote>

<p><code>~</code> 为压音标记。</p>
]]></content>
        </item>
        
        <item>
            <title>常见接口加密方式整理</title>
            <link>https://qxzzf.com/posts/%E5%B8%B8%E8%A7%81%E6%8E%A5%E5%8F%A3%E5%8A%A0%E5%AF%86%E6%96%B9%E5%BC%8F%E6%95%B4%E7%90%86/</link>
            <pubDate>Wed, 25 Oct 2017 19:41:55 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E5%B8%B8%E8%A7%81%E6%8E%A5%E5%8F%A3%E5%8A%A0%E5%AF%86%E6%96%B9%E5%BC%8F%E6%95%B4%E7%90%86/</guid>
            <description>今天在新公司开了个关于公网接口安全性校验的讨论会，貌似这边做这种对公的接口比较少，所以组长就组织大家都参与了一下。
我之前做这种接口做得比较多，对服务端、客户端的都有，加密方式也比较多样，但是仔细想来自己从来没有进行过比较系统的总结。
首先我们组长总结了接口安全性验证的三个核心点：
1.请求不能被篡改 2.请求不能被重放 3.请求可以被溯源
我就针对这三点来分别说说为了实现这三点一般会采用哪些手段。
不能被篡改 这一点是最基础的，之前的实际工作中其实很大一部分接口都只做到了这一点。这一点也可以看作是鉴权（authentication）。
一般常见的对请求合法性进行校验的方式如下：
 将参数按一定规则进行拼接，然后加上加密用的 key （或者叫 secret）进行 md5、sha1 之类的 hash，将 hash 值作为签名放在参数或者 http 请求头中进行传递 将参数进行 aes 加密，这种方式的话可以单独对参数值进行 aes 加密，也可以将所有的参数序列化后整个进行 aes 加密 RSA 非对称加密，这种方式一般将所有参数序列化后整段进行 RSA 加密，由于非对称加密的资源消耗较大，所以有些应用会采用通过非对称加密方式获取 secret，然后后续请求转为对称加密的方式 其他自定义对称加密算法，这种一般也是把所有参数序列化后通过自定义对称加密算法将其转化成一个可以被解密的字符串进行传递  不能被重放 这一点是为了防止请求链接被拦截后，恶意攻击者通过重复相同的请求对系统造成危害。从根本上来说，防止重放是需要提供接口的服务端能保证对外接口的幂等性。
防止重放的最简易的一个方式是在请求参数中加入时间戳，在处理接口请求时验证时间戳是否过期，过期则判定请求失效。这种方式存在两个弊端，第一点就是允许的时间范围内重复请求仍然可以生效，另一点是林子大了什么鸟都有，不同公司的时间服务器可能存在不同步，或者说不是所有的公司时间都和北京时间同步。
对于仅进行读操作的接口来说由于本身就是幂等的，只要有时间戳其实就可以了，然而对于包含写操作的接口来说，显然单纯的时间戳并不能满足这个需求。不过加入时间戳还有一个用处是相当于加了一层缓存，重复的失效请求在最外层就被屏蔽了，不会给服务器增加业务处理逻辑的压力。
一般实现保障接口请求幂等的方式是在请求参数中增加一个唯一性字段作为标识符，如支付、加币等类似业务中的订单号（或流水号）的概念。
另外也有一些类型的接口中会用 nonce 之类的一次性令牌来防止请求重放，这种方式就和 oauth 协议中使用的 code 基本差不多。
可以被溯源 接口请求可以被溯源对很多应用场景其实都有用，比如：
 方便异常的排查，异常请求可直接找到对应请求人 便于特殊情况，比如部分用户密钥泄漏等的处理 对接口进行分用户授权（authorization） 可以进行详细数据统计  比较常见的一些云服务的服务提供商的接口常用的方式就是提供给接口使用者对应的 app_id 和 app_secret（叫法各有不同），其中 app_id 就是接口使用者的身份标识符，该标识符随其他请求参数一起传递，供接口提供者确定请求来源，并取出该标识符对应的使用者的 app_secret 来进行接口的鉴权和授权判断。</description>
            <content type="html"><![CDATA[

<p>今天在新公司开了个关于公网接口安全性校验的讨论会，貌似这边做这种对公的接口比较少，所以组长就组织大家都参与了一下。</p>

<p>我之前做这种接口做得比较多，对服务端、客户端的都有，加密方式也比较多样，但是仔细想来自己从来没有进行过比较系统的总结。</p>

<p>首先我们组长总结了接口安全性验证的三个核心点：</p>

<p>1.请求不能被篡改
2.请求不能被重放
3.请求可以被溯源</p>

<p>我就针对这三点来分别说说为了实现这三点一般会采用哪些手段。</p>

<h3 id="不能被篡改">不能被篡改</h3>

<p>这一点是最基础的，之前的实际工作中其实很大一部分接口都只做到了这一点。这一点也可以看作是鉴权（authentication）。</p>

<p>一般常见的对请求合法性进行校验的方式如下：</p>

<ul>
<li>将参数按一定规则进行拼接，然后加上加密用的 key （或者叫 secret）进行 md5、sha1 之类的 hash，将 hash 值作为签名放在参数或者 http 请求头中进行传递</li>
<li>将参数进行 aes 加密，这种方式的话可以单独对参数值进行 aes 加密，也可以将所有的参数序列化后整个进行 aes 加密</li>
<li>RSA 非对称加密，这种方式一般将所有参数序列化后整段进行 RSA 加密，由于非对称加密的资源消耗较大，所以有些应用会采用通过非对称加密方式获取 secret，然后后续请求转为对称加密的方式</li>
<li>其他自定义对称加密算法，这种一般也是把所有参数序列化后通过自定义对称加密算法将其转化成一个可以被解密的字符串进行传递</li>
</ul>

<h3 id="不能被重放">不能被重放</h3>

<p>这一点是为了防止请求链接被拦截后，恶意攻击者通过重复相同的请求对系统造成危害。从根本上来说，防止重放是需要提供接口的服务端能保证对外接口的幂等性。</p>

<p>防止重放的最简易的一个方式是在请求参数中加入时间戳，在处理接口请求时验证时间戳是否过期，过期则判定请求失效。这种方式存在两个弊端，第一点就是允许的时间范围内重复请求仍然可以生效，另一点是林子大了什么鸟都有，不同公司的时间服务器可能存在不同步，或者说不是所有的公司时间都和北京时间同步。</p>

<p>对于仅进行读操作的接口来说由于本身就是幂等的，只要有时间戳其实就可以了，然而对于包含写操作的接口来说，显然单纯的时间戳并不能满足这个需求。不过加入时间戳还有一个用处是相当于加了一层缓存，重复的失效请求在最外层就被屏蔽了，不会给服务器增加业务处理逻辑的压力。</p>

<p>一般实现保障接口请求幂等的方式是在请求参数中增加一个唯一性字段作为标识符，如支付、加币等类似业务中的订单号（或流水号）的概念。</p>

<p>另外也有一些类型的接口中会用 nonce 之类的一次性令牌来防止请求重放，这种方式就和 oauth 协议中使用的 code 基本差不多。</p>

<h3 id="可以被溯源">可以被溯源</h3>

<p>接口请求可以被溯源对很多应用场景其实都有用，比如：</p>

<ul>
<li>方便异常的排查，异常请求可直接找到对应请求人</li>
<li>便于特殊情况，比如部分用户密钥泄漏等的处理</li>
<li>对接口进行分用户授权（authorization）</li>
<li>可以进行详细数据统计</li>
</ul>

<p>比较常见的一些云服务的服务提供商的接口常用的方式就是提供给接口使用者对应的 app_id 和 app_secret（叫法各有不同），其中 app_id 就是接口使用者的身份标识符，该标识符随其他请求参数一起传递，供接口提供者确定请求来源，并取出该标识符对应的使用者的 app_secret 来进行接口的鉴权和授权判断。</p>
]]></content>
        </item>
        
        <item>
            <title>常见的分库分表方式</title>
            <link>https://qxzzf.com/posts/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E6%96%B9%E5%BC%8F/</link>
            <pubDate>Tue, 24 Oct 2017 14:15:51 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E5%B8%B8%E8%A7%81%E7%9A%84%E5%88%86%E5%BA%93%E5%88%86%E8%A1%A8%E6%96%B9%E5%BC%8F/</guid>
            <description>这篇文章主要记录了我自己使用过的一些分库、分表、分区表的使用场景和方式。
分库 按时间分库 我们有很多时效性的运营活动，每次节日之类的都会有，复杂一些的活动一般都会有多张独立的表，而这些表在活动期结束后做完数据就基本没有用了。
对于这种场景，为了避免数据库中表的数量过多，影响主体业务，我们采用了按年分库的方式，把对应年费的活动表放到对应年费的库里。
按业务场景分库 前端面向用户的业务数据库一般会做读写分离，因为面向用户的数据库往往读写请求都很多，而面向业务人员的数据相关库则基本为读请求，一般我们也会把业务数据库和离线报表数据库分离开。
分表 按字段 hash、取模 等方式进行分表 这种方式一般适用于总量的增长比较可预估的情况，不会随着业务增长而不断爆发增加的情况，比如目前对于大多数公司来说，用户注册基本关联手机号等实名信息，增长不会过大，但放单表又怕存在性能问题的，即可采取这种方式。
这种场景下分表方案最基本的就是按 id 进行 hash、取模 等，也有更复杂的加入其他字段作为 seed 以便于登录等的方案，具体视实际情况进行选择。
按时间进行分表 这种方式适用于数据随时间不断增长的情况，比如一些用户行为日志等等，大多数情况下可以进行按月分表，每月数据从对应月份的表中进行获取，后台报表等用到的字段计算后放入折叠表这样的方式。
分区表 目前我对分区表的使用比较简单，基本是在一些相对来说重要性不是太高的业务场景下使用的，比如接口调用日志表，按月分区，一定时间之前的分区备份后进行删除，当前表中就一直保持近期的数据即可。</description>
            <content type="html"><![CDATA[

<p>这篇文章主要记录了我自己使用过的一些分库、分表、分区表的使用场景和方式。</p>

<h3 id="分库">分库</h3>

<h4 id="按时间分库">按时间分库</h4>

<p>我们有很多时效性的运营活动，每次节日之类的都会有，复杂一些的活动一般都会有多张独立的表，而这些表在活动期结束后做完数据就基本没有用了。</p>

<p>对于这种场景，为了避免数据库中表的数量过多，影响主体业务，我们采用了按年分库的方式，把对应年费的活动表放到对应年费的库里。</p>

<h4 id="按业务场景分库">按业务场景分库</h4>

<p>前端面向用户的业务数据库一般会做读写分离，因为面向用户的数据库往往读写请求都很多，而面向业务人员的数据相关库则基本为读请求，一般我们也会把业务数据库和离线报表数据库分离开。</p>

<h3 id="分表">分表</h3>

<h4 id="按字段-hash-取模-等方式进行分表">按字段 hash、取模 等方式进行分表</h4>

<p>这种方式一般适用于总量的增长比较可预估的情况，不会随着业务增长而不断爆发增加的情况，比如目前对于大多数公司来说，用户注册基本关联手机号等实名信息，增长不会过大，但放单表又怕存在性能问题的，即可采取这种方式。</p>

<p>这种场景下分表方案最基本的就是按 id 进行 hash、取模 等，也有更复杂的加入其他字段作为 seed 以便于登录等的方案，具体视实际情况进行选择。</p>

<h4 id="按时间进行分表">按时间进行分表</h4>

<p>这种方式适用于数据随时间不断增长的情况，比如一些用户行为日志等等，大多数情况下可以进行按月分表，每月数据从对应月份的表中进行获取，后台报表等用到的字段计算后放入折叠表这样的方式。</p>

<h3 id="分区表">分区表</h3>

<p>目前我对分区表的使用比较简单，基本是在一些相对来说重要性不是太高的业务场景下使用的，比如接口调用日志表，按月分区，一定时间之前的分区备份后进行删除，当前表中就一直保持近期的数据即可。</p>
]]></content>
        </item>
        
        <item>
            <title>Windows 安装 Xshell 失败修复方法</title>
            <link>https://qxzzf.com/posts/windows-%E5%AE%89%E8%A3%85-xshell-%E5%A4%B1%E8%B4%A5%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%B3%95/</link>
            <pubDate>Fri, 20 Oct 2017 09:35:46 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/windows-%E5%AE%89%E8%A3%85-xshell-%E5%A4%B1%E8%B4%A5%E4%BF%AE%E5%A4%8D%E6%96%B9%E6%B3%95/</guid>
            <description>参考资料：
xshell5老是出现安装程序组件错误，好心人帮忙解决下 xshell 安装过卸载了，然后再安装的时候报错 -1605错误
遇到的问题是在新装的 Win7 系统上安装 Xshell 时，安装到快结束那步提示 “安装程序集组件{&amp;hellip;}时出错”，然后重新运行安装程序无论选哪个选项都提示 “此操作只对目前安装的产品有效”。
解决方法如下：
到 C:\Program Files (x86)\InstallShield Installation Information 这个目录下，删了这个文件夹 {F3FDFD5A-A201-407B-887F-399484764ECA}
将以下命令保存为 bat 文件并以管理员身份运行
sc config wuauserv start= auto sc config bits start= auto sc config DcomLaunch start= auto net stop wuauserv net start wuauserv net stop bits net start bits net start DcomLaunch  然后重新运行 Xshell 的安装包，注意语言不要选择简体中文
这样如果不出意外即可成功安装，Xftp 等遇到类似问题也可以按照同样的方法解决。</description>
            <content type="html"><![CDATA[<p>参考资料：</p>

<p><a href="http://bbs.csdn.net/topics/391959404" target="_blank">xshell5老是出现安装程序组件错误，好心人帮忙解决下</a>
<a href="https://tieba.baidu.com/p/4610927590" target="_blank">xshell 安装过卸载了，然后再安装的时候报错 -1605错误</a></p>

<p>遇到的问题是在新装的 Win7 系统上安装 Xshell 时，安装到快结束那步提示 “安装程序集组件{&hellip;}时出错”，然后重新运行安装程序无论选哪个选项都提示 “此操作只对目前安装的产品有效”。</p>

<p>解决方法如下：</p>

<p>到 C:\Program Files (x86)\InstallShield Installation Information
这个目录下，删了这个文件夹 {F3FDFD5A-A201-407B-887F-399484764ECA}</p>

<p>将以下命令保存为 bat 文件并以管理员身份运行</p>

<pre><code class="language-cmd">sc config wuauserv start= auto
sc config bits start= auto
sc config DcomLaunch start= auto
net stop wuauserv
net start wuauserv
net stop bits
net start bits
net start DcomLaunch 
</code></pre>

<p>然后重新运行 Xshell 的安装包，注意语言不要选择简体中文</p>

<p>这样如果不出意外即可成功安装，Xftp 等遇到类似问题也可以按照同样的方法解决。</p>
]]></content>
        </item>
        
        <item>
            <title>在原有的 Yii1.1 项目中使用 Yii2 框架的经验记录</title>
            <link>https://qxzzf.com/posts/%E5%9C%A8%E5%8E%9F%E6%9C%89%E7%9A%84-yii1.1-%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8-yii2-%E6%A1%86%E6%9E%B6%E7%9A%84%E7%BB%8F%E9%AA%8C%E8%AE%B0%E5%BD%95/</link>
            <pubDate>Thu, 07 Sep 2017 14:25:14 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E5%9C%A8%E5%8E%9F%E6%9C%89%E7%9A%84-yii1.1-%E9%A1%B9%E7%9B%AE%E4%B8%AD%E4%BD%BF%E7%94%A8-yii2-%E6%A1%86%E6%9E%B6%E7%9A%84%E7%BB%8F%E9%AA%8C%E8%AE%B0%E5%BD%95/</guid>
            <description>目前公司由于历史原因，之前很多主体项目都是使用 Yii1.1 开发的，Yii1.1 在使用上还是有很多不便，为了使用 Yii2 的一些新特性，我决定在一个规模比较小的项目上尝试 Yii1.1 和 Yii2 共存并逐渐使用 Yii2 替代原有 Yii1.1 代码进行项目升级的方案。
主要的参考文档在 google 上搜了下就只有官方文档的一节 Using Yii 2 with Yii 1 。
最主要的是创建一个自定义的 Yii 类文件，这个类继承自 Yii2 的 BaseYii 类，而类里面需要手工把 Yii1.1 的 YiiBase 类中的代码复制过来，这样这个类就同时拥有 Yii1.1 和 Yii2 的属性和方法了。 然后最下面三行是为了能在项目中使用 Yii2 的自动加载机制和依赖注入容器，一定不能写错。
$yii2path = &#39;/path/to/yii2&#39;; require($yii2path . &#39;/BaseYii.php&#39;); // Yii 2.x $yii1path = &#39;/path/to/yii1&#39;; require($yii1path . &#39;/YiiBase.php&#39;); // Yii 1.x class Yii extends \yii\BaseYii { // 这里要把 Yii1.1 中 YiiBase 类里的代码全部复制过来 } Yii::$classMap = include($yii2path .</description>
            <content type="html"><![CDATA[<p>目前公司由于历史原因，之前很多主体项目都是使用 Yii1.1 开发的，Yii1.1 在使用上还是有很多不便，为了使用 Yii2 的一些新特性，我决定在一个规模比较小的项目上尝试 Yii1.1 和 Yii2 共存并逐渐使用 Yii2 替代原有 Yii1.1 代码进行项目升级的方案。</p>

<p>主要的参考文档在 google 上搜了下就只有官方文档的一节 <a href="http://www.yiiframework.com/doc-2.0/guide-tutorial-yii-integration.html#using-both-yii2-yii1" target="_blank">Using Yii 2 with Yii 1 </a>。</p>

<p>最主要的是创建一个自定义的 Yii 类文件，这个类继承自 Yii2 的 BaseYii 类，而类里面需要手工把 Yii1.1 的 YiiBase 类中的代码复制过来，这样这个类就同时拥有 Yii1.1 和 Yii2 的属性和方法了。
然后最下面三行是为了能在项目中使用 Yii2 的自动加载机制和依赖注入容器，一定不能写错。</p>

<pre><code class="language-php">$yii2path = '/path/to/yii2';
require($yii2path . '/BaseYii.php'); // Yii 2.x

$yii1path = '/path/to/yii1';
require($yii1path . '/YiiBase.php'); // Yii 1.x

class Yii extends \yii\BaseYii
{
    // 这里要把 Yii1.1 中 YiiBase 类里的代码全部复制过来
}

Yii::$classMap = include($yii2path . '/classes.php');
// 通过 Yii1.1 的方法注册 Yii2 的自动加载器
Yii::registerAutoloader(['yii\BaseYii', 'autoload']);
// 创建依赖注入容器
Yii::$container = new yii\di\Container();
</code></pre>

<p>这个文件我们可以放在 <code>components\Yii.php</code>，然后我们就需要修改项目原先的 <code>index.php</code> 入口文件了，修改过后的关键代码如下：</p>

<pre><code class="language-php">// 引入上一步创建好的自定义 Yii 类文件
require(__DIR__ . '/../components/Yii.php');

// 首先读取 Yii2 的配置，实际配置可能更多，这里只是参考
$yii2Config = require(__DIR__ . '/../config/yii2/web.php');
// 不要调用 run() 方法，Yii2 只作为服务定位器使用
new yii\web\Application($yii2Config);

// 读取 Yii1.1 配置，实例化 Application 并运行
$yii1Config = require(__DIR__ . '/../config/yii1/main.php');
Yii::createWebApplication($yii1Config)-&gt;run();
</code></pre>

<p>配好这些就可以开始使用了，项目的目录组织的话可以根据实际项目情况而定，在编写 Yii2 代码时，我们可以无视原来的 Yii1.1 的所有代码，将项目作为一个常规的 Yii2 项目来看，这样的话目录结构就很清晰了。</p>

<p>这种方案要求 php 版本至少在 <code>5.4</code> 以上，我建议将 Yii1.1 的框架版本升级到最新的 <code>1.1.19</code> 这个版本可以支持 php7.0 和 php7.1。</p>

<p>总的来说并不困难，不过参考资料较少，实际使用过程中可能会遇到坑点，不过也都比较好解决，老项目这样一配可以说是枯木逢春，写起新功能来要舒服太多了。</p>
]]></content>
        </item>
        
        <item>
            <title>上海办理护照和港澳通行证记录</title>
            <link>https://qxzzf.com/posts/%E4%B8%8A%E6%B5%B7%E5%8A%9E%E7%90%86%E6%8A%A4%E7%85%A7%E5%92%8C%E6%B8%AF%E6%BE%B3%E9%80%9A%E8%A1%8C%E8%AF%81%E8%AE%B0%E5%BD%95/</link>
            <pubDate>Thu, 07 Sep 2017 13:49:59 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E4%B8%8A%E6%B5%B7%E5%8A%9E%E7%90%86%E6%8A%A4%E7%85%A7%E5%92%8C%E6%B8%AF%E6%BE%B3%E9%80%9A%E8%A1%8C%E8%AF%81%E8%AE%B0%E5%BD%95/</guid>
            <description>本来今年十一同事有日本游的计划，无耐旺季机票太贵只得作罢，不过因为之前一直没有办护照想着以后说不定用到所以还是先把护照给办了。
参考攻略：https://zhihu.com/question/21517942/answer/126703774。
首先在上海市出入境管理局电子政务平台进行网上预约，这个网站只能用 IE 进行操作，其他浏览器都可能存在兼容性问题，而且十分卡，有的时候点完要多等一会。
预约完后就是在预约时间去办理点了，我是在张江的点办理的，不同地方可能稍有不同。张江这边周末办理的人不是很多，等不了多会就能办，有些点貌似周末人就超多。
过去的时候只要带上身份证和居住证即可，到了之后先去自助机器上打印申请登记表，然后就可以去采集照片、复印证件了。
需要注意的是，去窗口办理之前先在采集照片的地方拍好照片，还有先把身份证和居住证复印好，以及取好现金，有些地方不能刷卡只收现金，还有就是如果要快递办好的证件的话也要先买好快递。复印室、ATM机和照片采集室一般在一起，还是比较方便的，我办的时候因为直接先去的窗口，所以来回跑了几次，搞的有点麻烦。
上面说的都准备好之后就可以去拿号去窗口办理了，也是几分钟就能办好，总计费用大概两百多，交完费拿到回执单就结束了，可以等证件快递到手了。</description>
            <content type="html"><![CDATA[<p>本来今年十一同事有日本游的计划，无耐旺季机票太贵只得作罢，不过因为之前一直没有办护照想着以后说不定用到所以还是先把护照给办了。</p>

<p>参考攻略：<a href="https://zhihu.com/question/21517942/answer/126703774" target="_blank">https://zhihu.com/question/21517942/answer/126703774</a>。</p>

<p>首先在<a href="http://crj.police.sh.cn/" target="_blank">上海市出入境管理局电子政务平台</a>进行网上预约，这个网站只能用 IE 进行操作，其他浏览器都可能存在兼容性问题，而且十分卡，有的时候点完要多等一会。</p>

<p>预约完后就是在预约时间去办理点了，我是在张江的点办理的，不同地方可能稍有不同。张江这边周末办理的人不是很多，等不了多会就能办，有些点貌似周末人就超多。</p>

<p>过去的时候只要带上身份证和居住证即可，到了之后先去自助机器上打印申请登记表，然后就可以去采集照片、复印证件了。</p>

<p>需要注意的是，去窗口办理之前先在采集照片的地方拍好照片，还有先把身份证和居住证复印好，以及取好现金，有些地方不能刷卡只收现金，还有就是如果要快递办好的证件的话也要先买好快递。复印室、ATM机和照片采集室一般在一起，还是比较方便的，我办的时候因为直接先去的窗口，所以来回跑了几次，搞的有点麻烦。</p>

<p>上面说的都准备好之后就可以去拿号去窗口办理了，也是几分钟就能办好，总计费用大概两百多，交完费拿到回执单就结束了，可以等证件快递到手了。</p>
]]></content>
        </item>
        
        <item>
            <title>上海拍牌相关记录</title>
            <link>https://qxzzf.com/posts/%E4%B8%8A%E6%B5%B7%E6%8B%8D%E7%89%8C%E7%9B%B8%E5%85%B3%E8%AE%B0%E5%BD%95/</link>
            <pubDate>Thu, 07 Sep 2017 11:47:16 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E4%B8%8A%E6%B5%B7%E6%8B%8D%E7%89%8C%E7%9B%B8%E5%85%B3%E8%AE%B0%E5%BD%95/</guid>
            <description>上海的牌照现在是越来越贵也越来越难排了，上个月社保和个税都满3年这个条件了我就开始申请标书准备加入拍牌大军了。
购买标书指南参见 http://51hupai.com/help/buy-ticket ，发现个人拍标书的话，51沪牌这个网站还蛮有用。
整个流程还是比较方便的，不过自己买标书的过程中也遇到了一些需要注意的地方。一个是最好要先网上预约，不预约的话如果周末去办理点排队之前可能就被劝退了，还有就是居住证卡面也一定要在有效期，我就是今年自动签注了一年没有更新有效期，结果周末去排队之前就被工作人员劝退了。
后来更新居住证卡面有效期发现还挺便利的，一些居住证的办理点8点半就上班了（其实稍早一点的时候就开始办公了），早点过去两三分钟就能好，办完去上班如果公司近都不会迟到。
然后为了不排长队，我就工作日上午请假过去的，去的早基本一去就能办，也是填些资料几分钟就可以拿到标书了，如果是社保满三年的话，只要带上身份证、居住证、驾驶证就行，标书钱可以现金也可以刷卡，信用卡也可以，很方便。
如果标书使用次数到了 6 次的上限，那么就需要再重复一次购买流程，需要注意的是旧标书最好保留，换新标书时旧标书的余额是可以直接抵扣的，要是拍中了退标书也要带着纸质标书。不过丢了也没关系，直接办下挂失也挺快的。</description>
            <content type="html"><![CDATA[<p>上海的牌照现在是越来越贵也越来越难排了，上个月社保和个税都满3年这个条件了我就开始申请标书准备加入拍牌大军了。</p>

<p>购买标书指南参见 <a href="http://51hupai.com/help/buy-ticket" target="_blank">http://51hupai.com/help/buy-ticket</a> ，发现个人拍标书的话，51沪牌这个网站还蛮有用。</p>

<p>整个流程还是比较方便的，不过自己买标书的过程中也遇到了一些需要注意的地方。一个是最好要先网上预约，不预约的话如果周末去办理点排队之前可能就被劝退了，还有就是居住证卡面也一定要在有效期，我就是今年自动签注了一年没有更新有效期，结果周末去排队之前就被工作人员劝退了。</p>

<p>后来更新居住证卡面有效期发现还挺便利的，一些居住证的办理点8点半就上班了（其实稍早一点的时候就开始办公了），早点过去两三分钟就能好，办完去上班如果公司近都不会迟到。</p>

<p>然后为了不排长队，我就工作日上午请假过去的，去的早基本一去就能办，也是填些资料几分钟就可以拿到标书了，如果是社保满三年的话，只要带上身份证、居住证、驾驶证就行，标书钱可以现金也可以刷卡，信用卡也可以，很方便。</p>

<p>如果标书使用次数到了 6 次的上限，那么就需要再重复一次购买流程，需要注意的是旧标书最好保留，换新标书时旧标书的余额是可以直接抵扣的，要是拍中了退标书也要带着纸质标书。不过丢了也没关系，直接办下挂失也挺快的。</p>
]]></content>
        </item>
        
        <item>
            <title>PHP 反直(ren)觉(lei)的坑记录</title>
            <link>https://qxzzf.com/posts/php-%E5%8F%8D%E7%9B%B4ren%E8%A7%89lei%E7%9A%84%E5%9D%91%E8%AE%B0%E5%BD%95/</link>
            <pubDate>Thu, 03 Aug 2017 10:33:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/php-%E5%8F%8D%E7%9B%B4ren%E8%A7%89lei%E7%9A%84%E5%9D%91%E8%AE%B0%E5%BD%95/</guid>
            <description>$map = [ &#39;360&#39; =&amp;gt; &#39;360&#39;, &#39;baidu&#39; =&amp;gt; &#39;baidu&#39;, &#39;google&#39; =&amp;gt; &#39;google&#39;, ]; $url = &#39;https://www.google.com&#39;; foreach ($map as $key =&amp;gt; $value) { if (strpos($url, $key) !== false) { echo $value; break; } }  期望输出: google 实际输出: 360
参见：http://php.net/manual/en/function.strpos.php 中 needle 参数的解释，&amp;rsquo;360&amp;rsquo; 在数组中被转换成了整型的 key，在 strpos 中使用到时整型的 360 就被当作了 ascii 序数值，而 chr(360) 结果为 h（chr 函数入参不在 0~255 范围内时会进行取模运算处理）。 echo date(&#39;Y-m-d&#39;, strtotime(&#39;-1 month&#39;, strtotime(&#39;2017-07-31&#39;)));  期望输出: 2017-06-01 实际输出: 2017-07-01
参见：https://bugs.php.net/bug.php?id=27793。
PHP 的时间处理有很多类似的坑，主要是有点反直觉，-1 month 是减 30 天，即使使用 Datetime 类也会有类似的问题出现。</description>
            <content type="html"><![CDATA[

<pre><code class="language-php">$map = [
    '360' =&gt; '360',
    'baidu' =&gt; 'baidu',
    'google' =&gt; 'google',
];

$url = 'https://www.google.com';
foreach ($map as $key =&gt; $value) {
    if (strpos($url, $key) !== false) {
        echo $value;
        break;
    }
}
</code></pre>

<p>期望输出: google
实际输出: 360</p>

<h2 id="参见-http-php-net-manual-en-function-strpos-php-http-php-net-manual-en-function-strpos-php-中-needle-参数的解释-360-在数组中被转换成了整型的-key-在-strpos-中使用到时整型的-360-就被当作了-ascii-序数值-而-chr-360-结果为-h-chr-函数入参不在-0-255-范围内时会进行取模运算处理">参见：<a href="http://php.net/manual/en/function.strpos.php" target="_blank">http://php.net/manual/en/function.strpos.php</a> 中 needle 参数的解释，&rsquo;360&rsquo; 在数组中被转换成了整型的 key，在 strpos 中使用到时整型的 360 就被当作了 ascii 序数值，而 <code>chr(360)</code> 结果为 <code>h</code>（chr 函数入参不在 0~255 范围内时会进行取模运算处理）。</h2>

<pre><code class="language-php">echo date('Y-m-d', strtotime('-1 month', strtotime('2017-07-31')));
</code></pre>

<p>期望输出: 2017-06-01
实际输出: 2017-07-01</p>

<p>参见：<a href="https://bugs.php.net/bug.php?id=27793" target="_blank">https://bugs.php.net/bug.php?id=27793</a>。</p>

<p>PHP 的时间处理有很多类似的坑，主要是有点反直觉，<code>-1 month</code> 是减 30 天，即使使用 Datetime 类也会有类似的问题出现。</p>

<pre><code class="language-php">&lt;?php

$date1 = DateTime::createFromFormat('Y-m-d H:i:s', '2017-07-31 00:00:00');
$date2 = clone $date1;

$date1-&gt;modify('-1 month');
$date2-&gt;sub(new DateInterval(&quot;P1M&quot;));

var_dump($date1-&gt;format('Y-m-d')); // 2017-07-01
var_dump($date2-&gt;format('Y-m-d')); // 2017-07-01
</code></pre>

<p>参见：<a href="http://php.net/manual/en/class.datetime.php" target="_blank">http://php.net/manual/en/class.datetime.php</a></p>

<hr />

<pre><code class="language-php">$arr = [1, 2, 3]; 

foreach ($arr as &amp;$a) {}
foreach ($arr as $a) {}

var_dump($arr); 
</code></pre>

<p>这是 php 引用的一个坑，必须引用在循环结束之后必须 unset 一下，否则输出的结果与预期会不一致。</p>

<p>参考资料：<a href="http://php.net/manual/en/control-structures.foreach.php" target="_blank">http://php.net/manual/en/control-structures.foreach.php</a></p>

<p>具体案例可见 <a href="https://laravel-china.org/articles/7001/php-ray-foreach-and-references-thunder" target="_blank">https://laravel-china.org/articles/7001/php-ray-foreach-and-references-thunder</a></p>

<hr />

<pre><code class="language-php">$x = array('a');
$test = in_array(0, $x);
var_dump($test); // true

$x = array(0);
$test = in_array('a', $x);
var_dump($test); // true

$x = array('b' =&gt; 0);
$test = in_array('a', $x);
var_dump($test); // true

$x = array('0');
$test= in_array('a', $x);
var_dump($test); // false
</code></pre>

<p>可能很多人都不知道，<code>in_array</code> 函数有第三个参数 <code>strict</code>，这个参数默认为 false，不把这个参数设置成 true 就会出现上面的匪夷所思的情况。
但是 <code>strict</code> 为 true 的情况下会对值的类型进行判断，在实际应用场景中如果数据类型没有进行恰当的处理也可能有坑。</p>

<p>之所以前面三个 in_array 的结果都为 true，是因为在 php 中 <code>'a' == 0</code>，除了 in_array，switch case 等也会出现类似情况。</p>

<p>参考链接：<a href="http://php.net/in_array" target="_blank">http://php.net/in_array</a></p>
]]></content>
        </item>
        
        <item>
            <title>aria2 使用体验</title>
            <link>https://qxzzf.com/posts/aria2-%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</link>
            <pubDate>Fri, 14 Jul 2017 22:47:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/aria2-%E4%BD%BF%E7%94%A8%E4%BD%93%E9%AA%8C/</guid>
            <description>安装和配置参考：下载利器！Windows配置Aria2及Web管理面板教程
自从迅雷更新成浏览器之后就再也没用过迅雷，之前遇到需要离线下载之类的一般都用百度网盘，感觉还不错。不过现在发现有的时候还是会有下载到本机的需求，一般的其实也可以用 EagleGet 来下载，但 aria2 相对来说功能更强大，社区也有比较多的配套资源，比如说网盘导出到 aria2 的浏览器扩展之类的，于是便试用了一下。
整个安装和配置过程我都是参照的上述的那篇文章，不过其中的 web 服务器我因为已经装了 wamp 集成环境，所以没有按照教程里的安装 EasyWebSvr，如果自己有 vps 或者云服务器的话，也可以把 AriaNg 装到自己的服务器上，这样多台电脑都可以共用。
AriaNg 确实界面美观功能强大，建议自己搭建该面板，需要注意的是在 AriaNg 里修改了配置是不会保存到配置文件的，重启 aria2 之后配置又会复原。
还有就是我发现在一次性添加文件夹性质的下载任务时，经常会出现部分文件下载失败停止下载的情况，不过遇到这种情况只要重新添加一次任务即可，aria2 会继续上次下载的进度的。</description>
            <content type="html"><![CDATA[<p>安装和配置参考：<a href="https://www.mivm.cn/windows-aria2/" target="_blank">下载利器！Windows配置Aria2及Web管理面板教程</a></p>

<p>自从迅雷更新成浏览器之后就再也没用过迅雷，之前遇到需要离线下载之类的一般都用百度网盘，感觉还不错。不过现在发现有的时候还是会有下载到本机的需求，一般的其实也可以用 EagleGet 来下载，但 aria2 相对来说功能更强大，社区也有比较多的配套资源，比如说网盘导出到 aria2 的浏览器扩展之类的，于是便试用了一下。</p>

<p>整个安装和配置过程我都是参照的上述的那篇文章，不过其中的 web 服务器我因为已经装了 wamp 集成环境，所以没有按照教程里的安装 EasyWebSvr，如果自己有 vps 或者云服务器的话，也可以把 AriaNg 装到自己的服务器上，这样多台电脑都可以共用。</p>

<p>AriaNg 确实界面美观功能强大，建议自己搭建该面板，需要注意的是在 AriaNg 里修改了配置是不会保存到配置文件的，重启 aria2 之后配置又会复原。</p>

<p>还有就是我发现在一次性添加文件夹性质的下载任务时，经常会出现部分文件下载失败停止下载的情况，不过遇到这种情况只要重新添加一次任务即可，aria2 会继续上次下载的进度的。</p>
]]></content>
        </item>
        
        <item>
            <title>Windows重装系统需安装的软件整理</title>
            <link>https://qxzzf.com/posts/windows%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E9%9C%80%E5%AE%89%E8%A3%85%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%95%B4%E7%90%86/</link>
            <pubDate>Sun, 04 Jun 2017 09:52:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/windows%E9%87%8D%E8%A3%85%E7%B3%BB%E7%BB%9F%E9%9C%80%E5%AE%89%E8%A3%85%E7%9A%84%E8%BD%AF%E4%BB%B6%E6%95%B4%E7%90%86/</guid>
            <description>重装前需要备份的信息 Navicat配置 PHPStrom配置 SSH密钥 xshell和xftp配置 Sublime配置
需要重装的软件（建议装系统盘） 各种驱动（加激活） TIM、微信、Telegram 等IM工具 网易云音乐 Primo Ramdisk office Chrome（加SwitchyOmega便可同步所有信息） Teamviewer、向日葵等远程工具 Sublime Git Xshell + Xftp Navicat redisDesktop PHPStrom php、jdk、python 等语言环境
绿色软件（建议放数据盘） MyChrome（绿色版Chrome，可进行一些自定义，很不错） SwitchHosts cow/MEOW shadowsocks
时代的眼泪 QQ（TIM取代了） 迅雷（对于我基本没什么卵用了） winrar（Win10貌似不是很必要了） Clover（广告爆炸）</description>
            <content type="html"><![CDATA[

<h3 id="重装前需要备份的信息">重装前需要备份的信息</h3>

<p>Navicat配置
PHPStrom配置
SSH密钥
xshell和xftp配置
Sublime配置</p>

<h3 id="需要重装的软件-建议装系统盘">需要重装的软件（建议装系统盘）</h3>

<p>各种驱动（加激活）
TIM、微信、Telegram 等IM工具
网易云音乐
Primo Ramdisk
office
Chrome（加SwitchyOmega便可同步所有信息）
Teamviewer、向日葵等远程工具
Sublime
Git
Xshell + Xftp
Navicat
redisDesktop
PHPStrom
php、jdk、python 等语言环境</p>

<h3 id="绿色软件-建议放数据盘">绿色软件（建议放数据盘）</h3>

<p>MyChrome（绿色版Chrome，可进行一些自定义，很不错）
SwitchHosts
cow/MEOW
shadowsocks</p>

<h3 id="时代的眼泪">时代的眼泪</h3>

<p>QQ（TIM取代了）
迅雷（对于我基本没什么卵用了）
winrar（Win10貌似不是很必要了）
Clover（广告爆炸）</p>
]]></content>
        </item>
        
        <item>
            <title>Windows10 使用 Magic Trackpad2 踩坑记</title>
            <link>https://qxzzf.com/posts/windows10-%E4%BD%BF%E7%94%A8-magic-trackpad2-%E8%B8%A9%E5%9D%91%E8%AE%B0/</link>
            <pubDate>Sat, 27 May 2017 22:50:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/windows10-%E4%BD%BF%E7%94%A8-magic-trackpad2-%E8%B8%A9%E5%9D%91%E8%AE%B0/</guid>
            <description>经历一个晚上的千辛万苦终于能用了，不过还有很多不完美的地方，感觉真是超级坑。
首先是配对，一开始我没有用线去配对，结果非常麻烦，需要我原来的 air 上面先移除这个设备，然后 windows 笔记本才能通过蓝牙搜索到这个设备，光这一点就折腾了好久。后来试了一下先用线连一下，然后就可以很方便地用蓝牙搜索到并且配对了，配对成功应该就能通过 Magic Trackpad 控制光标了。
然后就是装驱动，搜索 Boot Camp，目前为止最新的版本是 6.1，据说 6.0 之前的版本对 win10 的支持不是特别完美。
然后装 Magic Trackpad2 Control Panel，这个软件试用期是 28 天，能够实现两指的手势和轻按点击，ExtraMagic 则是能实现三指和四指的一些手势，这个软件的试用期貌似更短，只有一周。这两个软件在安装的时候我还遇到一个坑就是和蓝牙适配器的驱动不兼容，明明我已经成功配对而且能够操作光标了，但是这两个软件竟然提示 not paired，这个问题我也折腾好久，结果我把蓝牙的驱动给卸载了，用 win10 自带的驱动，结果就可以了。。。
这几天试了一下，Magic Trackpad2 Control Panel 可以实现的功能，ExtraMagic 也基本都可以实现，除了查看电量之外，所以基本可以只装 ExtraMagic 即可，而且 ExtraMagic 试用结束后也可以免费使用。
Windows 上用苹果的外设真是神坑，不过我用 Magic Trackpad 的主要原因是怕得严重鼠标手，之前把普通鼠标换成垂直人体工学鼠标后，手腕的感觉好多了，但是手指因为经常要操作滚轮，所以还是损伤很大，换成 trackpad 之后手指的伸缩要少很多。</description>
            <content type="html"><![CDATA[<p>经历一个晚上的千辛万苦终于能用了，不过还有很多不完美的地方，感觉真是超级坑。</p>

<p>首先是配对，一开始我没有用线去配对，结果非常麻烦，需要我原来的 air 上面先移除这个设备，然后 windows 笔记本才能通过蓝牙搜索到这个设备，光这一点就折腾了好久。后来试了一下先用线连一下，然后就可以很方便地用蓝牙搜索到并且配对了，配对成功应该就能通过 Magic Trackpad 控制光标了。</p>

<p>然后就是装驱动，搜索 Boot Camp，目前为止最新的版本是 6.1，据说 6.0 之前的版本对 win10 的支持不是特别完美。</p>

<p>然后装 Magic Trackpad2 Control Panel，这个软件试用期是 28 天，能够实现两指的手势和轻按点击，ExtraMagic 则是能实现三指和四指的一些手势，这个软件的试用期貌似更短，只有一周。这两个软件在安装的时候我还遇到一个坑就是和蓝牙适配器的驱动不兼容，明明我已经成功配对而且能够操作光标了，但是这两个软件竟然提示 <code>not paired</code>，这个问题我也折腾好久，结果我把蓝牙的驱动给卸载了，用 win10 自带的驱动，结果就可以了。。。</p>

<p>这几天试了一下，Magic Trackpad2 Control Panel 可以实现的功能，ExtraMagic 也基本都可以实现，除了查看电量之外，所以基本可以只装 ExtraMagic 即可，而且 ExtraMagic 试用结束后也可以免费使用。</p>

<p>Windows 上用苹果的外设真是神坑，不过我用 Magic Trackpad 的主要原因是怕得严重鼠标手，之前把普通鼠标换成垂直人体工学鼠标后，手腕的感觉好多了，但是手指因为经常要操作滚轮，所以还是损伤很大，换成 trackpad 之后手指的伸缩要少很多。</p>
]]></content>
        </item>
        
        <item>
            <title>lnmp 环境下 502 问题原因及解决方案整理</title>
            <link>https://qxzzf.com/posts/lnmp-%E7%8E%AF%E5%A2%83%E4%B8%8B-502-%E9%97%AE%E9%A2%98%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E6%95%B4%E7%90%86/</link>
            <pubDate>Tue, 23 May 2017 15:54:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/lnmp-%E7%8E%AF%E5%A2%83%E4%B8%8B-502-%E9%97%AE%E9%A2%98%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E6%95%B4%E7%90%86/</guid>
            <description>参考资料：
 nginx+php-fpm出现502 bad gateway错误解决方法 NGINX 502 Bad Gateway: PHP-FPM  一般来说 502 可能的原因及解决方案如下：
php-fpm 未启动或不在运行 首先如果服务器上有多个版本的 php 的话，首先需要确认自己使用的是哪个版本。一般来说通过查看 nginx 配置文件中 fastcgi_pass 可以查看到监听对应 socket 或 端口的 fpm 是那个版本的。
然后 service php-fpm status 查看运行状态，注意对应版本的 fpm 的 service 名是不是 php-fpm 。
nginx 无法与 php-fpm 交互 这个一般是由于 nginx 配置文件中 fastcgi_pass 配置有问题造成的，查看 php-fpm 配置中 listen 项具体的值是否与 nginx 配置文件中的 fastcgi_pass 对应。
nginx 超时 nginx 超时一般与下面三个配置项有关：
fastcgi_connect_timeout 300; fastcgi_send_timeout 300; fastcgi_read_timeout 300;  在对应配置文件中修改这几个值即可。
php-fpm 超时 这个可以修改 php.</description>
            <content type="html"><![CDATA[

<p>参考资料：</p>

<ul>
<li><a href="http://www.nginx.cn/102.html" target="_blank">nginx+php-fpm出现502 bad gateway错误解决方法</a></li>
<li><a href="https://www.datadoghq.com/blog/nginx-502-bad-gateway-errors-php-fpm/" target="_blank">NGINX 502 Bad Gateway: PHP-FPM</a></li>
</ul>

<p>一般来说 502 可能的原因及解决方案如下：</p>

<h4 id="php-fpm-未启动或不在运行">php-fpm 未启动或不在运行</h4>

<p>首先如果服务器上有多个版本的 php 的话，首先需要确认自己使用的是哪个版本。一般来说通过查看 nginx 配置文件中 fastcgi_pass 可以查看到监听对应 socket 或 端口的 fpm 是那个版本的。</p>

<p>然后 service php-fpm status 查看运行状态，注意对应版本的 fpm 的 service 名是不是 php-fpm 。</p>

<h4 id="nginx-无法与-php-fpm-交互">nginx 无法与 php-fpm 交互</h4>

<p>这个一般是由于 nginx 配置文件中 fastcgi_pass 配置有问题造成的，查看 php-fpm 配置中 listen 项具体的值是否与 nginx 配置文件中的 fastcgi_pass 对应。</p>

<h4 id="nginx-超时">nginx 超时</h4>

<p>nginx 超时一般与下面三个配置项有关：</p>

<pre><code>fastcgi_connect_timeout 300;
fastcgi_send_timeout 300;
fastcgi_read_timeout 300;
</code></pre>

<p>在对应配置文件中修改这几个值即可。</p>

<h4 id="php-fpm-超时">php-fpm 超时</h4>

<p>这个可以修改 php.ini 中的最大执行时间 max_execution_time 参数，或者在代码中使用 set_time_limit() 函数来改变时间限制。</p>

<p>还有就是 php-fpm.conf 中的 request_terminate_timeout 参数如果配置了的话也需要修改。</p>

<h4 id="php-部分扩展存在问题">php 部分扩展存在问题</h4>

<p>比如在 ubuntu 服务器上，imagick 经常会因为一些软件的更新引发 core dump，重启服务器后才会恢复正常，此时如果 <code>phpinfo()</code> 都会抛出 502 的话，很可能就是该原因导致的。</p>
]]></content>
        </item>
        
        <item>
            <title>使用fiddler抓包安卓模拟器网络请求</title>
            <link>https://qxzzf.com/posts/%E4%BD%BF%E7%94%A8fiddler%E6%8A%93%E5%8C%85%E5%AE%89%E5%8D%93%E6%A8%A1%E6%8B%9F%E5%99%A8%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/</link>
            <pubDate>Sun, 21 May 2017 17:07:36 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E4%BD%BF%E7%94%A8fiddler%E6%8A%93%E5%8C%85%E5%AE%89%E5%8D%93%E6%A8%A1%E6%8B%9F%E5%99%A8%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82/</guid>
            <description>我用的是夜神模拟器，其他常见模拟器的抓包方式应该相同。
首先打开 fiddler，在 tools &amp;gt; fiddler options &amp;gt; connentions 选项卡中查看代理端口号（默认是 8888）以及是否勾选 Allow remote computers to connect （需勾选才行）。
然后回到模拟器，在模拟器的设置中选择 wlan，选择修改网络，将代理改为手动，ip 填写电脑的本地网络 ip，可以通过 ipconfig 命令查看，有可能会有几个内网 ip 地址，可以都试一下，端口为 fiddler 配置的端口号。
配置完成后安卓模拟器内访问网络应该就能看到请求了</description>
            <content type="html"><![CDATA[<p>我用的是夜神模拟器，其他常见模拟器的抓包方式应该相同。</p>

<p>首先打开 fiddler，在 tools &gt; fiddler options &gt; connentions 选项卡中查看代理端口号（默认是 8888）以及是否勾选 Allow remote computers to connect （需勾选才行）。</p>

<p>然后回到模拟器，在模拟器的设置中选择 wlan，选择修改网络，将代理改为手动，ip 填写电脑的本地网络 ip，可以通过 ipconfig 命令查看，有可能会有几个内网 ip 地址，可以都试一下，端口为 fiddler 配置的端口号。</p>

<p>配置完成后安卓模拟器内访问网络应该就能看到请求了</p>
]]></content>
        </item>
        
        <item>
            <title>国内前端公共静态资源库CDN服务整理</title>
            <link>https://qxzzf.com/posts/%E5%9B%BD%E5%86%85%E5%89%8D%E7%AB%AF%E5%85%AC%E5%85%B1%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%BA%93cdn%E6%9C%8D%E5%8A%A1%E6%95%B4%E7%90%86/</link>
            <pubDate>Sat, 20 May 2017 22:59:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E5%9B%BD%E5%86%85%E5%89%8D%E7%AB%AF%E5%85%AC%E5%85%B1%E9%9D%99%E6%80%81%E8%B5%84%E6%BA%90%E5%BA%93cdn%E6%9C%8D%E5%8A%A1%E6%95%B4%E7%90%86/</guid>
            <description>没有特别说明均支持 https
 360 - 支持 http/2 七牛 - 支持 ueditor CDNBee - 支持 HTTP/2 SPDY/3.1 新浪云 - 库比较少 BootCDN - 支持 http/2 极客标签 cdnjs  谷歌字体 cdn：
 360 中科大  已停运或无法使用：
 百度 旧版360  </description>
            <content type="html"><![CDATA[<p>没有特别说明均支持 https</p>

<ul>
<li><a href="https://cdn.baomitu.com/" target="_blank">360</a> - 支持 http/2</li>
<li><a href="http://staticfile.org/" target="_blank">七牛</a> - 支持 ueditor</li>
<li><a href="https://cdnbee.com/" target="_blank">CDNBee</a> - 支持 HTTP/2 SPDY/3.1</li>
<li><a href="http://lib.sinaapp.com/" target="_blank">新浪云</a> - 库比较少</li>
<li><a href="http://www.bootcdn.cn/" target="_blank">BootCDN</a> - 支持 http/2</li>
<li><a href="http://cdn.gbtags.com/index.html" target="_blank">极客标签</a></li>
<li><a href="http://libs.cdnjs.net/" target="_blank">cdnjs</a></li>
</ul>

<p>谷歌字体 cdn：</p>

<ul>
<li><a href="https://cdn.baomitu.com/" target="_blank">360</a></li>
<li><a href="https://lug.ustc.edu.cn/wiki/lug/services/googlefonts" target="_blank">中科大</a></li>
</ul>

<p>已停运或无法使用：</p>

<ul>
<li>百度</li>
<li>旧版360</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>关于MySQL存储时间字段的类型相关总结</title>
            <link>https://qxzzf.com/posts/%E5%85%B3%E4%BA%8Emysql%E5%AD%98%E5%82%A8%E6%97%B6%E9%97%B4%E5%AD%97%E6%AE%B5%E7%9A%84%E7%B1%BB%E5%9E%8B%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93/</link>
            <pubDate>Wed, 17 May 2017 15:25:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E5%85%B3%E4%BA%8Emysql%E5%AD%98%E5%82%A8%E6%97%B6%E9%97%B4%E5%AD%97%E6%AE%B5%E7%9A%84%E7%B1%BB%E5%9E%8B%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93/</guid>
            <description>一般我们用 MySQL 来存储时间时会考虑使用 datetime、timestamp、int 几种类型。
int 用 int 类型的字段时，我们一般是存储 10 位数字的时间戳，也可以用 bigint 存储精确到毫秒的时间戳。
优势：无关乎时区；占用存储空间小，查询效率稍高 劣势：可读性差
在一些数据量很大，对性能要求较高的场景可以考虑使用。
datetime datetime 类型在 MySQL 的不同版本直接有一定差异，
 MySQL 5.6.4 支持存储微秒，详见 MySQL 5.6.4 ChangeLog MySQL 5.6 支持默认值为 CURRENT_TIMESTAMP 和 NOW()  优势：不存在 2038 年问题；可读性高；时间精度高；不对时区处理，原样存储 劣势：性能稍差一些，不过随着 MySQL 性能越来越高，这点劣势也逐渐不重要起来
timestamp 劣势：存在 2038 年问题；时区存储存在转换
不太推荐使用
性能比较 MySQL 5.4 MyISAM
MySQL 5.4 InnoDB
MySQL Date Format: What Datatype Should You Use? We Compare Datetime, Timestamp and INT
参考文档：
MySQL存储时间用int、timestamp还是datetime?</description>
            <content type="html"><![CDATA[

<p>一般我们用 MySQL 来存储时间时会考虑使用 datetime、timestamp、int 几种类型。</p>

<h3 id="int">int</h3>

<p>用 int 类型的字段时，我们一般是存储 10 位数字的时间戳，也可以用 bigint 存储精确到毫秒的时间戳。</p>

<p>优势：无关乎时区；占用存储空间小，查询效率稍高
劣势：可读性差</p>

<p>在一些数据量很大，对性能要求较高的场景可以考虑使用。</p>

<h3 id="datetime">datetime</h3>

<p>datetime 类型在 MySQL 的不同版本直接有一定差异，</p>

<ul>
<li>MySQL 5.6.4 支持存储微秒，详见 <a href="http://dev.mysql.com/doc/refman/5.6/en/news-5-6-4.html" target="_blank">MySQL 5.6.4 ChangeLog</a></li>
<li>MySQL 5.6 支持默认值为 <code>CURRENT_TIMESTAMP</code> 和 <code>NOW()</code></li>
</ul>

<p>优势：不存在 <code>2038 年问题</code>；可读性高；时间精度高；不对时区处理，原样存储
劣势：性能稍差一些，不过随着 MySQL 性能越来越高，这点劣势也逐渐不重要起来</p>

<h3 id="timestamp">timestamp</h3>

<p>劣势：存在 <code>2038 年问题</code>；时区存储存在转换</p>

<p>不太推荐使用</p>

<h3 id="性能比较">性能比较</h3>

<p><a href="http://gpshumano.blogs.dri.pt/2009/07/06/mysql-datetime-vs-timestamp-vs-int-performance-and-benchmarking-with-myisam/" target="_blank">MySQL 5.4 MyISAM</a></p>

<p><a href="http://gpshumano.blogs.dri.pt/2009/07/06/mysql-datetime-vs-timestamp-vs-int-performance-and-benchmarking-with-innodb/" target="_blank">MySQL 5.4 InnoDB</a></p>

<p><a href="http://www.vertabelo.com/blog/technical-articles/what-datatype-should-you-use-to-represent-time-in-mysql-we-compare-datetime-timestamp-and-int" target="_blank">MySQL Date Format: What Datatype Should You Use? We Compare Datetime, Timestamp and INT</a></p>

<p>参考文档：</p>

<p><a href="http://codecloud.net/17541.html" target="_blank">MySQL存储时间用int、timestamp还是datetime?</a></p>
]]></content>
        </item>
        
        <item>
            <title>关于大学本科生读研还是就业的思考</title>
            <link>https://qxzzf.com/posts/%E5%85%B3%E4%BA%8E%E5%A4%A7%E5%AD%A6%E6%9C%AC%E7%A7%91%E7%94%9F%E8%AF%BB%E7%A0%94%E8%BF%98%E6%98%AF%E5%B0%B1%E4%B8%9A%E7%9A%84%E6%80%9D%E8%80%83/</link>
            <pubDate>Wed, 10 May 2017 20:38:14 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E5%85%B3%E4%BA%8E%E5%A4%A7%E5%AD%A6%E6%9C%AC%E7%A7%91%E7%94%9F%E8%AF%BB%E7%A0%94%E8%BF%98%E6%98%AF%E5%B0%B1%E4%B8%9A%E7%9A%84%E6%80%9D%E8%80%83/</guid>
            <description>最近咪蒙支持实习大学生休学的事情引起了广泛的讨论，在知乎上目前大面积都是反对和声讨咪蒙的各种答案和文章，我个人在这方面也是持反对意见的，由此引起了我对本科应届生是应该读研还是就业的一些思考。
我本人是十分讨厌念书和上学的，所以尽管学业成绩还算可以，在快毕业时也是果断地选择了就业。现在回过头来看当时的决定，虽然算不上后悔，但如果以目前的经历和心境再选择一次的话，至少不会那么地果断了。
工作两年多来，越发地觉得学历十分重要，这体现在很多方面，说两个有切身体会的吧。一个是目前在上海工作，对于一个普通学士学位的本科生来说想要拿到上海户口真是极难，身边很多在上海好些年的人都还是外地人，但对于研究生来说，博士可以直接落户，硕士落户也容易许多。另一个是自己在招人筛简历的时候，看到大专的基本都看一两眼就直接pass了，虽然说中小型公司招人也很困难，但有些供过于求的岗位，黄金时期一天几百封的简历，没有好的学历找工作时连面试机会都很难得。
所以对于现在还在上学的年轻的弟弟妹妹们，我建议如果你们不讨厌上学而且家庭条件也没什么制约的话，能获得更高的学历就尽量去继续学业吧，从个人的角度来看，按目前的趋势，学历以后可能越来越有用。
对于以后的目标不是继续在学术上深入而是工作和实用的研究生和准研究生，我建议多找机会做些实际项目，为以后的就业打下基础。在初学一些实用技术时，可以尝试实现一些自己的想法或一些常见的经典项目，如博客之类，等有开发基础项目的能力后就可以找实习或者兼职了，remote 的最好，各种技术社区可以多刷刷，像 v2ex、osc 的招聘区等等。</description>
            <content type="html"><![CDATA[<p>最近咪蒙支持实习大学生休学的事情引起了广泛的讨论，在知乎上目前大面积都是反对和声讨咪蒙的各种答案和文章，我个人在这方面也是持反对意见的，由此引起了我对本科应届生是应该读研还是就业的一些思考。</p>

<p>我本人是十分讨厌念书和上学的，所以尽管学业成绩还算可以，在快毕业时也是果断地选择了就业。现在回过头来看当时的决定，虽然算不上后悔，但如果以目前的经历和心境再选择一次的话，至少不会那么地果断了。</p>

<p>工作两年多来，越发地觉得学历十分重要，这体现在很多方面，说两个有切身体会的吧。一个是目前在上海工作，对于一个普通学士学位的本科生来说想要拿到上海户口真是极难，身边很多在上海好些年的人都还是外地人，但对于研究生来说，博士可以直接落户，硕士落户也容易许多。另一个是自己在招人筛简历的时候，看到大专的基本都看一两眼就直接pass了，虽然说中小型公司招人也很困难，但有些供过于求的岗位，黄金时期一天几百封的简历，没有好的学历找工作时连面试机会都很难得。</p>

<p>所以对于现在还在上学的年轻的弟弟妹妹们，我建议如果你们不讨厌上学而且家庭条件也没什么制约的话，能获得更高的学历就尽量去继续学业吧，从个人的角度来看，按目前的趋势，学历以后可能越来越有用。</p>

<p>对于以后的目标不是继续在学术上深入而是工作和实用的研究生和准研究生，我建议多找机会做些实际项目，为以后的就业打下基础。在初学一些实用技术时，可以尝试实现一些自己的想法或一些常见的经典项目，如博客之类，等有开发基础项目的能力后就可以找实习或者兼职了，remote 的最好，各种技术社区可以多刷刷，像 v2ex、osc 的招聘区等等。</p>
]]></content>
        </item>
        
        <item>
            <title>上海提取公积金交房租攻略</title>
            <link>https://qxzzf.com/posts/%E4%B8%8A%E6%B5%B7%E6%8F%90%E5%8F%96%E5%85%AC%E7%A7%AF%E9%87%91%E4%BA%A4%E6%88%BF%E7%A7%9F%E6%94%BB%E7%95%A5/</link>
            <pubDate>Tue, 18 Apr 2017 21:34:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E4%B8%8A%E6%B5%B7%E6%8F%90%E5%8F%96%E5%85%AC%E7%A7%AF%E9%87%91%E4%BA%A4%E6%88%BF%E7%A7%9F%E6%94%BB%E7%95%A5/</guid>
            <description> 参考：https://www.zhihu.com/question/42190921
办理流程 首先需要注意的是我是在浦城路812号的网点办的，其他区的网点貌似具体细节方面是不一样的。
办公积金提取交房租还是挺容易的，如果事先填好表格早点过去的化基本几分钟就办好了，需要注意的是只能工作日办理，周末是办不了的呦。
公积金管理中心早上 8:45 开始营业，十分准时，我八点半到的时候排队就已经拍了十几个接近二十个人了，但是很多人都没有事先填表格，所以进去拿号的时候已经填好表的基本能拿到第一批号。
需要资料 表格下载及填写指南 《提取住房公积金支付房屋租赁费用申请表》（个人版）
《房屋状况信息查询申请表》（提取住房公积金支付房屋租赁费用申请专用）
注意下面这张表中灰色的部分不要填，否则填错了就得拿表重新填一遍，还有就是千万不要涂改，有涂改也得重新填。
审核与发放时间及续办方式 业务网点 其他 </description>
            <content type="html"><![CDATA[

<p>参考：<a href="https://www.zhihu.com/question/42190921" target="_blank">https://www.zhihu.com/question/42190921</a></p>

<h3 id="办理流程">办理流程</h3>

<p>首先需要注意的是我是在浦城路812号的网点办的，其他区的网点貌似具体细节方面是不一样的。</p>

<p>办公积金提取交房租还是挺容易的，如果事先填好表格早点过去的化基本几分钟就办好了，需要注意的是只能工作日办理，周末是办不了的呦。</p>

<p>公积金管理中心早上 8:45 开始营业，十分准时，我八点半到的时候排队就已经拍了十几个接近二十个人了，但是很多人都没有事先填表格，所以进去拿号的时候已经填好表的基本能拿到第一批号。</p>

<h3 id="需要资料">需要资料</h3>

<p><img src="http://ww4.sinaimg.cn/large/a15b4afegy1fer52n49asj20k00zk753" alt="资料" /></p>

<h3 id="表格下载及填写指南">表格下载及填写指南</h3>

<p><a href="http://www.shgjj.com/html/zyxw/img/20150429103704619.doc" target="_blank">《提取住房公积金支付房屋租赁费用申请表》（个人版）</a></p>

<p><a href="http://www.shgjj.com/html/bgxz/img/20160713095918005.doc" target="_blank">《房屋状况信息查询申请表》（提取住房公积金支付房屋租赁费用申请专用）</a></p>

<p>注意下面这张表中灰色的部分不要填，否则填错了就得拿表重新填一遍，还有就是千万不要涂改，有涂改也得重新填。</p>

<p><img src="http://ww4.sinaimg.cn/large/a15b4afegy1fer513c2twj20k00zkdho" alt="http://ww4.sinaimg.cn/large/a15b4afegy1fer513c2twj20k00zkdho" /></p>

<p><img src="http://ww4.sinaimg.cn/large/a15b4afegy1fer57w37pfj20k00zkmya" alt="http://ww4.sinaimg.cn/large/a15b4afegy1fer57w37pfj20k00zkmya" /></p>

<p><img src="https://ooo.0o0.ooo/2017/04/18/58f6123248f72.jpeg" alt="WechatIMG2.jpeg" /></p>

<p><img src="https://ooo.0o0.ooo/2017/04/18/58f612767e9dc.jpeg" alt="WechatIMG10.jpeg" /></p>

<h3 id="审核与发放时间及续办方式">审核与发放时间及续办方式</h3>

<p><img src="https://ooo.0o0.ooo/2017/04/18/58f613708bd0c.jpeg" alt="WechatIMG8.jpeg" /></p>

<p><img src="https://ooo.0o0.ooo/2017/04/18/58f613a8727c3.jpeg" alt="WechatIMG5.jpeg" /></p>

<h3 id="业务网点">业务网点</h3>

<p><img src="https://ooo.0o0.ooo/2017/04/18/58f6142b761e3.jpeg" alt="WechatIMG4.jpeg" /></p>

<h3 id="其他">其他</h3>

<p><img src="https://ooo.0o0.ooo/2017/04/18/58f6148550278.jpeg" alt="WechatIMG7.jpeg" />
<img src="https://ooo.0o0.ooo/2017/04/18/58f61485520e6.jpeg" alt="WechatIMG6.jpeg" /></p>
]]></content>
        </item>
        
        <item>
            <title>今日头条使用体会</title>
            <link>https://qxzzf.com/posts/%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1%E4%BD%BF%E7%94%A8%E4%BD%93%E4%BC%9A/</link>
            <pubDate>Mon, 17 Apr 2017 12:45:22 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E4%BB%8A%E6%97%A5%E5%A4%B4%E6%9D%A1%E4%BD%BF%E7%94%A8%E4%BD%93%E4%BC%9A/</guid>
            <description>首先说下我使用今日头条的需求：
我希望能够每天收到自己所关注的领域内的数量不需要多但是质量和时效性较高的新闻。
但是使用一段时间之后发现头条满足不了我的需求，主要原因个人感觉是两点：
一是头条上的内容质量参差不齐而且很多重复性的文章，每天会有很多推荐但是大多数都质量一般甚至较差，或者是换个人又写了一遍同样的事情。
二是头条上的内容虽然涉及广泛，但缺少很多垂直领域的优质深入的文章，这就缺少了聚合的作用，我还是得到各式各样的平台上获取对应的内容。
总的来说，我现在只能把头条当作发现信息源的一个途径，发现优质信息源后我还是得到其他的平台进行订阅关注。</description>
            <content type="html"><![CDATA[<p>首先说下我使用今日头条的需求：</p>

<p>我希望能够每天收到自己所关注的领域内的数量不需要多但是质量和时效性较高的新闻。</p>

<p>但是使用一段时间之后发现头条满足不了我的需求，主要原因个人感觉是两点：</p>

<p>一是头条上的内容质量参差不齐而且很多重复性的文章，每天会有很多推荐但是大多数都质量一般甚至较差，或者是换个人又写了一遍同样的事情。</p>

<p>二是头条上的内容虽然涉及广泛，但缺少很多垂直领域的优质深入的文章，这就缺少了聚合的作用，我还是得到各式各样的平台上获取对应的内容。</p>

<p>总的来说，我现在只能把头条当作发现信息源的一个途径，发现优质信息源后我还是得到其他的平台进行订阅关注。</p>
]]></content>
        </item>
        
        <item>
            <title>过年过节期间等堵车通过苏通大桥的方式总结</title>
            <link>https://qxzzf.com/posts/%E8%BF%87%E5%B9%B4%E8%BF%87%E8%8A%82%E6%9C%9F%E9%97%B4%E7%AD%89%E5%A0%B5%E8%BD%A6%E9%80%9A%E8%BF%87%E8%8B%8F%E9%80%9A%E5%A4%A7%E6%A1%A5%E7%9A%84%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</link>
            <pubDate>Wed, 05 Apr 2017 09:22:29 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E8%BF%87%E5%B9%B4%E8%BF%87%E8%8A%82%E6%9C%9F%E9%97%B4%E7%AD%89%E5%A0%B5%E8%BD%A6%E9%80%9A%E8%BF%87%E8%8B%8F%E9%80%9A%E5%A4%A7%E6%A1%A5%E7%9A%84%E6%96%B9%E5%BC%8F%E6%80%BB%E7%BB%93/</guid>
            <description>博主老家如东，在上海工作。自从 2012 年那次中秋和国庆连在一起 8 天并且开始了高速节假日免费以来，我已经多次体验了苏通大桥的堵，也大体了解了一些过江的方式的优缺点。
直接主路上沈海高速 这种方式一般必然会在高速公路上经过较长的拥堵路段，但一般不会完全不动，而是会以很缓慢的速度半个身位半个身位地走。这种方式花的时间一般比完全不堵的情况下长 2 ~ 5 小时，看运气和堵的程度，最大的缺点就是走走停停对于开车和坐车的人都很累。
走城乡道路避开高架和高速上的拥堵路段 如果跟着导航走躲避拥堵路线一般就会进入城乡路，建议千万别跟着导航走，这种路一般特别难开，而且很多人都被导航导到这种路上了，导致你下去的时候还是绿的，走一会就变成红的了。最坑的是，从下面的路想要上高速在高峰期是会被限行的，三个方向的车汇入高速匝道时，一般按时间一波波地放行，半小时一波，走小路的话基本一个半小时到两个小时等到一波。这种方式一般要比正常慢 4 ~ 8 个小时，相对好点的就是人能在等的时候休息会。
走汽渡 最推荐这种方式，可选的汽渡包括：通沙汽渡、通常汽渡和海太汽渡，可能还有我不知道的汽渡。其中通沙汽渡因为离江阴大桥和苏通大桥都比较远（在建中的沪通大桥就在通沙汽渡旁边），人一般较少，就是稍微绕些。堵得厉害的时候汽渡排队也是要排一会的，但是比上面两种方式好太多，一般比正常时间多 1.5 ~ 2.5 小时，而且在轮船上的时候人正好能休息个半小时。</description>
            <content type="html"><![CDATA[

<p>博主老家如东，在上海工作。自从 2012 年那次中秋和国庆连在一起 8 天并且开始了高速节假日免费以来，我已经多次体验了苏通大桥的堵，也大体了解了一些过江的方式的优缺点。</p>

<h3 id="直接主路上沈海高速">直接主路上沈海高速</h3>

<p>这种方式一般必然会在高速公路上经过较长的拥堵路段，但一般不会完全不动，而是会以很缓慢的速度半个身位半个身位地走。这种方式花的时间一般比完全不堵的情况下长 2 ~ 5 小时，看运气和堵的程度，最大的缺点就是走走停停对于开车和坐车的人都很累。</p>

<h3 id="走城乡道路避开高架和高速上的拥堵路段">走城乡道路避开高架和高速上的拥堵路段</h3>

<p>如果跟着导航走躲避拥堵路线一般就会进入城乡路，建议千万别跟着导航走，这种路一般特别难开，而且很多人都被导航导到这种路上了，导致你下去的时候还是绿的，走一会就变成红的了。最坑的是，从下面的路想要上高速在高峰期是会被限行的，三个方向的车汇入高速匝道时，一般按时间一波波地放行，半小时一波，走小路的话基本一个半小时到两个小时等到一波。这种方式一般要比正常慢 4 ~ 8 个小时，相对好点的就是人能在等的时候休息会。</p>

<h3 id="走汽渡">走汽渡</h3>

<p>最推荐这种方式，可选的汽渡包括：通沙汽渡、通常汽渡和海太汽渡，可能还有我不知道的汽渡。其中通沙汽渡因为离江阴大桥和苏通大桥都比较远（在建中的沪通大桥就在通沙汽渡旁边），人一般较少，就是稍微绕些。堵得厉害的时候汽渡排队也是要排一会的，但是比上面两种方式好太多，一般比正常时间多 1.5 ~ 2.5 小时，而且在轮船上的时候人正好能休息个半小时。</p>
]]></content>
        </item>
        
        <item>
            <title>Windows 上切换 Jetbrains IDE 的 terminal 为 PowerShell 或 cmder</title>
            <link>https://qxzzf.com/posts/windows-%E4%B8%8A%E5%88%87%E6%8D%A2-jetbrains-ide-%E7%9A%84-terminal-%E4%B8%BA-powershell-%E6%88%96-cmder/</link>
            <pubDate>Fri, 31 Mar 2017 11:02:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/windows-%E4%B8%8A%E5%88%87%E6%8D%A2-jetbrains-ide-%E7%9A%84-terminal-%E4%B8%BA-powershell-%E6%88%96-cmder/</guid>
            <description>替换为 PowerShell 首先用管理员权限打开 PowerShell ，并运行以下命令：
Set-ExecutionPolicy Unrestricted  然后记住一定要打开 64 位的 IDE ，如 phpstorm64.exe，否则 PowerShell 会报 Cannot load PSReadLine module. Console is running without PSReadLine.。
在 File &amp;gt; Settings &amp;gt; Tools &amp;gt; Terminal 面板修改 Shell Path 为 powershell.exe 即可。
替换为 cmder 安装完成 cmder 后，需要设置环境变量 CMDER_ROOT，变量值为 cmder 安装目录。
然后在 Terminal 面板修改 Shell Path 为 &amp;quot;cmd.exe&amp;quot; /k &amp;quot;&amp;quot;%CMDER_ROOT%\vendor\init.bat&amp;quot;&amp;quot;。</description>
            <content type="html"><![CDATA[

<h3 id="替换为-powershell">替换为 PowerShell</h3>

<p>首先用管理员权限打开 PowerShell ，并运行以下命令：</p>

<pre><code>Set-ExecutionPolicy Unrestricted
</code></pre>

<p>然后记住一定要打开 64 位的 IDE ，如 <code>phpstorm64.exe</code>，否则 PowerShell 会报 <code>Cannot load PSReadLine module. Console is running without PSReadLine.</code>。</p>

<p>在 <code>File &gt; Settings &gt; Tools &gt; Terminal</code> 面板修改 <code>Shell Path</code> 为 <code>powershell.exe</code> 即可。</p>

<h3 id="替换为-cmder">替换为 cmder</h3>

<p>安装完成 cmder 后，需要设置环境变量 <code>CMDER_ROOT</code>，变量值为 cmder 安装目录。</p>

<p>然后在 <code>Terminal</code> 面板修改 <code>Shell Path</code> 为 <code>&quot;cmd.exe&quot; /k &quot;&quot;%CMDER_ROOT%\vendor\init.bat&quot;&quot;</code>。</p>
]]></content>
        </item>
        
        <item>
            <title>Mac下PHP开发环境配置</title>
            <link>https://qxzzf.com/posts/mac%E4%B8%8Bphp%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</link>
            <pubDate>Sun, 12 Mar 2017 11:18:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/mac%E4%B8%8Bphp%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</guid>
            <description>建议使用Homestead，Mac下的环境配置和Linux还是有不少区别，虽然比Windows是要好得多了。
OS X 使用 launchd 来管理启动项，与常见 Linux 的不同参见Mac OS X 的 Launch Daemon / Agent
参考资料： Mac下homebrew安装及php.mysql.nginx环境安装及配置 INSTALL NGINX, PHP AND MYSQL ON OS X</description>
            <content type="html"><![CDATA[<p>建议使用Homestead，Mac下的环境配置和Linux还是有不少区别，虽然比Windows是要好得多了。</p>

<p>OS X 使用 launchd 来管理启动项，与常见 Linux 的不同参见<a href="http://blog.csdn.net/left_la/article/details/40393057" target="_blank">Mac OS X 的 Launch Daemon / Agent</a></p>

<p>参考资料：
<a href="http://blog.qiji.tech/archives/132" target="_blank">Mac下homebrew安装及php.mysql.nginx环境安装及配置</a>
<a href="https://blog.frd.mn/install-nginx-php-fpm-mysql-and-phpmyadmin-on-os-x-mavericks-using-homebrew/" target="_blank">INSTALL NGINX, PHP AND MYSQL ON OS X</a></p>
]]></content>
        </item>
        
        <item>
            <title>通过docker安装gitlab</title>
            <link>https://qxzzf.com/posts/%E9%80%9A%E8%BF%87docker%E5%AE%89%E8%A3%85gitlab/</link>
            <pubDate>Wed, 01 Mar 2017 17:20:05 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E9%80%9A%E8%BF%87docker%E5%AE%89%E8%A3%85gitlab/</guid>
            <description>安装 docker engine 参见 官方文档
安装 docker compose 参见 官方文档
设置 docker 镜像 这里用的是 daocloud 提供的加速器：
curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://b62e767d.m.daocloud.io  使用 compose 启动 gitlab 容器 wget https://raw.githubusercontent.com/sameersbn/docker-gitlab/master/docker-compose.yml docker-compose up  注意修改 docker-compose.yml 中的配置项。</description>
            <content type="html"><![CDATA[

<h3 id="安装-docker-engine">安装 docker engine</h3>

<p>参见 <a href="https://docs.docker.com/engine/installation" target="_blank">官方文档</a></p>

<h3 id="安装-docker-compose">安装 docker compose</h3>

<p>参见 <a href="https://docs.docker.com/compose/install/" target="_blank">官方文档</a></p>

<h3 id="设置-docker-镜像">设置 docker 镜像</h3>

<p>这里用的是 daocloud 提供的加速器：</p>

<pre><code>curl -sSL https://get.daocloud.io/daotools/set_mirror.sh | sh -s http://b62e767d.m.daocloud.io
</code></pre>

<h3 id="使用-compose-启动-gitlab-容器">使用 compose 启动 gitlab 容器</h3>

<pre><code>wget https://raw.githubusercontent.com/sameersbn/docker-gitlab/master/docker-compose.yml
docker-compose up
</code></pre>

<p>注意修改 docker-compose.yml 中的配置项。</p>
]]></content>
        </item>
        
        <item>
            <title>第三方登录和支付开发记录</title>
            <link>https://qxzzf.com/posts/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E5%92%8C%E6%94%AF%E4%BB%98%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/</link>
            <pubDate>Tue, 21 Feb 2017 09:19:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E7%AC%AC%E4%B8%89%E6%96%B9%E7%99%BB%E5%BD%95%E5%92%8C%E6%94%AF%E4%BB%98%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/</guid>
            <description>登录 微信登录 微信登录需要注意的一点是微信的网页应用、移动应用、公众号的上限都是10个，所有同一个账号下的应用获取到的 union_id 是相同的，open_id 不同，所以需注意应用数量是否会超过上限。
微信登录目前只有APP登录、扫码登录和公众号登录三种登录方式，在微信浏览器内打开网页使用的是公众号登录的方式，其他浏览器只能使用扫码登录，换句话说目前移动端非微信浏览器打开的网页基本无法使用微信登录。
微信登录所需的信息基本在微信开放平台中，open.weixin.qq.com。新建应用需经过审核，一般两三个工作日内就会有反应，修改信息后需要重新审核的情况下，应用会以此次修改信息之前的状态正常运行，所以不必担心上线后改动应用基本信息。
扫码登录 使用场景为pc端浏览器打开网页时用手机扫描二维码进行登录，移动段浏览器虽然也可以通过将图片保存下来后使用微信扫描等方式实现登录，但是十分不方便而且成功率较低。
https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;amp;t=resource/res_list&amp;amp;verify=1&amp;amp;id=open1419316505&amp;amp;token=37dc565662c0fbc0f5c485f884f25f4da6f01b19&amp;amp;lang=zh_CN
公众号登录 使用场景为通过微信自带浏览器打开网页时唤起微信授权登录页面进行授权登录。
文档见 https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;amp;id=mp1445241432&amp;amp;token=&amp;amp;lang=zh_CN 中的微信网页授权章节。
公众号登录的一个神奇疑似bug：
 https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxa77178c0a05b6498&amp;amp;redirect_uri=http%3A%2F%2Fh5.2144.com%2Fsite%2Fauth%3Fauthclient%3Dweixin-mp&amp;amp;scope=snsapi_userinfo&amp;amp;response_type=code
https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxa77178c0a05b6498&amp;amp;response_type=code&amp;amp;redirect_uri=http%3A%2F%2Fh5.2144.com%2Fsite%2Fauth%3Fauthclient%3Dweixin-mp&amp;amp;scope=snsapi_userinfo
 上面两个链接除了参数的顺序不同之外完全相同，但是上面那个链接可以正常显示授权页面，下面那个则不可以，具体触发原因不明(貌似appid和redirect_uri不相邻则不行)，貌似下面那个链接非百分百无法访问。～～这个问题简直搞死我了～～
原生APP登录 移动端通过sdk进行登录后就能获取到所需的用户信息，然后客户端把这些信息传给服务端，服务端相比前两种方式省去了通过授权码获取用户信息的步骤。
https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;amp;t=resource/res_list&amp;amp;verify=1&amp;amp;id=open1419317851&amp;amp;token=41d9521a6fd56f08d54a099d4952c5fecaa86441&amp;amp;lang=zh_CN
QQ登录 QQ登录如果要做平台化的话，需要用union_id，union_id需要发邮件申请打通应用间数据才能获取到。
QQ登录所需的信息在QQ互联：https://connect.qq.com/中，而不是QQ开放平台。如果是公司使用，建议不要使用个人账号进行注册，否则会带来很多麻烦。
微博登录（待续） 支付 支付宝支付 即时到账 https://doc.open.alipay.com/docs/doc.htm?treeId=108&amp;amp;articleId=103950&amp;amp;docType=1
手机网站支付 https://doc.open.alipay.com/docs/doc.htm?treeId=193&amp;amp;articleId=105288&amp;amp;docType=1
APP支付 https://doc.open.alipay.com/docs/doc.htm?treeId=204&amp;amp;articleId=105051&amp;amp;docType=1
微信支付 扫码支付 https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=6_1
该支付方式适用于在pc网页上显示支付二维码进行扫码支付的场景。
公众号支付 https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_1
该方式适用于使用微信自带浏览器打开网页时进行支付的场景。
APP支付 https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=8_1
该支付方式适用于原生APP内进行支付的场景。
H5支付 https://pay.weixin.qq.com/wiki/doc/api/wap.php?chapter=15_1
该支付方式适用于手机普通浏览器打开网页时进行支付的场景，但是改方式腾讯还在内测中，只开放给特定商户使用。详见：非微信内wap版微信支付。</description>
            <content type="html"><![CDATA[

<h2 id="登录">登录</h2>

<h3 id="微信登录">微信登录</h3>

<p>微信登录需要注意的一点是微信的网页应用、移动应用、公众号的上限都是10个，所有同一个账号下的应用获取到的 <code>union_id</code> 是相同的，<code>open_id</code> 不同，所以需注意应用数量是否会超过上限。</p>

<p>微信登录目前只有APP登录、扫码登录和公众号登录三种登录方式，在微信浏览器内打开网页使用的是公众号登录的方式，其他浏览器只能使用扫码登录，换句话说目前移动端非微信浏览器打开的网页基本无法使用微信登录。</p>

<p>微信登录所需的信息基本在微信开放平台中，<a href="open.weixin.qq.com" target="_blank">open.weixin.qq.com</a>。新建应用需经过审核，一般两三个工作日内就会有反应，修改信息后需要重新审核的情况下，应用会以此次修改信息之前的状态正常运行，所以不必担心上线后改动应用基本信息。</p>

<h4 id="扫码登录">扫码登录</h4>

<p>使用场景为pc端浏览器打开网页时用手机扫描二维码进行登录，移动段浏览器虽然也可以通过将图片保存下来后使用微信扫描等方式实现登录，但是十分不方便而且成功率较低。</p>

<p><a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419316505&amp;token=37dc565662c0fbc0f5c485f884f25f4da6f01b19&amp;lang=zh_CN" target="_blank">https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419316505&amp;token=37dc565662c0fbc0f5c485f884f25f4da6f01b19&amp;lang=zh_CN</a></p>

<h4 id="公众号登录">公众号登录</h4>

<p>使用场景为通过微信自带浏览器打开网页时唤起微信授权登录页面进行授权登录。</p>

<p>文档见 <a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1445241432&amp;token=&amp;lang=zh_CN" target="_blank">https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1445241432&amp;token=&amp;lang=zh_CN</a> 中的<code>微信网页授权章节</code>。</p>

<p><strong>公众号登录的一个神奇疑似bug：</strong></p>

<blockquote>
<p><a href="https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxa77178c0a05b6498&amp;redirect_uri=http%3A%2F%2Fh5.2144.com%2Fsite%2Fauth%3Fauthclient%3Dweixin-mp&amp;scope=snsapi_userinfo&amp;response_type=code" target="_blank">https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxa77178c0a05b6498&amp;redirect_uri=http%3A%2F%2Fh5.2144.com%2Fsite%2Fauth%3Fauthclient%3Dweixin-mp&amp;scope=snsapi_userinfo&amp;response_type=code</a></p>

<p><a href="https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxa77178c0a05b6498&amp;response_type=code&amp;redirect_uri=http%3A%2F%2Fh5.2144.com%2Fsite%2Fauth%3Fauthclient%3Dweixin-mp&amp;scope=snsapi_userinfo" target="_blank">https://open.weixin.qq.com/connect/oauth2/authorize?appid=wxa77178c0a05b6498&amp;response_type=code&amp;redirect_uri=http%3A%2F%2Fh5.2144.com%2Fsite%2Fauth%3Fauthclient%3Dweixin-mp&amp;scope=snsapi_userinfo</a></p>
</blockquote>

<p>上面两个链接除了参数的顺序不同之外完全相同，但是上面那个链接可以正常显示授权页面，下面那个则不可以，具体触发原因不明(貌似appid和redirect_uri不相邻则不行)，貌似下面那个链接非百分百无法访问。～～这个问题简直搞死我了～～</p>

<h4 id="原生app登录">原生APP登录</h4>

<p>移动端通过sdk进行登录后就能获取到所需的用户信息，然后客户端把这些信息传给服务端，服务端相比前两种方式省去了通过授权码获取用户信息的步骤。</p>

<p><a href="https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419317851&amp;token=41d9521a6fd56f08d54a099d4952c5fecaa86441&amp;lang=zh_CN" target="_blank">https://open.weixin.qq.com/cgi-bin/showdocument?action=dir_list&amp;t=resource/res_list&amp;verify=1&amp;id=open1419317851&amp;token=41d9521a6fd56f08d54a099d4952c5fecaa86441&amp;lang=zh_CN</a></p>

<h3 id="qq登录">QQ登录</h3>

<p>QQ登录如果要做平台化的话，需要用<code>union_id</code>，<code>union_id</code>需要发邮件申请打通应用间数据才能获取到。</p>

<p>QQ登录所需的信息在QQ互联：<a href="https://connect.qq.com/" target="_blank">https://connect.qq.com/</a>中，而不是QQ开放平台。如果是公司使用，建议不要使用个人账号进行注册，否则会带来很多麻烦。</p>

<h3 id="微博登录-待续">微博登录（待续）</h3>

<h2 id="支付">支付</h2>

<h3 id="支付宝支付">支付宝支付</h3>

<h4 id="即时到账">即时到账</h4>

<p><a href="https://doc.open.alipay.com/docs/doc.htm?treeId=108&amp;articleId=103950&amp;docType=1" target="_blank">https://doc.open.alipay.com/docs/doc.htm?treeId=108&amp;articleId=103950&amp;docType=1</a></p>

<h4 id="手机网站支付">手机网站支付</h4>

<p><a href="https://doc.open.alipay.com/docs/doc.htm?treeId=193&amp;articleId=105288&amp;docType=1" target="_blank">https://doc.open.alipay.com/docs/doc.htm?treeId=193&amp;articleId=105288&amp;docType=1</a></p>

<h4 id="app支付">APP支付</h4>

<p><a href="https://doc.open.alipay.com/docs/doc.htm?treeId=204&amp;articleId=105051&amp;docType=1" target="_blank">https://doc.open.alipay.com/docs/doc.htm?treeId=204&amp;articleId=105051&amp;docType=1</a></p>

<h3 id="微信支付">微信支付</h3>

<h4 id="扫码支付">扫码支付</h4>

<p><a href="https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=6_1" target="_blank">https://pay.weixin.qq.com/wiki/doc/api/native.php?chapter=6_1</a></p>

<p>该支付方式适用于在pc网页上显示支付二维码进行扫码支付的场景。</p>

<h4 id="公众号支付">公众号支付</h4>

<p><a href="https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_1" target="_blank">https://pay.weixin.qq.com/wiki/doc/api/jsapi.php?chapter=7_1</a></p>

<p>该方式适用于使用微信自带浏览器打开网页时进行支付的场景。</p>

<h4 id="app支付-1">APP支付</h4>

<p><a href="https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=8_1" target="_blank">https://pay.weixin.qq.com/wiki/doc/api/app/app.php?chapter=8_1</a></p>

<p>该支付方式适用于原生APP内进行支付的场景。</p>

<h4 id="h5支付">H5支付</h4>

<p><a href="https://pay.weixin.qq.com/wiki/doc/api/wap.php?chapter=15_1" target="_blank">https://pay.weixin.qq.com/wiki/doc/api/wap.php?chapter=15_1</a></p>

<p>该支付方式适用于手机普通浏览器打开网页时进行支付的场景，但是改方式腾讯还在内测中，只开放给特定商户使用。详见：<a href="http://www.xxdafa.com/article?id=56965123b8063f1a058b456f" target="_blank">非微信内wap版微信支付</a>。</p>
]]></content>
        </item>
        
        <item>
            <title>Yii2 使用jsonp格式response时遇到的一个坑</title>
            <link>https://qxzzf.com/posts/yii2-%E4%BD%BF%E7%94%A8jsonp%E6%A0%BC%E5%BC%8Fresponse%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/</link>
            <pubDate>Mon, 20 Feb 2017 09:18:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/yii2-%E4%BD%BF%E7%94%A8jsonp%E6%A0%BC%E5%BC%8Fresponse%E6%97%B6%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%B8%AA%E5%9D%91/</guid>
            <description>最近的一个项目在实现前后端分离时，由于调用域名与接口域名可能不相同，所以使用了jsonp格式进行返回，但是在开发环境上开了debug的情况下遇到500错误时竟然没有任何错误显示，也即response body是空的，这让我很困扰。
通过查看 Yii 写的文件日志发现，这是 Yii 在默认的 ErrorHandler 中没有对 jsonp 格式返回进行特殊处理造成的，于是便在 github 上提了一个 issue。从回复来看，一年前就有人修改了jsonp的formatter的实现，不过由于会破坏兼容性，所以一直没正式接收。话说原本的jsonp实现方式实在是太坑了，和其他几种Formatter的实现不一致，使用起来很不方便，希望Yii官方早点改掉吧。</description>
            <content type="html"><![CDATA[<p>最近的一个项目在实现前后端分离时，由于调用域名与接口域名可能不相同，所以使用了<code>jsonp</code>格式进行返回，但是在开发环境上开了<code>debug</code>的情况下遇到500错误时竟然没有任何错误显示，也即<code>response body</code>是空的，这让我很困扰。</p>

<p>通过查看 <code>Yii</code> 写的文件日志发现，这是 <code>Yii</code> 在默认的 <code>ErrorHandler</code> 中没有对 <code>jsonp</code> 格式返回进行特殊处理造成的，于是便在 <code>github</code> 上提了一个 <a href="https://github.com/yiisoft/yii2/issues/13563" target="_blank">issue</a>。从回复来看，一年前就有人修改了<code>jsonp</code>的<code>formatter</code>的实现，不过由于会破坏兼容性，所以一直没正式接收。话说原本的<code>jsonp</code>实现方式实在是太坑了，和其他几种<code>Formatter</code>的实现不一致，使用起来很不方便，希望<code>Yii</code>官方早点改掉吧。</p>
]]></content>
        </item>
        
        <item>
            <title>华为手机售后维修经历</title>
            <link>https://qxzzf.com/posts/%E5%8D%8E%E4%B8%BA%E6%89%8B%E6%9C%BA%E5%94%AE%E5%90%8E%E7%BB%B4%E4%BF%AE%E7%BB%8F%E5%8E%86/</link>
            <pubDate>Sun, 12 Feb 2017 18:39:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E5%8D%8E%E4%B8%BA%E6%89%8B%E6%9C%BA%E5%94%AE%E5%90%8E%E7%BB%B4%E4%BF%AE%E7%BB%8F%E5%8E%86/</guid>
            <description>浦东南路店的预约比较火爆，休息日基本要提前三天才能预约到，即周三预约周六。
整体门店给人的感觉和移动之类的营业厅类似，进门先取号，如果预约过的话就是优先处理号。柜员问清楚问题，交代好情况后会把手机sim取出，并给一张取机凭证，然后将手机交给技术人员维修，之后就不需要来这边了。
技术人员的维修室是一个单独的房间，如果修理过程中遇到需要用户反馈的话，技术人员会出来喊名字。我的这台机子有摔过几次，关键还进水了，没法保修，修的话还有报废风险，技术人员就出来找我说了，然后就没修。
之后就是继续坐着等了，门店里有一个专门的取机的地方，一样是喊名字。我等的时候貌似正好碰到华为手机产品线的一个领导层（后来看了荣耀的发布会发现他是荣耀的总裁赵明）来维修点了解用户的维修和反馈相关的情况，聊了一会关于华为的手机和 emui 5.0 的看法和意见建议之类的。
总的来说，虽然手机没能修好，不过华为的售后维修流程和服务还算比较满意。</description>
            <content type="html"><![CDATA[<p>浦东南路店的预约比较火爆，休息日基本要提前三天才能预约到，即周三预约周六。</p>

<p>整体门店给人的感觉和移动之类的营业厅类似，进门先取号，如果预约过的话就是优先处理号。柜员问清楚问题，交代好情况后会把手机sim取出，并给一张取机凭证，然后将手机交给技术人员维修，之后就不需要来这边了。</p>

<p>技术人员的维修室是一个单独的房间，如果修理过程中遇到需要用户反馈的话，技术人员会出来喊名字。我的这台机子有摔过几次，关键还进水了，没法保修，修的话还有报废风险，技术人员就出来找我说了，然后就没修。</p>

<p>之后就是继续坐着等了，门店里有一个专门的取机的地方，一样是喊名字。我等的时候貌似正好碰到华为手机产品线的一个领导层（后来看了荣耀的发布会发现他是荣耀的总裁赵明）来维修点了解用户的维修和反馈相关的情况，聊了一会关于华为的手机和 emui 5.0 的看法和意见建议之类的。</p>

<p>总的来说，虽然手机没能修好，不过华为的售后维修流程和服务还算比较满意。</p>
]]></content>
        </item>
        
        <item>
            <title>追日剧和动画的相关站点整理</title>
            <link>https://qxzzf.com/posts/%E8%BF%BD%E6%97%A5%E5%89%A7%E5%92%8C%E5%8A%A8%E7%94%BB%E7%9A%84%E7%9B%B8%E5%85%B3%E7%AB%99%E7%82%B9%E6%95%B4%E7%90%86/</link>
            <pubDate>Mon, 30 Jan 2017 16:33:43 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E8%BF%BD%E6%97%A5%E5%89%A7%E5%92%8C%E5%8A%A8%E7%94%BB%E7%9A%84%E7%9B%B8%E5%85%B3%E7%AB%99%E7%82%B9%E6%95%B4%E7%90%86/</guid>
            <description>日剧 看评分：一般豆瓣上看日剧小站的豆列，不过不知道为什么16年底的时候好像停更了。
看列表：隐社
资源：B站一般挺全的，如果B站没有就去A站看看，如果A站还是没有就在看列表用的隐社上找到对应的字幕组的页面去下载资源。
动画 看评分：一般豆瓣上看不擅长的豆列，或者去番组计划查看对应时间的动画评分。
看列表：番组放送
资源：还是优先AB站，AB站没有又不想支持正版的话，就D站或者弹弹play</description>
            <content type="html"><![CDATA[

<h2 id="日剧">日剧</h2>

<p>看评分：一般豆瓣上看<a href="https://www.douban.com/people/JTVdrama/" target="_blank">日剧小站</a>的豆列，不过不知道为什么16年底的时候好像停更了。</p>

<p>看列表：<a href="http://www.hideystudio.com/" target="_blank">隐社</a></p>

<p>资源：<a href="http://www.bilibili.com/video/soap-three-1.html#!page=1&amp;tagid=5608&amp;tag=%E6%97%A5%E5%89%A7" target="_blank">B站</a>一般挺全的，如果B站没有就去<a href="http://www.acfun.cn/v/list162/index.htm" target="_blank">A站</a>看看，如果A站还是没有就在看列表用的隐社上找到对应的字幕组的页面去下载资源。</p>

<h2 id="动画">动画</h2>

<p>看评分：一般豆瓣上看<a href="https://www.douban.com/people/L5.P4/" target="_blank">不擅长</a>的豆列，或者去<a href="http://bangumi.tv/anime/browser/airtime/2017-1" target="_blank">番组计划</a>查看对应时间的动画评分。</p>

<p>看列表：<a href="https://bgmlist.com/" target="_blank">番组放送</a></p>

<p>资源：还是优先AB站，AB站没有又不想支持正版的话，就<a href="http://www.dilidili.wang/" target="_blank">D站</a>或者<a href="http://www.dandanplay.com/" target="_blank">弹弹play</a></p>
]]></content>
        </item>
        
        <item>
            <title>自己构思的微信红包真心话大冒险规则</title>
            <link>https://qxzzf.com/posts/%E8%87%AA%E5%B7%B1%E6%9E%84%E6%80%9D%E7%9A%84%E5%BE%AE%E4%BF%A1%E7%BA%A2%E5%8C%85%E7%9C%9F%E5%BF%83%E8%AF%9D%E5%A4%A7%E5%86%92%E9%99%A9%E8%A7%84%E5%88%99/</link>
            <pubDate>Sat, 28 Jan 2017 10:38:03 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E8%87%AA%E5%B7%B1%E6%9E%84%E6%80%9D%E7%9A%84%E5%BE%AE%E4%BF%A1%E7%BA%A2%E5%8C%85%E7%9C%9F%E5%BF%83%E8%AF%9D%E5%A4%A7%E5%86%92%E9%99%A9%E8%A7%84%E5%88%99/</guid>
            <description>春节期间在家，同事和朋友群里发红包和聊天都很high，于是想了一个基于微信和微信红包的真心话大冒险规则：
 每局开始参与的人每人扔一个骰子， 骰子点数最小的发红包，红包人数为本轮掷骰子人数， 所有参与抢红包的默认参与下一轮游戏，不参加的话至少抢到的红包金额三倍发出， 抢到手气最佳的选择真心话或者大冒险， 点数最大的决定真心话大冒险的内容， 当点数最大和手气最佳为同一人时由发红包者即点数最小者决定内容， 手气最佳者可以选择三倍发出拼手气红包以pass，或者三倍单个红包找接盘侠， 单个红包领了必须进行真心话大冒险，不能pass或者再次找接盘侠。  备注： - 具体金额和倍率可由参与者自行确定 - 真心话建议发语音以防止撤回前被截图 - 红包数量从外表是看不出来的，所以可以诈pass实则找接盘侠</description>
            <content type="html"><![CDATA[<p>春节期间在家，同事和朋友群里发红包和聊天都很high，于是想了一个基于微信和微信红包的真心话大冒险规则：</p>

<ul>
<li>每局开始参与的人每人扔一个骰子，</li>
<li>骰子点数最小的发红包，红包人数为本轮掷骰子人数，</li>
<li>所有参与抢红包的默认参与下一轮游戏，不参加的话至少抢到的红包金额三倍发出，</li>
<li>抢到手气最佳的选择真心话或者大冒险，</li>
<li>点数最大的决定真心话大冒险的内容，</li>
<li>当点数最大和手气最佳为同一人时由发红包者即点数最小者决定内容，</li>
<li>手气最佳者可以选择三倍发出拼手气红包以pass，或者三倍单个红包找接盘侠，</li>
<li>单个红包领了必须进行真心话大冒险，不能pass或者再次找接盘侠。</li>
</ul>

<p>备注：
- 具体金额和倍率可由参与者自行确定
- 真心话建议发语音以防止撤回前被截图
- 红包数量从外表是看不出来的，所以可以诈pass实则找接盘侠</p>
]]></content>
        </item>
        
        <item>
            <title>PHP项目开发实践总结内部分享大纲</title>
            <link>https://qxzzf.com/posts/php%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93%E5%86%85%E9%83%A8%E5%88%86%E4%BA%AB%E5%A4%A7%E7%BA%B2/</link>
            <pubDate>Thu, 15 Dec 2016 11:44:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/php%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E5%AE%9E%E8%B7%B5%E6%80%BB%E7%BB%93%E5%86%85%E9%83%A8%E5%88%86%E4%BA%AB%E5%A4%A7%E7%BA%B2/</guid>
            <description>项目部署相关  项目命名： 域名中 . 替换为 _，如： app.domain.com 项目名为 app_domain_com。关于分支，deploy分支用于部署到正式环境，如有测试环境的需要可以添加test分支，如果测试环境对稳定性有需求的话可以开develop分支，如果是多人协作的项目中有周期较长的功能模块需要开发则可以单独新开分支。 所有在上线时需要忽略的文件都写到.gitignore里，这样运维在配置发布系统时也比较方便 如果开启了 opcache，则每次新代码上线之后都需要清空 opcache 缓存（service php-fpm reload 或者通过调用cgi的opcache），否则上线后没有效果。 如果在composer.json中添加了自定义的自动加载项，如使用了git subtree的情况下，每次上线后可能都需要重新 composer dump-autoload 一遍。该问题可复现，但具体出现原因不明 服务器若仅有内网，外网是通过proxy进行访问的情况下需注意代码的行为可能会和预期的不一致（主要curl等操作） 服务器在使用了内网namedserver的情况下，如果 nginx 使用unix socket的方式调用php-fpm的话，可能不生效  性能优化相关  php7（php 各版本新特性的分享中提到过 php7 的性能对照） opcache（开启了 opcache 的 php7 才能展现出真正的高性能） composer dump-autoload -o （能一定程度上提升第三方库的加载效率，尤其是在未开启 opcache 的情况下） 项目配置（如主要提供 api 的项目可以关闭 session 以提升性能） redis/memcache缓存（尤其适用于查询接口较多的项目，性能提升明显）  静态资源部署  protocol relative url（方便地切换 http 和 https） 版本号（日期时间序列或hash） 静态资源域名采用特定的静态资源域名，防止 cookie 过大对加载时间造成影响 浏览器对相同域名的并发连接数限制，一般浏览器是6个，http2是一个服务器一个连接而不是一个资源一个连接所以对于复杂页面性能提升很大，http2的硬性要求是https  编码风格相关  php-cs-fixer用法，已分享 phpstorm自带代码风格检查设置，Settings &amp;gt; Editor &amp;gt; Code Style &amp;gt; PHP &amp;gt; Set from&amp;hellip;，快捷键（windows Ctrl + Alt + L）  数据库设计相关  数据一致性要求不严格的场景下不要使用外键、unique等，在代码中进行逻辑控制，这一点在快速迭代的项目中尤其适用 联合索引的第一列如果不能将范围缩至六分之一（具体数字记不得了）以内则会全表扫描 数据库字符集utf8mb4加索引时需注意varchar类型的长度，mysql索引长度最多1000字节，varchar类型默认长度255，utf8mb4的情况下最多占用1020字节超出限制，migration运行会报错 collate中unicode_ci和general_ci的注意点，查询时的相等判定（1和①，A和À） 表名和字段名无特殊含义或专有名词的情况下建议使用单数形式，如：user、game 所有资源类的数据表都可能会需要如下字段： created_at、created_by、updated_at、updated_by，这些字段在yii2的model中可以通过 TimestampBehavior、BlameableBehavior进行自动控制。 status字段表示软删除，引用SoftDeleteTrait即可</description>
            <content type="html"><![CDATA[

<h3 id="项目部署相关">项目部署相关</h3>

<ul>
<li>项目命名： 域名中 <code>.</code> 替换为 <code>_</code>，如： <code>app.domain.com</code> 项目名为 <code>app_domain_com</code>。关于分支，<code>deploy</code>分支用于部署到正式环境，如有测试环境的需要可以添加<code>test</code>分支，如果测试环境对稳定性有需求的话可以开<code>develop</code>分支，如果是多人协作的项目中有周期较长的功能模块需要开发则可以单独新开分支。</li>
<li>所有在上线时需要忽略的文件都写到<code>.gitignore</code>里，这样运维在配置发布系统时也比较方便</li>
<li>如果开启了 opcache，则每次新代码上线之后都需要清空 opcache 缓存（<code>service php-fpm reload</code> 或者通过调用cgi的opcache），否则上线后没有效果。</li>
<li>如果在<code>composer.json</code>中添加了自定义的自动加载项，如使用了git subtree的情况下，每次上线后可能都需要重新 <code>composer dump-autoload</code> 一遍。该问题可复现，但具体出现原因不明</li>
<li>服务器若仅有内网，外网是通过proxy进行访问的情况下需注意代码的行为可能会和预期的不一致（主要curl等操作）</li>
<li>服务器在使用了内网<code>namedserver</code>的情况下，如果 nginx 使用<code>unix socket</code>的方式调用<code>php-fpm</code>的话，可能不生效</li>
</ul>

<h3 id="性能优化相关">性能优化相关</h3>

<ul>
<li>php7（php 各版本新特性的分享中提到过 php7 的性能对照）</li>
<li>opcache（开启了 opcache 的 php7 才能展现出真正的高性能）</li>
<li>composer dump-autoload -o （能一定程度上提升第三方库的加载效率，尤其是在未开启 opcache 的情况下）</li>
<li>项目配置（如主要提供 api 的项目可以关闭 session 以提升性能）</li>
<li>redis/memcache缓存（尤其适用于查询接口较多的项目，性能提升明显）</li>
</ul>

<h3 id="静态资源部署">静态资源部署</h3>

<ul>
<li>protocol relative url（方便地切换 http 和 https）</li>
<li>版本号（日期时间序列或hash）</li>
<li>静态资源域名采用特定的静态资源域名，防止 cookie 过大对加载时间造成影响</li>
<li>浏览器对相同域名的并发连接数限制，一般浏览器是6个，http2是一个服务器一个连接而不是一个资源一个连接所以对于复杂页面性能提升很大，http2的硬性要求是https</li>
</ul>

<h3 id="编码风格相关">编码风格相关</h3>

<ul>
<li>php-cs-fixer用法，已分享</li>
<li>phpstorm自带代码风格检查设置，Settings &gt; Editor &gt; Code Style &gt; PHP &gt; Set from&hellip;，快捷键（windows Ctrl + Alt + L）</li>
</ul>

<h3 id="数据库设计相关">数据库设计相关</h3>

<ul>
<li>数据一致性要求不严格的场景下不要使用外键、unique等，在代码中进行逻辑控制，这一点在快速迭代的项目中尤其适用</li>
<li>联合索引的第一列如果不能将范围缩至六分之一（具体数字记不得了）以内则会全表扫描</li>
<li>数据库字符集utf8mb4加索引时需注意varchar类型的长度，mysql索引长度最多1000字节，varchar类型默认长度255，utf8mb4的情况下最多占用1020字节超出限制，migration运行会报错</li>
<li>collate中unicode_ci和general_ci的注意点，查询时的相等判定（<code>1</code>和<code>①</code>，<code>A</code>和<code>À</code>）</li>
<li>表名和字段名无特殊含义或专有名词的情况下建议使用单数形式，如：user、game</li>

<li><p>所有资源类的数据表都可能会需要如下字段：
created_at、created_by、updated_at、updated_by，这些字段在yii2的model中可以通过
TimestampBehavior、BlameableBehavior进行自动控制。
status字段表示软删除，引用SoftDeleteTrait即可</p></li>

<li><p>表示与其他表id字段进行关联的字段建议命名为：表名_id，如：user_id、category_id，代码中对id的命名也建议采用如：\$user_id，$userId 之类的方式避免产生混淆</p></li>

<li><p>需要与其他表进行关联的字段添加索引时，两表中的对应字段类型应保持一致</p></li>
</ul>

<h3 id="composer相关">composer相关</h3>

<ul>
<li>使用国内镜像进行加速，<a href="http://pkg.phpcomposer.com/" target="_blank">http://pkg.phpcomposer.com/</a></li>
<li>composer根目录路径不要有中文（windows环境上），否则会出现一些问题。修改composer默认根目录可以通过设置<code>COMPOSER_HOME</code>实现</li>
<li>composer.json中常见配置字段含义和作用讲解，composer.lock文件的作用讲解(minimum-stability、require版本通配符、require-dev、autoload、scripts、extra)</li>
</ul>

<h3 id="yii2框架相关">yii2框架相关</h3>

<ul>
<li>何时采用basic模板何时采用advanced模板，在session分离并且数据互通的情况下应采用多应用端的advanced模板结构，若session互通则使用basic模板分模块进行开发</li>
<li>Model中rules、behaviors、scenarios作用和相互之间的联系</li>
<li>Model中的relations使用</li>
<li>Components的编写和使用（<a href="https://github.com/takashiki/yii2-ide-helper）" target="_blank">https://github.com/takashiki/yii2-ide-helper）</a></li>
<li>Controller中responseFormat的使用</li>
<li>ActiveQuery中使用<code>-&gt;limit(1)-&gt;one()</code>来提升性能</li>
</ul>

<h3 id="设计模式相关">设计模式相关</h3>

<ul>
<li>工厂模式，在有完善的依赖注入框架的情况下使用场景较少</li>
<li>单列模式，维护配置文件、数据字典等仍会经常用到</li>
<li>策略模式（框架的缓存实现）</li>
<li>适配器模式（不同游戏的进入游戏加币等）</li>
</ul>

<h3 id="学习相关">学习相关</h3>

<p>最快的提升方式就是去看别人的优质代码：</p>

<p><a href="https://github.com/trending" target="_blank">https://github.com/trending</a>
<a href="https://github.com/ziadoz/awesome-php" target="_blank">https://github.com/ziadoz/awesome-php</a>
<a href="http://www.phptherightway.com/" target="_blank">http://www.phptherightway.com/</a>
<a href="https://github.com/domnikl/DesignPatternsPHP" target="_blank">https://github.com/domnikl/DesignPatternsPHP</a>
<a href="http://www.digpage.com/" target="_blank">http://www.digpage.com/</a>
<a href="https://github.com/samdark/yii2-cookbook" target="_blank">https://github.com/samdark/yii2-cookbook</a>
<a href="https://github.com/forecho/awesome-yii2" target="_blank">https://github.com/forecho/awesome-yii2</a>
<a href="http://www.yiichina.com/" target="_blank">http://www.yiichina.com/</a>
<a href="https://getyii.com/" target="_blank">https://getyii.com/</a>
<a href="http://laravelacademy.org/" target="_blank">http://laravelacademy.org/</a>
<a href="https://laravel-china.org/" target="_blank">https://laravel-china.org/</a>
<a href="http://www.laruence.com/" target="_blank">http://www.laruence.com/</a></p>

<p>PHP基础的提升则要多看官方手册：
<a href="http://php.net/" target="_blank">http://php.net/</a></p>

<p>建议多看英文文档，英文文档在即时性、准确性和详细程度上一般都有优势，PHP官方文档也是如此，比如：
<a href="http://php.net/manual/en/function.serialize.php" target="_blank">http://php.net/manual/en/function.serialize.php</a>
<a href="http://php.net/manual/zh/function.serialize.php" target="_blank">http://php.net/manual/zh/function.serialize.php</a></p>
]]></content>
        </item>
        
        <item>
            <title>分享一个自写的Yii2扩展——Yii2 IDE Helper</title>
            <link>https://qxzzf.com/posts/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E8%87%AA%E5%86%99%E7%9A%84yii2%E6%89%A9%E5%B1%95yii2-ide-helper/</link>
            <pubDate>Wed, 23 Nov 2016 09:21:29 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E8%87%AA%E5%86%99%E7%9A%84yii2%E6%89%A9%E5%B1%95yii2-ide-helper/</guid>
            <description>虽然github上已经有了几个yii2的ide helper，如：https://github.com/iiifx-production/yii2-autocomplete-helper，不过自己使用下来感觉不是特别好用，于是便自己实现了一个：https://github.com/takashiki/yii2-ide-helper。
使用说明：
安装 用以下命令添加 composer 依赖:
composer require mis/yii2-ide-helper --dev  或者在 composer.json 文件的 require-dev 中添加如下内容后执行 composer update
&amp;quot;mis/yii2-ide-helper&amp;quot;: &amp;quot;*&amp;quot;  使用 把如下配置加入应用的 console 配置文件中：
&#39;bootstrap&#39; =&amp;gt; [&#39;log&#39;, &#39;ideHelper&#39;], ... &#39;components&#39; =&amp;gt; [ &#39;ideHelper&#39; =&amp;gt; [ &#39;class&#39; =&amp;gt; &#39;Mis\IdeHelper\IdeHelper&#39;, ], ... ],  之后就可以通过如下命令生成 IDE Helper 文件了:
php yii ide-helper/generate  可选配置列表 &#39;ideHelper&#39; =&amp;gt; [ &#39;class&#39; =&amp;gt; &#39;Mis\IdeHelper\IdeHelper&#39;, &#39;filename&#39; =&amp;gt; &#39;_ide_helper&#39;, &#39;format&#39; =&amp;gt; &#39;php&#39;, &#39;rootDir&#39; =&amp;gt; dirname(__DIR__), &#39;configFiles&#39; =&amp;gt; [ &#39;console/config/main.</description>
            <content type="html"><![CDATA[

<p>虽然github上已经有了几个yii2的ide helper，如：<a href="https://github.com/iiifx-production/yii2-autocomplete-helper，不过自己使用下来感觉不是特别好用，于是便自己实现了一个：https://github.com/takashiki/yii2-ide-helper。" target="_blank">https://github.com/iiifx-production/yii2-autocomplete-helper，不过自己使用下来感觉不是特别好用，于是便自己实现了一个：https://github.com/takashiki/yii2-ide-helper。</a></p>

<p>使用说明：</p>

<h3 id="安装">安装</h3>

<p>用以下命令添加 composer 依赖:</p>

<pre><code>composer require mis/yii2-ide-helper --dev
</code></pre>

<p>或者在 composer.json 文件的 <code>require-dev</code> 中添加如下内容后执行 <code>composer update</code></p>

<pre><code>&quot;mis/yii2-ide-helper&quot;: &quot;*&quot;
</code></pre>

<h3 id="使用">使用</h3>

<p>把如下配置加入应用的 console 配置文件中：</p>

<pre><code class="language-php">'bootstrap' =&gt; ['log', 'ideHelper'],
...
'components' =&gt; [
    'ideHelper' =&gt; [
        'class' =&gt; 'Mis\IdeHelper\IdeHelper',
    ],
  ...
],
</code></pre>

<p>之后就可以通过如下命令生成 IDE Helper 文件了:</p>

<pre><code>php yii ide-helper/generate
</code></pre>

<h3 id="可选配置列表">可选配置列表</h3>

<pre><code class="language-php">'ideHelper' =&gt; [
    'class' =&gt; 'Mis\IdeHelper\IdeHelper',
    'filename' =&gt; '_ide_helper',
    'format' =&gt; 'php',
    'rootDir' =&gt; dirname(__DIR__),
    'configFiles' =&gt; [
        'console/config/main.php',
        'console/config/main-local.php',
    ],
],
</code></pre>

<p>默认配置文件路径:</p>

<pre><code class="language-php">protected $defaultConfigFiles = [
    'config/web.php',
    'config/main.php',
    'config/main-local.php',
    'common/config/main.php',
    'common/config/main-local.php',
    'frontend/config/main.php',
    'frontend/config/main-local.php',
    'backend/config/main.php',
    'backend/config/main-local.php',
];
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>小鸟云香港国际简单评测</title>
            <link>https://qxzzf.com/posts/%E5%B0%8F%E9%B8%9F%E4%BA%91%E9%A6%99%E6%B8%AF%E5%9B%BD%E9%99%85%E7%AE%80%E5%8D%95%E8%AF%84%E6%B5%8B/</link>
            <pubDate>Thu, 03 Nov 2016 10:14:40 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E5%B0%8F%E9%B8%9F%E4%BA%91%E9%A6%99%E6%B8%AF%E5%9B%BD%E9%99%85%E7%AE%80%E5%8D%95%E8%AF%84%E6%B5%8B/</guid>
            <description> ping 上海电信 UnixBench </description>
            <content type="html"><![CDATA[

<h2 id="ping">ping</h2>

<p>上海电信
<img src="https://ooo.0o0.ooo/2016/11/03/581a9da4d5829.png" alt="QQ截图20161103100132.png" /></p>

<h2 id="unixbench">UnixBench</h2>

<p><img src="https://ooo.0o0.ooo/2016/11/03/581a9dc4eeea9.png" alt="QQ截图20161103101238.png" /></p>
]]></content>
        </item>
        
        <item>
            <title>使用phpbrew管理php版本</title>
            <link>https://qxzzf.com/posts/%E4%BD%BF%E7%94%A8phpbrew%E7%AE%A1%E7%90%86php%E7%89%88%E6%9C%AC/</link>
            <pubDate>Sun, 09 Oct 2016 13:50:26 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E4%BD%BF%E7%94%A8phpbrew%E7%AE%A1%E7%90%86php%E7%89%88%E6%9C%AC/</guid>
            <description>参考文档：http://rmingwang.com/php-version-management-phpenv.html
安装
curl -L -O https://github.com/phpbrew/phpbrew/raw/master/phpbrew chmod +x phpbrew sudo mv phpbrew /usr/bin/phpbrew  初始化
phpbrew init sudo vim ~/.bashrc #文件最后,插入下面这行代码 source ~/.phpbrew/bashrc  安装php版本
phpbrew known phpbrew install 7.0.11 +default +fpm +pdo +mysql +sqlite +gd  初步用下来感觉不是特别好用，建议使用docker。</description>
            <content type="html"><![CDATA[<p>参考文档：<a href="http://rmingwang.com/php-version-management-phpenv.html" target="_blank">http://rmingwang.com/php-version-management-phpenv.html</a></p>

<p>安装</p>

<pre><code class="language-shell">curl -L -O https://github.com/phpbrew/phpbrew/raw/master/phpbrew
chmod +x phpbrew
sudo mv phpbrew /usr/bin/phpbrew
</code></pre>

<p>初始化</p>

<pre><code class="language-shell">phpbrew init

sudo vim ~/.bashrc
#文件最后,插入下面这行代码
source ~/.phpbrew/bashrc
</code></pre>

<p>安装php版本</p>

<pre><code class="language-shell">phpbrew known

phpbrew install 7.0.11 +default +fpm +pdo +mysql +sqlite +gd
</code></pre>

<p>初步用下来感觉不是特别好用，建议使用docker。</p>
]]></content>
        </item>
        
        <item>
            <title>Gulp本地开发环境配置记录</title>
            <link>https://qxzzf.com/posts/gulp%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</link>
            <pubDate>Tue, 27 Sep 2016 17:16:02 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/gulp%E6%9C%AC%E5%9C%B0%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</guid>
            <description>首先安装 node 和 npm，这个之前写文章记录过：https://blog.skyx.in/archives/206/。
然后在项目下编写 package.js ，执行 npm install 安装依赖包。
安装 browser-sync :
npm install browser-sync --save-dev  本地 gulp 命令行版本最好是 4.0 的，否则有些项目会报错。
如果是在没有图形界面的机器上，有可能会报
gulp-notify: [Error in notifier] Error in plugin &#39;gulp-notify&#39; not found: notify-send  此时安装 libnotify-bin 即可：
apt-get install libnotify-bin  </description>
            <content type="html"><![CDATA[<p>首先安装 node 和 npm，这个之前写文章记录过：<a href="https://blog.skyx.in/archives/206/" target="_blank">https://blog.skyx.in/archives/206/</a>。</p>

<p>然后在项目下编写 package.js ，执行 <code>npm install</code> 安装依赖包。</p>

<p>安装 <code>browser-sync</code> :</p>

<pre><code class="language-shell">npm install browser-sync --save-dev
</code></pre>

<p>本地 <code>gulp</code> 命令行版本最好是 <code>4.0</code> 的，否则有些项目会报错。</p>

<p>如果是在没有图形界面的机器上，有可能会报</p>

<pre><code class="language-shell">gulp-notify: [Error in notifier] Error in plugin 'gulp-notify'
not found: notify-send
</code></pre>

<p>此时安装 <code>libnotify-bin</code> 即可：</p>

<pre><code class="language-shell">apt-get install libnotify-bin
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>PHP修改apk文件的comment实现</title>
            <link>https://qxzzf.com/posts/php%E4%BF%AE%E6%94%B9apk%E6%96%87%E4%BB%B6%E7%9A%84comment%E5%AE%9E%E7%8E%B0/</link>
            <pubDate>Tue, 20 Sep 2016 21:24:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/php%E4%BF%AE%E6%94%B9apk%E6%96%87%E4%BB%B6%E7%9A%84comment%E5%AE%9E%E7%8E%B0/</guid>
            <description>参考链接： 一种动态为apk写入信息的方案
apk文件本身即为zip文件，在PHP中可以使用 ZipArchive 类中的 setArchiveComment 方法方便地设置 apk 的 comment 内容。
也可以使用 fseek 和 fwrite 来参照上述文章原理实现：
$comment = &#39;123测试&#39;; $file = fopen(&#39;R:\1.apk&#39;, &#39;r+&#39;); fseek($file, -2, SEEK_END); fwrite($file, pack(&#39;s&#39;, mb_strlen($comment, &#39;8bit&#39;))); fwrite($file, $comment); fclose($file); $zip = new ZipArchive(); $zip-&amp;gt;open(&#39;R:\1.apk&#39;); var_dump($zip-&amp;gt;getArchiveComment()); //$zip-&amp;gt;setArchiveComment($comment); //var_dump($zip-&amp;gt;getArchiveComment()); $zip-&amp;gt;close();  </description>
            <content type="html"><![CDATA[<p>参考链接：
<a href="http://pingguohe.net/2016/03/21/Dynimac-write-infomation-into-apk.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank">一种动态为apk写入信息的方案</a></p>

<p>apk文件本身即为zip文件，在PHP中可以使用 <code>ZipArchive</code> 类中的 <code>setArchiveComment</code> 方法方便地设置 apk 的 comment 内容。</p>

<p>也可以使用 <code>fseek</code> 和 <code>fwrite</code> 来参照上述文章原理实现：</p>

<pre><code class="language-php">$comment = '123测试';

$file = fopen('R:\1.apk', 'r+');
fseek($file, -2, SEEK_END);
fwrite($file, pack('s', mb_strlen($comment, '8bit')));
fwrite($file, $comment);
fclose($file);

$zip = new ZipArchive();

$zip-&gt;open('R:\1.apk');
var_dump($zip-&gt;getArchiveComment());
//$zip-&gt;setArchiveComment($comment);
//var_dump($zip-&gt;getArchiveComment());
$zip-&gt;close();
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Ubuntu上Mysql5.7完全重新安装并修改数据目录方法</title>
            <link>https://qxzzf.com/posts/ubuntu%E4%B8%8Amysql5.7%E5%AE%8C%E5%85%A8%E9%87%8D%E6%96%B0%E5%AE%89%E8%A3%85%E5%B9%B6%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95%E6%96%B9%E6%B3%95/</link>
            <pubDate>Wed, 07 Sep 2016 21:04:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/ubuntu%E4%B8%8Amysql5.7%E5%AE%8C%E5%85%A8%E9%87%8D%E6%96%B0%E5%AE%89%E8%A3%85%E5%B9%B6%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95%E6%96%B9%E6%B3%95/</guid>
            <description>最近感觉vps上系统盘的剩余空间不多了，想要把一些站点数据迁移到数据盘上，而且原来编译安装的mysql占用的冗余空间太多，想要改成直接apt安装的，结果出现了一些问题，想来还是应该先做单机主从然后切换的。
一.操作前先备份（重要） 二.完全卸载之前的mysql安装 apt remove --purge mysql* apt autoremove apt autoclean rm -rf /etc/mysql /var/lib/mysql  如果数据需要保留的话就不删数据目录，这一步很重要的就是需要确认做完后服务器上还有没有mysql相关的任何文件，最好直接 find / -name &#39;&#39;找一下所有的my.cnf、mysql，包含配置文件的需要全部删除才行。
三.重新安装mysql apt install mysql-server  四.修改数据目录，步骤如下： 原先参考的国内的一些资料都失败了，原因就是最关键的修改 apparmor 配置没做。
1.停止mysql服务（如果没有新数据写入也可以不停机）
2.复制mysql数据目录，注意使用参数 -arp 保留目录权限设置
3.修改mysql配置文件 my.cnf(ubuntu16.04 的 5.7 版本的路径为/etc/mysql/mysql.conf.d/mysqld.cnf)中的datadir
4.修改 /etc/apparmor.d/usr.sbin.mysqld 中的数据路径
5.重启 apparmor 服务
6.重启 msyql 服务
参考链接：
http://stackoverflow.com/questions/1795176/how-to-change-mysql-data-directory</description>
            <content type="html"><![CDATA[

<p>最近感觉vps上系统盘的剩余空间不多了，想要把一些站点数据迁移到数据盘上，而且原来编译安装的mysql占用的冗余空间太多，想要改成直接apt安装的，结果出现了一些问题，想来还是应该先做单机主从然后切换的。</p>

<h3 id="一-操作前先备份-重要">一.操作前先备份（重要）</h3>

<h3 id="二-完全卸载之前的mysql安装">二.完全卸载之前的mysql安装</h3>

<pre><code>apt remove --purge mysql*
apt autoremove
apt autoclean
rm -rf /etc/mysql /var/lib/mysql
</code></pre>

<p>如果数据需要保留的话就不删数据目录，这一步很重要的就是需要确认做完后服务器上还有没有mysql相关的任何文件，最好直接
<code>find / -name ''</code>找一下所有的<code>my.cnf</code>、<code>mysql</code>，包含配置文件的需要全部删除才行。</p>

<h3 id="三-重新安装mysql">三.重新安装mysql</h3>

<pre><code>apt install mysql-server
</code></pre>

<h3 id="四-修改数据目录-步骤如下">四.修改数据目录，步骤如下：</h3>

<p>原先参考的国内的一些资料都失败了，原因就是最关键的修改 apparmor 配置没做。</p>

<p>1.停止mysql服务（如果没有新数据写入也可以不停机）</p>

<p>2.复制mysql数据目录，注意使用参数 <code>-arp</code> 保留目录权限设置</p>

<p>3.修改mysql配置文件 <code>my.cnf</code>(ubuntu16.04 的 5.7 版本的路径为<code>/etc/mysql/mysql.conf.d/mysqld.cnf</code>)中的datadir</p>

<p>4.修改 <code>/etc/apparmor.d/usr.sbin.mysqld</code> 中的数据路径</p>

<p>5.重启 apparmor 服务</p>

<p>6.重启 msyql 服务</p>

<p>参考链接：</p>

<p><a href="http://stackoverflow.com/questions/1795176/how-to-change-mysql-data-directory" target="_blank">http://stackoverflow.com/questions/1795176/how-to-change-mysql-data-directory</a></p>
]]></content>
        </item>
        
        <item>
            <title>上海考驾照记录</title>
            <link>https://qxzzf.com/posts/%E4%B8%8A%E6%B5%B7%E8%80%83%E9%A9%BE%E7%85%A7%E8%AE%B0%E5%BD%95/</link>
            <pubDate>Fri, 02 Sep 2016 20:26:17 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E4%B8%8A%E6%B5%B7%E8%80%83%E9%A9%BE%E7%85%A7%E8%AE%B0%E5%BD%95/</guid>
            <description>考驾照之前就觉得自己不适合开车，所以想着学车能够慢慢来，多学一点，然后就选择了在上海本地考试，但真正学起车来才发现和自己想象中完全不一样，于是将自己的经验总结分享出来给大家做个参考。
首先人在上海想要考驾照大方向上基本有两种选择，一是上海学车外地考试，二是上海学车上海考试。这两种方式的优缺点如下：
上海学车外地考试
*优点*：
 周期短，拿证快
 难度相对上海稍低一些
  缺点
 虽然学费便宜，但是来回车费、住宿费等需另算，若补考则成本较高
 每次考试需去外地，路上花的时间相对比较多
  上海学车上海考试
优点
 学车可以慢慢来，不需太着急
 路上花的时间稍微少些
 补考成本相对低一些
  缺点
 由于排队人多，所以周期长，拿证慢
 由于大多数考场都在及其偏远的郊区，所以比去外地也只是好那么一点点
 上海的模拟费等很高，而且参加第一场考试几乎必须前一天住在附近
  然后就是驾校的选择了，一直听说北京的东方时尚驾校评价非常好，然而上海却没有这种广受好评的驾校，所以选择的时候就比较麻烦了。 不过总的原则就是千万别选一些野鸡驾校，也就是整个驾校员工加老板就几个人的那种。这种驾校都是想当于大驾校的外包，这种和总的驾校中间隔着一层的关系真心麻烦。而且很多大驾校不仅学费相对便宜还包接送，最重要的是学车的时候相对正规，不容易出现一个车上很多人，去一天还学不到一小时的情况。另外大驾校有的是有自有考点的，模拟练车什么的都相对方便。
现在上海考试约考都是网上约考了，不过考点并不是随便约的，也得跟驾校确认好考点。自主约考的成功与否是看个人的排队优先序号的，只需确认好自己的考点每周几约考就行，约完考试后5个工作日出结果，为了能按自己预期的时间考试，基本得提前两三周约考才行。
上海的考试车模拟费很贵，但是并不实用，不如租车在考场跑几圈，效果更好，考试车模拟一次就够了。
最后要说的是，练得好不一定考得过，考得过不一定练得好，不管练得如何、考没考过都和真正开车不是一码事，老司机不是驾校教出来的，还是得靠自己多开。</description>
            <content type="html"><![CDATA[<p>考驾照之前就觉得自己不适合开车，所以想着学车能够慢慢来，多学一点，然后就选择了在上海本地考试，但真正学起车来才发现和自己想象中完全不一样，于是将自己的经验总结分享出来给大家做个参考。</p>

<p>首先人在上海想要考驾照大方向上基本有两种选择，一是上海学车外地考试，二是上海学车上海考试。这两种方式的优缺点如下：</p>

<p><strong>上海学车外地考试</strong></p>

<p>*优点*：</p>

<ul>
<li><p>周期短，拿证快</p></li>

<li><p>难度相对上海稍低一些</p></li>
</ul>

<p><em>缺点</em></p>

<ul>
<li><p>虽然学费便宜，但是来回车费、住宿费等需另算，若补考则成本较高</p></li>

<li><p>每次考试需去外地，路上花的时间相对比较多</p></li>
</ul>

<p><strong>上海学车上海考试</strong></p>

<p><em>优点</em></p>

<ul>
<li><p>学车可以慢慢来，不需太着急</p></li>

<li><p>路上花的时间稍微少些</p></li>

<li><p>补考成本相对低一些</p></li>
</ul>

<p><em>缺点</em></p>

<ul>
<li><p>由于排队人多，所以周期长，拿证慢</p></li>

<li><p>由于大多数考场都在及其偏远的郊区，所以比去外地也只是好那么一点点</p></li>

<li><p>上海的模拟费等很高，而且参加第一场考试几乎必须前一天住在附近</p></li>
</ul>

<p>然后就是驾校的选择了，一直听说北京的东方时尚驾校评价非常好，然而上海却没有这种广受好评的驾校，所以选择的时候就比较麻烦了。
不过总的原则就是千万别选一些野鸡驾校，也就是整个驾校员工加老板就几个人的那种。这种驾校都是想当于大驾校的外包，这种和总的驾校中间隔着一层的关系真心麻烦。而且很多大驾校不仅学费相对便宜还包接送，最重要的是学车的时候相对正规，不容易出现一个车上很多人，去一天还学不到一小时的情况。另外大驾校有的是有自有考点的，模拟练车什么的都相对方便。</p>

<p>现在上海考试约考都是网上约考了，不过考点并不是随便约的，也得跟驾校确认好考点。自主约考的成功与否是看个人的排队优先序号的，只需确认好自己的考点每周几约考就行，约完考试后5个工作日出结果，为了能按自己预期的时间考试，基本得提前两三周约考才行。</p>

<p>上海的考试车模拟费很贵，但是并不实用，不如租车在考场跑几圈，效果更好，考试车模拟一次就够了。</p>

<p>最后要说的是，练得好不一定考得过，考得过不一定练得好，不管练得如何、考没考过都和真正开车不是一码事，老司机不是驾校教出来的，还是得靠自己多开。</p>
]]></content>
        </item>
        
        <item>
            <title>PHP in_array、array_key_exists、isset效率测试脚本</title>
            <link>https://qxzzf.com/posts/php-in_arrayarray_key_existsisset%E6%95%88%E7%8E%87%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%AC/</link>
            <pubDate>Mon, 15 Aug 2016 16:59:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/php-in_arrayarray_key_existsisset%E6%95%88%E7%8E%87%E6%B5%8B%E8%AF%95%E8%84%9A%E6%9C%AC/</guid>
            <description>&amp;lt;?php $elemCount = 1000; $repeatCount = 1000000; $vArr = range(1, $elemCount); $kArr = array_flip($vArr); $start = microtime(true); for ($i = 0; $i &amp;lt; $repeatCount; $i++) { in_array($i, $vArr); } $inArrTime = microtime(true) - $start; echo &amp;quot;in_array:{$inArrTime}&amp;lt;br&amp;gt;&amp;quot;; $start = microtime(true); for ($i = 0; $i &amp;lt; $repeatCount; $i++) { array_key_exists($i, $kArr); } $keyTime = microtime(true) - $start; echo &amp;quot;array_key_exists:{$keyTime}&amp;lt;br&amp;gt;&amp;quot;; $start = microtime(true); for ($i = 0; $i &amp;lt; $repeatCount; $i++) { isset($kArr[$i]); } $issetTime = microtime(true) - $start; echo &amp;quot;isset:{$issetTime}&amp;lt;br&amp;gt;&amp;quot;;  测试结果：</description>
            <content type="html"><![CDATA[<pre><code class="language-php">&lt;?php
$elemCount = 1000;
$repeatCount = 1000000;

$vArr = range(1, $elemCount);
$kArr = array_flip($vArr);

$start = microtime(true);
for ($i = 0; $i &lt; $repeatCount; $i++) {
    in_array($i, $vArr);
}
$inArrTime = microtime(true) - $start;
echo &quot;in_array:{$inArrTime}&lt;br&gt;&quot;;

$start = microtime(true);
for ($i = 0; $i &lt; $repeatCount; $i++) {
    array_key_exists($i, $kArr);
}
$keyTime = microtime(true) - $start;
echo &quot;array_key_exists:{$keyTime}&lt;br&gt;&quot;;

$start = microtime(true);
for ($i = 0; $i &lt; $repeatCount; $i++) {
    isset($kArr[$i]);
}
$issetTime = microtime(true) - $start;
echo &quot;isset:{$issetTime}&lt;br&gt;&quot;;
</code></pre>

<p>测试结果：</p>

<pre><code>in_array:1.6679329872131
array_key_exists:0.23828101158142
isset:0.022069931030273
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>部署系统 Walle 在使用中遇到的一些问题吐槽</title>
            <link>https://qxzzf.com/posts/%E9%83%A8%E7%BD%B2%E7%B3%BB%E7%BB%9F-walle-%E5%9C%A8%E4%BD%BF%E7%94%A8%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E5%90%90%E6%A7%BD/</link>
            <pubDate>Wed, 27 Jul 2016 09:06:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E9%83%A8%E7%BD%B2%E7%B3%BB%E7%BB%9F-walle-%E5%9C%A8%E4%BD%BF%E7%94%A8%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98%E5%90%90%E6%A7%BD/</guid>
            <description>最近公司在用 walle ，感觉很不理解为什么一个用 yii2 开发的部署系统对 yii2 这么不友好，每次新项目上线都得配好久，新手得两天左右，总结下来坑如下：
1.各种文件需要新版发布时保持原样，就得 cp 来 cp 去，尤其使用 yii2-advanced 的人应该深有体会
2.由于使用了软链，所以开了 opcache 的话新版上线需要 reload php-fpm ，或者其他方式重置 opcache ，原因是 opcache 解析的文件路径是 realpath
3.如果使用了 git subtree 之类的需要自己在 composer 里添加 autoload 规则的东西，每次新版上线必须 composer dump-autoload ，具体原理不明
……好像还有其他的来着
关于PHP代码发布有一篇不错的文章： http://huoding.com/2016/05/27/515，十分推荐。</description>
            <content type="html"><![CDATA[<p>最近公司在用 walle ，感觉很不理解为什么一个用 yii2 开发的部署系统对 yii2 这么不友好，每次新项目上线都得配好久，新手得两天左右，总结下来坑如下：</p>

<p>1.各种文件需要新版发布时保持原样，就得 cp 来 cp 去，尤其使用 yii2-advanced 的人应该深有体会</p>

<p>2.由于使用了软链，所以开了 opcache 的话新版上线需要 reload php-fpm ，或者其他方式重置 opcache ，原因是 opcache 解析的文件路径是 realpath</p>

<p>3.如果使用了 git subtree 之类的需要自己在 composer 里添加 autoload 规则的东西，每次新版上线必须 composer dump-autoload ，具体原理不明</p>

<p>……好像还有其他的来着</p>

<p>关于PHP代码发布有一篇不错的文章： <a href="http://huoding.com/2016/05/27/515" target="_blank">http://huoding.com/2016/05/27/515</a>，十分推荐。</p>
]]></content>
        </item>
        
        <item>
            <title>分享一个简单的图片多点存储及可用性保障系统</title>
            <link>https://qxzzf.com/posts/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%9B%BE%E7%89%87%E5%A4%9A%E7%82%B9%E5%AD%98%E5%82%A8%E5%8F%8A%E5%8F%AF%E7%94%A8%E6%80%A7%E4%BF%9D%E9%9A%9C%E7%B3%BB%E7%BB%9F/</link>
            <pubDate>Sat, 23 Jul 2016 21:48:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E5%88%86%E4%BA%AB%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%9B%BE%E7%89%87%E5%A4%9A%E7%82%B9%E5%AD%98%E5%82%A8%E5%8F%8A%E5%8F%AF%E7%94%A8%E6%80%A7%E4%BF%9D%E9%9A%9C%E7%B3%BB%E7%BB%9F/</guid>
            <description>https://github.com/takashiki/image-force
基于 Laravel 开发，图片上传后将会异步上传至多个图床，访问图片时302到图片真实地址并异步进行图片可用性检测。
实现基本功能后就不想继续写了（葛优瘫），后续可能继续完善。
专门为小站点设计的图片存储方案，不适合其他场景。</description>
            <content type="html"><![CDATA[<p><a href="https://github.com/takashiki/image-force" target="_blank">https://github.com/takashiki/image-force</a></p>

<p>基于 Laravel 开发，图片上传后将会异步上传至多个图床，访问图片时302到图片真实地址并异步进行图片可用性检测。</p>

<p>实现基本功能后就不想继续写了（葛优瘫），后续可能继续完善。</p>

<p>专门为小站点设计的图片存储方案，不适合其他场景。</p>
]]></content>
        </item>
        
        <item>
            <title>Ubuntu 安装 Kong 和 Cassandra</title>
            <link>https://qxzzf.com/posts/ubuntu-%E5%AE%89%E8%A3%85-kong-%E5%92%8C-cassandra/</link>
            <pubDate>Wed, 20 Jul 2016 17:46:58 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/ubuntu-%E5%AE%89%E8%A3%85-kong-%E5%92%8C-cassandra/</guid>
            <description>参考链接：
https://getkong.org/install/ubuntu/ https://www.digitalocean.com/community/tutorials/how-to-install-cassandra-and-run-a-single-node-cluster-on-ubuntu-14-04
安装 Kong ：
apt update apt upgrade apt install netcat openssl libpcre3 dnsmasq procps wget https://github.com/Mashape/kong/releases/download/0.8.3/kong-0.8.3.xenial_all.deb dpkg -i kong-0.8.3.xenial_all.deb  安装 Cassandra ：
echo &amp;quot;deb http://www.apache.org/dist/cassandra/debian 22x main&amp;quot; | sudo tee -a /etc/apt/sources.list.d/cassandra.sources.list echo &amp;quot;deb-src http://www.apache.org/dist/cassandra/debian 22x main&amp;quot; | sudo tee -a /etc/apt/sources.list.d/cassandra.sources.list gpg --keyserver pgp.mit.edu --recv-keys F758CE318D77295D gpg --export --armor F758CE318D77295D | sudo apt-key add - gpg --keyserver pgp.mit.edu --recv-keys 2B5C1B00 gpg --export --armor 2B5C1B00 | sudo apt-key add - gpg --keyserver pgp.</description>
            <content type="html"><![CDATA[<p>参考链接：</p>

<p><a href="https://getkong.org/install/ubuntu/" target="_blank">https://getkong.org/install/ubuntu/</a>
<a href="https://www.digitalocean.com/community/tutorials/how-to-install-cassandra-and-run-a-single-node-cluster-on-ubuntu-14-04" target="_blank">https://www.digitalocean.com/community/tutorials/how-to-install-cassandra-and-run-a-single-node-cluster-on-ubuntu-14-04</a></p>

<p>安装 Kong ：</p>

<pre><code class="language-shell">apt update
apt upgrade
apt install netcat openssl libpcre3 dnsmasq procps
wget https://github.com/Mashape/kong/releases/download/0.8.3/kong-0.8.3.xenial_all.deb
dpkg -i kong-0.8.3.xenial_all.deb
</code></pre>

<p>安装 Cassandra ：</p>

<pre><code class="language-shell">echo &quot;deb http://www.apache.org/dist/cassandra/debian 22x main&quot; | sudo tee -a /etc/apt/sources.list.d/cassandra.sources.list
echo &quot;deb-src http://www.apache.org/dist/cassandra/debian 22x main&quot; | sudo tee -a /etc/apt/sources.list.d/cassandra.sources.list
gpg --keyserver pgp.mit.edu --recv-keys F758CE318D77295D
gpg --export --armor F758CE318D77295D | sudo apt-key add -
gpg --keyserver pgp.mit.edu --recv-keys 2B5C1B00
gpg --export --armor 2B5C1B00 | sudo apt-key add -
gpg --keyserver pgp.mit.edu --recv-keys 0353B12C
gpg --export --armor 0353B12C | sudo apt-key add -
apt update
apt upgrade
apt install cassandra
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>上海办理居住证记录</title>
            <link>https://qxzzf.com/posts/%E4%B8%8A%E6%B5%B7%E5%8A%9E%E7%90%86%E5%B1%85%E4%BD%8F%E8%AF%81%E8%AE%B0%E5%BD%95/</link>
            <pubDate>Sun, 10 Jul 2016 19:39:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E4%B8%8A%E6%B5%B7%E5%8A%9E%E7%90%86%E5%B1%85%E4%BD%8F%E8%AF%81%E8%AE%B0%E5%BD%95/</guid>
            <description>上海现在办理居住证越来越方便了，还有了自动签注机制，理论上没换工作没搬家的情况下就可以自动续期。
其实上海办理居住证最重要的就是四样东西：
 身份证 居住证明 劳动合同 连续缴纳社保  初次申请居住证的时候稍微麻烦些，工作人员需要对提供的资料进行审核，注意点有：
 社保必须连续缴纳6个月（可以补缴） 身份证上的居住地址必须与户籍地址一直，否则需要查看户口本原件（被这个坑过） 如果是利用亲戚关系办理的话，需要办证人和房屋所有者在同一个户口本上，否则需要到老家派出所开亲戚关系证明 租赁合同可以不通过中介，直接自己按照样张手写也可以，到办理点再填也完全没关系（被坑过100块钱） 周六日一般也可以办理，在 962222.net 上可以查询到办理点的联系电话，去之前直接打电话问下比较好  签注续期就比较简单了，如果房屋租赁合同没过期，劳动合同也没过期，基本只要填个单子就行了。续期时间范围是过期日前30天至过期日后60天，也就是说过期两个月内进行签注即可，在过期日前可以等待自动签注，如果通过了会有短信提示。</description>
            <content type="html"><![CDATA[<p>上海现在办理居住证越来越方便了，还有了自动签注机制，理论上没换工作没搬家的情况下就可以自动续期。</p>

<p>其实上海办理居住证最重要的就是四样东西：</p>

<ol>
<li>身份证</li>
<li>居住证明</li>
<li>劳动合同</li>
<li>连续缴纳社保</li>
</ol>

<p>初次申请居住证的时候稍微麻烦些，工作人员需要对提供的资料进行审核，注意点有：</p>

<ul>
<li>社保必须连续缴纳6个月（可以补缴）</li>
<li>身份证上的居住地址必须与户籍地址一直，否则需要查看户口本原件（被这个坑过）</li>
<li>如果是利用亲戚关系办理的话，需要办证人和房屋所有者在同一个户口本上，否则需要到老家派出所开亲戚关系证明</li>
<li>租赁合同可以不通过中介，直接自己按照样张手写也可以，到办理点再填也完全没关系（被坑过100块钱）</li>
<li>周六日一般也可以办理，在 962222.net 上可以查询到办理点的联系电话，去之前直接打电话问下比较好</li>
</ul>

<p>签注续期就比较简单了，如果房屋租赁合同没过期，劳动合同也没过期，基本只要填个单子就行了。续期时间范围是过期日前30天至过期日后60天，也就是说过期两个月内进行签注即可，在过期日前可以等待自动签注，如果通过了会有短信提示。</p>
]]></content>
        </item>
        
        <item>
            <title>PHP交互式终端里Backspace退格键无效，显示为^H的处理方法</title>
            <link>https://qxzzf.com/posts/php%E4%BA%A4%E4%BA%92%E5%BC%8F%E7%BB%88%E7%AB%AF%E9%87%8Cbackspace%E9%80%80%E6%A0%BC%E9%94%AE%E6%97%A0%E6%95%88%E6%98%BE%E7%A4%BA%E4%B8%BAh%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/</link>
            <pubDate>Thu, 07 Jul 2016 11:28:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/php%E4%BA%A4%E4%BA%92%E5%BC%8F%E7%BB%88%E7%AB%AF%E9%87%8Cbackspace%E9%80%80%E6%A0%BC%E9%94%AE%E6%97%A0%E6%95%88%E6%98%BE%E7%A4%BA%E4%B8%BAh%E7%9A%84%E5%A4%84%E7%90%86%E6%96%B9%E6%B3%95/</guid>
            <description>参考链接： - http://stackoverflow.com/questions/28733733/arrow-keys-not-working-in-shell - http://unix.stackexchange.com/questions/43103/backspace-tab-not-working-in-terminal-using-ssh
如果使用 PHP 的交互式命令行（如：laravel 的 tinker）时出现类似的问题可使用如下命令：
rlwrap php artisan tinker  其他情况可以尝试使用以下命令，注意其中 ^H 不是直接输入，而是通过 Ctrl - v + Backspace 输入的：
stty erase ^H  </description>
            <content type="html"><![CDATA[<p>参考链接：
- <a href="http://stackoverflow.com/questions/28733733/arrow-keys-not-working-in-shell" target="_blank">http://stackoverflow.com/questions/28733733/arrow-keys-not-working-in-shell</a>
- <a href="http://unix.stackexchange.com/questions/43103/backspace-tab-not-working-in-terminal-using-ssh" target="_blank">http://unix.stackexchange.com/questions/43103/backspace-tab-not-working-in-terminal-using-ssh</a></p>

<p>如果使用 PHP 的交互式命令行（如：laravel 的 tinker）时出现类似的问题可使用如下命令：</p>

<pre><code class="language-sehll">rlwrap php artisan tinker
</code></pre>

<p>其他情况可以尝试使用以下命令，注意其中 <code>^H</code> 不是直接输入，而是通过 <code>Ctrl - v</code> + <code>Backspace</code> 输入的：</p>

<pre><code class="language-shell">stty erase ^H
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>开源一个简单轻量的高性能PHP路由实现</title>
            <link>https://qxzzf.com/posts/%E5%BC%80%E6%BA%90%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E8%BD%BB%E9%87%8F%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BDphp%E8%B7%AF%E7%94%B1%E5%AE%9E%E7%8E%B0/</link>
            <pubDate>Sat, 02 Jul 2016 19:57:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E5%BC%80%E6%BA%90%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E8%BD%BB%E9%87%8F%E7%9A%84%E9%AB%98%E6%80%A7%E8%83%BDphp%E8%B7%AF%E7%94%B1%E5%AE%9E%E7%8E%B0/</guid>
            <description>Github:https://github.com/takashiki/cdo
Git@OSC:http://git.oschina.net/takashiki/cdo
使用很简单，不过只支持 pathinfo 模式，贴一段示例代码：
$do = new \Mis\Cdo(); $do-&amp;gt;get(&#39;/&#39;, function () { echo &#39;hello world&#39;; }); $do-&amp;gt;post(&#39;/&#39;, function () { $name = isset($_POST[&#39;name&#39;]) ? $_POST[&#39;name&#39;] : &#39;world&#39;; echo &amp;quot;hello {$name}&amp;quot;; }); $do-&amp;gt;any(&#39;/(\d+)&#39;, function ($id) { echo $id; }); /** * When using named subpattern, order of parameters is not matter. * eg. /book/2 */ $do-&amp;gt;any(&#39;/(?P&amp;lt;type&amp;gt;\w+)/(?P&amp;lt;page&amp;gt;\d+)&#39;, function ($page, $type) { echo $type.&#39;&amp;lt;br&amp;gt;&#39;.$page; }); $do-&amp;gt;run();  或者：
use Mis\Cdo; Cdo::get(&#39;/&#39;, function () { echo &#39;hello world&#39;; }); Cdo::run();  写这个项目的初衷是前断时间在写一个小项目时发现现在绝大多数 PHP 的路由都不足够轻量，在只有各位数的路由时 QPS 也只能达到不使用路由时的一半左右，于是便自己写了一个。</description>
            <content type="html"><![CDATA[<p>Github:<a href="https://github.com/takashiki/cdo" target="_blank">https://github.com/takashiki/cdo</a></p>

<p>Git@OSC:<a href="http://git.oschina.net/takashiki/cdo" target="_blank">http://git.oschina.net/takashiki/cdo</a></p>

<p>使用很简单，不过只支持 pathinfo 模式，贴一段示例代码：</p>

<pre><code class="language-php">$do = new \Mis\Cdo();

$do-&gt;get('/', function () {
    echo 'hello world';
});

$do-&gt;post('/', function () {
    $name = isset($_POST['name']) ? $_POST['name'] : 'world';
    echo &quot;hello {$name}&quot;;
});

$do-&gt;any('/(\d+)', function ($id) {
    echo $id;
});

/**
 * When using named subpattern, order of parameters is not matter.
 * eg. /book/2
 */
$do-&gt;any('/(?P&lt;type&gt;\w+)/(?P&lt;page&gt;\d+)', function ($page, $type) {
    echo $type.'&lt;br&gt;'.$page;
});

$do-&gt;run();
</code></pre>

<p>或者：</p>

<pre><code class="language-php">use Mis\Cdo;

Cdo::get('/', function () {
    echo 'hello world';
});

Cdo::run();
</code></pre>

<p>写这个项目的初衷是前断时间在写一个小项目时发现现在绝大多数 PHP 的路由都不足够轻量，在只有各位数的路由时 QPS 也只能达到不使用路由时的一半左右，于是便自己写了一个。</p>

<p>这是在 index 文件里直接打印 <code>hello world</code> 的 qps：</p>

<p><img src="https://ooo.0o0.ooo/2016/07/02/5777b8ef78859.jpg" alt="QQ截图20160702204339.jpg" /></p>

<p>这是使用了路由后的qps：</p>

<p><img src="https://ooo.0o0.ooo/2016/07/02/5777b8ecb250f.jpg" alt="QQ截图20160702204316.jpg" /></p>
]]></content>
        </item>
        
        <item>
            <title>几个PHP路由库的简单性能测试</title>
            <link>https://qxzzf.com/posts/%E5%87%A0%E4%B8%AAphp%E8%B7%AF%E7%94%B1%E5%BA%93%E7%9A%84%E7%AE%80%E5%8D%95%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</link>
            <pubDate>Wed, 29 Jun 2016 21:21:10 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E5%87%A0%E4%B8%AAphp%E8%B7%AF%E7%94%B1%E5%BA%93%E7%9A%84%E7%AE%80%E5%8D%95%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</guid>
            <description> AltoRouter Bramus Router bephp router klein FastRoute Macaw ToroPHP </description>
            <content type="html"><![CDATA[

<h3 id="altorouter">AltoRouter</h3>

<p><img src="https://ooo.0o0.ooo/2016/06/29/5773cc6ec6df0.jpg" alt="altorouter.jpg" /></p>

<h3 id="bramus-router">Bramus Router</h3>

<p><img src="https://ooo.0o0.ooo/2016/06/29/5773cc787f4a1.jpg" alt="bramus-router.jpg" /></p>

<h3 id="bephp-router">bephp router</h3>

<p><img src="https://ooo.0o0.ooo/2016/06/29/5773cc78ac8f0.jpg" alt="bephp-router 开发.jpg" />
<img src="https://ooo.0o0.ooo/2016/06/29/5773cc7902b94.jpg" alt="bephp-router 生产.jpg" /></p>

<h3 id="klein">klein</h3>

<p><img src="https://ooo.0o0.ooo/2016/06/29/5773cc7cf1091.jpg" alt="klein.jpg" /></p>

<h3 id="fastroute">FastRoute</h3>

<p><img src="https://ooo.0o0.ooo/2016/06/29/5773cc8254da0.jpg" alt="fastRoute.jpg" /></p>

<h3 id="macaw">Macaw</h3>

<p><img src="https://ooo.0o0.ooo/2016/06/29/5773cc82b7afa.jpg" alt="macaw.jpg" /></p>

<h3 id="torophp">ToroPHP</h3>

<p><img src="https://ooo.0o0.ooo/2016/06/29/5773cc846f4b1.jpg" alt="torophp.jpg" /></p>
]]></content>
        </item>
        
        <item>
            <title>PHP通过fsock实现异步HTTP请求</title>
            <link>https://qxzzf.com/posts/php%E9%80%9A%E8%BF%87fsock%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5http%E8%AF%B7%E6%B1%82/</link>
            <pubDate>Wed, 29 Jun 2016 11:18:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/php%E9%80%9A%E8%BF%87fsock%E5%AE%9E%E7%8E%B0%E5%BC%82%E6%AD%A5http%E8%AF%B7%E6%B1%82/</guid>
            <description>参考文章：
PHP实现异步调用方法研究 使用fscok实现异步调用PHP how-to-make-async-requests-in-php
function asyncRequest($url, $params = array(), $type = &#39;GET&#39;) { $query = http_build_query($params); $parts = parse_url($url); $fp = fsockopen( $parts[&#39;host&#39;], isset($parts[&#39;port&#39;]) ? $parts[&#39;port&#39;] : 80, $errno, $errstr, 30 ); $location = $parts[&#39;path&#39;] . (empty($parts[&#39;query&#39;]) ? &#39;&#39; : &amp;quot;?{$parts[&#39;query&#39;]}&amp;quot;); $location .= ($type == &#39;GET&#39; &amp;amp;&amp;amp; !empty($query)) ? (empty($parts[&#39;query&#39;]) ? &#39;?&#39; : &#39;&amp;amp;&#39;).$query : &#39;&#39;; $out = &amp;quot;{$type} {$location} HTTP/1.1\r\n&amp;quot;; $out .= &amp;quot;Host: {$parts[&#39;host&#39;]}\r\n&amp;quot;; $out .= &amp;quot;Connection: Close\r\n\r\n&amp;quot;; $out .</description>
            <content type="html"><![CDATA[<p>参考文章：</p>

<p><a href="http://www.laruence.com/2008/04/14/318.html" target="_blank">PHP实现异步调用方法研究</a>
<a href="http://www.laruence.com/2008/04/16/98.html" target="_blank">使用fscok实现异步调用PHP</a>
<a href="https://segment.com/blog/how-to-make-async-requests-in-php/" target="_blank">how-to-make-async-requests-in-php</a></p>

<pre><code class="language-php">function asyncRequest($url, $params = array(), $type = 'GET')
{
    $query = http_build_query($params);

    $parts = parse_url($url);

    $fp = fsockopen(
        $parts['host'],
        isset($parts['port']) ? $parts['port'] : 80,
        $errno,
        $errstr,
        30
    );

    $location = $parts['path'] . (empty($parts['query']) ? '' : &quot;?{$parts['query']}&quot;);
    $location .= ($type == 'GET' &amp;&amp; !empty($query)) ? (empty($parts['query']) ? '?' : '&amp;').$query : '';

    $out = &quot;{$type} {$location} HTTP/1.1\r\n&quot;;
    $out .= &quot;Host: {$parts['host']}\r\n&quot;;
    $out .= &quot;Connection: Close\r\n\r\n&quot;;
    $out .= $type == 'POST' ? &quot;Content-Type: application/x-www-form-urlencoded\r\n&quot; : '';
    $out .= 'Content-Length: '.strlen($query).&quot;\r\n&quot;;
    $out .= ($type == 'POST' &amp;&amp; isset($query)) ? $query : '';

    fwrite($fp, $out);
    fclose($fp);
}
</code></pre>

<p>注意点：</p>

<p>服务端 PHP 要设置 <code>ignore_user_abort</code> 为 <code>ture</code>，Apache 需要在 <code>Apache.conf</code> 中设置对应的 <code>php_value ignore_user_abort</code>，nginx 需要设置 <code>fastcgi_ignore_client_abort</code> 为 <code>on</code>。</p>
]]></content>
        </item>
        
        <item>
            <title>PHP编码规范内部分享大纲</title>
            <link>https://qxzzf.com/posts/php%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E5%86%85%E9%83%A8%E5%88%86%E4%BA%AB%E5%A4%A7%E7%BA%B2/</link>
            <pubDate>Tue, 28 Jun 2016 22:10:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/php%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83%E5%86%85%E9%83%A8%E5%88%86%E4%BA%AB%E5%A4%A7%E7%BA%B2/</guid>
            <description>序言 为什么要有规范  在谷歌，我可以查看任何的代码，进入所有谷歌的代码库，我有权查看它们。事实上，这种权限是很少人能拥有的。但是，让我感到惊讶的却是，如此多的编码规范—缩进，命名，文件结构，注释风格—这一切让我出乎意料的轻松的阅读任意一段代码，并轻易的看懂它们。这让我震惊—因为我以为这些规范是微不足道的东西。它们不可能有这么大的作用—但它们却起到了这么大的作用。当你发现只通过看程序的基本语法结构就能读懂一段代码，这种时间上的节省不能不让人震撼！ —— Mark CC.《Google为何要执行严格的代码编写规范》
 现在项目规模和团队规模不断壮大，如果不执行规范，只会让整个项目的理解和沟通更加复杂。本指南的意图是为了减少不同开发者在浏览代码时减少认知的差异。为此列举一组如何格式化PHP代码的共用规则。
现有的一些规范 PSR规范
PEAR 编码准则
Symfony 编码准则
PHP-FIG FIG组织 (Framework Interop Group) 在制定跟PHP相关规范 (PHP Standard Recommendation)，简称PSR。按照其官网的说法，这个组织的目的并不是告诉你你应该怎么做，只是一些主流的框架之间相互协商和约定。但是目前PSR已经成了PHP社区主流的代码规范。
在PHP-FIG出现之前，PHP的社区可以说是一盘散沙，各种风格和标准同时存在，熟悉不同项目的代码需要额外的成本。PHP-FIG 的意义对普通开发者来说，好处很多，如果你熟悉一个遵守标准的框架，你学习另一个框架也会快很多，代码也容易读懂，你要开源一个遵守标准的库，别人也容易使用和掌握；对框架团队来说，竞争就更激烈了，因为编码风格上的优势现在大家都没了（以前这真算一个优势），现在只能拼框架的设计、效率、扩展性、可用的类库，等，但这对开发者来说还是个好处。
其实 PHP-FIG 的这些标准，和设计模式的性质是差不多的，都是些最佳实践，通过反复实践沉淀下来的东西会更加稳定一些，固化下来有利于大家的沟通和交流。
现有的PSR规范如下：
PSR-0 Autoloading Standard (Deprecated)
PSR-1 Basic Coding Standard
PSR-2 Coding Style Guide
PSR-3 Logger Interface
PSR-4 Autoloader
PSR-5 PHPDoc (Draft)
PSR-6 Cache Interface
PSR-7 HTTP Message Interface
PSR-8 Hug (April Fool)
PSR-9 Security Reporting Process (Draft)
PSR-10 Security Disclosure Publication (Draft)</description>
            <content type="html"><![CDATA[

<h2 id="序言">序言</h2>

<h3 id="为什么要有规范">为什么要有规范</h3>

<blockquote>
<p>在谷歌，我可以查看任何的代码，进入所有谷歌的代码库，我有权查看它们。事实上，这种权限是很少人能拥有的。但是，让我感到惊讶的却是，如此多的编码规范—缩进，命名，文件结构，注释风格—这一切让我出乎意料的轻松的阅读任意一段代码，并轻易的看懂它们。这让我震惊—因为我以为这些规范是微不足道的东西。它们不可能有这么大的作用—但它们却起到了这么大的作用。当你发现只通过看程序的基本语法结构就能读懂一段代码，这种时间上的节省不能不让人震撼！ —— Mark CC.《Google为何要执行严格的代码编写规范》</p>
</blockquote>

<p>现在项目规模和团队规模不断壮大，如果不执行规范，只会让整个项目的理解和沟通更加复杂。本指南的意图是为了减少不同开发者在浏览代码时减少认知的差异。为此列举一组如何格式化PHP代码的共用规则。</p>

<h3 id="现有的一些规范">现有的一些规范</h3>

<p><a href="http://www.php-fig.org/psr/" target="_blank">PSR规范</a></p>

<p><a href="http://pear.php.net/manual/en/standards.php" target="_blank">PEAR 编码准则</a></p>

<p><a href="http://symfony.com/doc/current/contributing/code/standards.html" target="_blank">Symfony 编码准则</a></p>

<h2 id="php-fig">PHP-FIG</h2>

<p><a href="http://www.php-fig.org/" target="_blank">FIG组织 (Framework Interop Group)</a> 在制定跟PHP相关规范 (PHP Standard Recommendation)，简称<a href="https://github.com/php-fig/fig-standards" target="_blank">PSR</a>。按照其官网的说法，这个组织的目的并不是告诉你你应该怎么做，只是一些主流的框架之间相互协商和约定。但是目前PSR已经成了PHP社区主流的代码规范。</p>

<p>在PHP-FIG出现之前，PHP的社区可以说是一盘散沙，各种风格和标准同时存在，熟悉不同项目的代码需要额外的成本。PHP-FIG 的意义对普通开发者来说，好处很多，如果你熟悉一个遵守标准的框架，你学习另一个框架也会快很多，代码也容易读懂，你要开源一个遵守标准的库，别人也容易使用和掌握；对框架团队来说，竞争就更激烈了，因为编码风格上的优势现在大家都没了（以前这真算一个优势），现在只能拼框架的设计、效率、扩展性、可用的类库，等，但这对开发者来说还是个好处。</p>

<p>其实 PHP-FIG 的这些标准，和设计模式的性质是差不多的，都是些最佳实践，通过反复实践沉淀下来的东西会更加稳定一些，固化下来有利于大家的沟通和交流。</p>

<p>现有的PSR规范如下：</p>

<p>PSR-0 Autoloading Standard (Deprecated)</p>

<p>PSR-1 <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-1-basic-coding-standard.md" target="_blank">Basic Coding Standard</a></p>

<p>PSR-2 <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md" target="_blank">Coding Style Guide</a></p>

<p>PSR-3 Logger Interface</p>

<p>PSR-4 <a href="https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-4-autoloader.md" target="_blank">Autoloader</a></p>

<p>PSR-5 <a href="https://github.com/phpDocumentor/fig-standards/blob/master/proposed/phpdoc.md" target="_blank">PHPDoc</a> (Draft)</p>

<p>PSR-6 Cache Interface</p>

<p>PSR-7 HTTP Message Interface</p>

<p>PSR-8 Hug (April Fool)</p>

<p>PSR-9 Security Reporting Process (Draft)</p>

<p>PSR-10 Security Disclosure Publication (Draft)</p>

<p>PSR-11 Container Interoperability (Draft)</p>

<p>PSR-12 <a href="https://github.com/php-fig/fig-standards/blob/master/proposed/extended-coding-style-guide.md" target="_blank">Extended Coding Style Guide</a> (Draft)</p>

<h3 id="1-概览">1. 概览</h3>

<hr />

<p>该文档基于PSR-12的结构，将PSR-1、PSR-2以及PSR-12进行了总结。</p>

<ul>
<li><p>源文件<code>必须</code>只使用 <code>&lt;?php</code> 和 <code>&lt;?=</code> 这两种标签。</p></li>

<li><p>源文件中php代码的编码格式<code>必须</code>只使用不带<code>字节顺序标记(BOM)</code>的<code>UTF-8</code>。</p></li>

<li><p>一个源文件<code>建议</code>只用来做声明（<code>类(class)</code>，<code>函数(function)</code>，<code>常量(constant)</code>等）或者只用来做一些引起副作用的操作（例如：输出信息，修改<code>.ini</code>配置等）,但<code>不建议</code>同时做这两件事。</p></li>

<li><p><code>命名空间(namespace)</code>和<code>类(class)</code> <code>必须</code>遵守[PSR-0][]标准。</p></li>

<li><p><code>类名(class name)</code> <code>必须</code>使用<code>帕斯卡式(PascalCase)</code>写法 (后文将直接用<code>PascalCase</code>表示)。</p></li>

<li><p><code>类(class)</code>中的常量<code>必须</code>只由大写字母和<code>下划线(_)</code>组成。</p></li>

<li><p><code>方法名(method name)</code> <code>必须</code>使用<code>驼峰式(cameCase)</code>写法(后文将直接用<code>camelCase</code>表示)。</p></li>

<li><p>代码<code>必须</code>使用4个空格来进行缩进，而不是用制表符。</p></li>

<li><p>一行代码的长度<code>不建议</code>有硬限制；软限制<code>必须</code>为120个字符，<code>建议</code>每行代码80个字符或者更少。</p></li>

<li><p>在<code>命名空间(namespace)</code>的声明下面<code>必须</code>有一行空行，并且在<code>导入(use)</code>的声明下面也<code>必须</code>有一行空行。</p></li>

<li><p><code>类(class)</code>的左花括号<code>必须</code>放到其声明下面自成一行，右花括号则<code>必须</code>放到类主体下面自成一行。</p></li>

<li><p><code>方法(method)</code>的左花括号<code>必须</code>放到其声明下面自成一行，右花括号则<code>必须</code>放到方法主体的下一行。</p></li>

<li><p>所有的<code>属性(property)</code>和<code>方法(method)</code> <code>必须</code>有可见性声明；<code>抽象(abstract)</code>和<code>终结(final)</code>声明<code>必须</code>在可见性声明之前；而<code>静态(static)</code>声明<code>必须</code>在可见性声明之后。</p></li>

<li><p>在控制结构关键字的后面<code>必须</code>有一个空格；而<code>方法(method)</code>和<code>函数(function)</code>的关键字的后面<code>不可</code>有空格。</p></li>

<li><p>控制结构的左花括号<code>必须</code>跟其放在同一行，右花括号<code>必须</code>放在该控制结构代码主体的下一行。</p></li>

<li><p>控制结构的左括号之后<code>不可</code>有空格，右括号之前也<code>不可</code>有空格。</p></li>
</ul>

<h4 id="实例">实例</h4>

<pre><code class="language-php">&lt;?php
declare(strict_types=1);

namespace Vendor\Package;

use Vendor\Package\{ClassA as A, ClassB, ClassC as C};
use Vendor\Package\Namespace\ClassD as D;

use function Vendor\Package\{functionA, functionB, functionC};
use const Vendor\Package\{ConstantA, ConstantB, ConstantC};

class Foo extends Bar implements FooInterface
{
    public function sampleFunction(int $a, int $b = null): array
    {
        if ($a === $b) {
            bar();
        } elseif ($a &gt; $b) {
            $foo-&gt;bar($arg1);
        } else {
            BazClass::bar($arg2, $arg3);
        }
    }

    final public static function bar()
    {
        // method body
    }
}


</code></pre>

<h3 id="2-通则">2. 通则</h3>

<hr />

<h3 id="2-1-基础代码规范">2.1 基础代码规范</h3>

<p>代码<code>必须</code>遵守 <a href="http://www.php-fig.org/psr/psr-1/" target="_blank">PSR-1</a> 和 <a href="http://www.php-fig.org/psr/psr-2/" target="_blank">PSR-2</a> 中的所有规则。</p>

<h4 id="2-2-源文件">2.2 源文件</h4>

<p>所有的PHP源文件<code>必须</code>使用Unix LF(换行)作为行结束符。</p>

<blockquote>
<p>File &gt; Settings &gt; Editor &gt; Coding Style 设置换行符为LF。</p>
</blockquote>

<p>所有PHP源文件<code>必须</code>以一个空行结束。</p>

<p>纯PHP代码源文件的关闭标签<code>?&gt;</code> <code>必须</code>省略。</p>

<h5 id="2-2-1-php标签">2.2.1 PHP标签</h5>

<p>PHP代码<code>必须</code>只使用<code>长标签(&lt;?php ?&gt;)</code>或者<code>短输出式标签(&lt;?= ?&gt;)</code>；而<code>不可</code>使用其他标签。</p>

<h5 id="2-2-2-字符编码">2.2.2 字符编码</h5>

<p>PHP代码的编码格式<code>必须</code>只使用不带<code>字节顺序标记(BOM)</code>的<code>UTF-8</code>。</p>

<blockquote>
<p>File &gt; Settings &gt; Editor &gt; File Encodings 设置IDE Encoding为UTF-8。</p>
</blockquote>

<h5 id="2-2-3-副作用">2.2.3 副作用</h5>

<p>一个源文件<code>建议</code>只用来做声明（<code>类(class)</code>，<code>函数(function)</code>，<code>常量(constant)</code>等）或者只用来做一些引起副作用的操作（例如：输出信息，修改<code>.ini</code>配置等）,但<code>不建议</code>同时做这两件事。</p>

<p>短语<code>副作用(side effects)</code>的意思是 <em>在包含文件时</em> 所执行的逻辑与所声明的<code>类(class)</code>，<code>函数(function)</code>，<code>常量(constant)</code>等没有直接的关系。</p>

<p><code>副作用(side effects)</code>包含但不局限于：产生输出，显式地使用<code>require</code>或<code>include</code>，连接外部服务，修改ini配置，触发错误或异常，修改全局或者静态变量，读取或修改文件等等</p>

<p>下面是一个既包含声明又有副作用的示例文件；即应避免的例子：</p>

<pre><code class="language-php">&lt;?php
// 副作用：修改了ini配置
ini_set('error_reporting', E_ALL);

// 副作用：载入了文件
include &quot;file.php&quot;;

// 副作用：产生了输出
echo &quot;&lt;html&gt;\n&quot;;

// 声明
function foo()
{
    // 函数体
}
</code></pre>

<p>下面是一个仅包含声明的示例文件；即应提倡的例子：</p>

<pre><code class="language-php">&lt;?php
// 声明
function foo()
{
    // 函数体
}

// 条件式声明不算做是副作用
if (! function_exists('bar')) {
    function bar()
    {
        // 函数体
    }
}
</code></pre>

<h4 id="2-3-行">2.3 行</h4>

<p>行长度<code>不可</code>有硬限制。</p>

<p>行长度的软限制<code>必须</code>是120个字符；对于软限制，代码风格检查器<code>必须</code>警告但<code>不可</code>报错。</p>

<p>一行代码的长度<code>不建议</code>超过80个字符；较长的行<code>建议</code>拆分成多个不超过80个字符的子行。</p>

<p>在非空行后面<code>不可</code>有空格。</p>

<p>空行<code>可以</code>用来增强可读性和区分相关代码块。</p>

<p>一行<code>不可</code>多于一个语句。</p>

<h4 id="2-4-缩进">2.4 缩进</h4>

<p>代码<code>必须</code>使用4个空格，且<code>不可</code>使用制表符来作为缩进。</p>

<blockquote>
<p>注意：代码中只使用空格，且不和制表符混合使用，将会对避免代码差异，补丁，历史和注解中的一些问题有帮助。空格的使用还可以使通过调整细微的缩进来改进行间对齐变得更加的简单。</p>
</blockquote>

<h4 id="2-5-关键字和-true-false-null">2.5 关键字和 True/False/Null</h4>

<p>PHP类型(<code>int</code>, <code>object</code>, <code>float</code>, <code>mixed</code>,
<code>bool</code>, <code>numeric</code>, <code>string</code> 和 <code>resource</code>)、常量(<code>true</code>, <code>false</code>和<code>null</code>)和关键字(<a href="http://php.net/manual/en/reserved.keywords.php" target="_blank">keywords</a>)  <code>必须</code>使用小写字母。</p>

<h3 id="3-声明-declare-命名空间-namespace-和-导入-use-声明">3. <code>声明(Declare)</code>,<code>命名空间(Namespace)</code>和<code>导入(Use)</code>声明</h3>

<p>如果存在<code>declare</code>语句，那么该语句后<code>必须</code>有一行空行，如<code>declare(ticks=);</code>。</p>

<p>declare语句<code>必须</code>紧跟在PHP开始标签的下一行，在declare语句前<code>不可</code>有空行。</p>

<p>一行<code>不可</code>有多个declare语句。</p>

<p>当开始标签<code>&lt;?php</code>在文件的第一行时, 该行<code>不可</code>有其他语句。</p>

<p><code>命名空间(namespace)</code>的声明后面<code>必须</code>有一行空行。</p>

<p><code>命名空间(namespace)</code><code>必须</code>写在<code>declare</code>语句之后。</p>

<p>所有的<code>导入(use)</code>声明<code>必须</code>放在<code>命名空间(namespace)</code>声明的下面。</p>

<p>一句声明中，<code>必须</code>只有一个<code>导入(use)</code>关键字。</p>

<p>Use statements MUST be in blocks, grouped by varying entity (classes [inc. interfaces and traits],
functions or constants). To elaborate, this means that any and all classes are in a block
together; any and all functions are in a block together; and any and all constants must
be grouped together. Within each block there MUST be no blank lines. If a block has
multiple lines there MUST be a blank line before the first line and a blank line after
the last line.</p>

<p>Classes, functions or constants grouped together into a single line must be listed
alphabetically.</p>

<p>The groups MUST be ordered such that classes (together with interfaces and traits) are first,
followed by functions and then constants.</p>

<p>Example of the above notices about namespace, strict types and use declarations:</p>

<pre><code class="language-php">&lt;?php
declare(strict_types=1);

namespace Vendor\Package;

use Vendor\Package\{ClassA as A, ClassB, ClassC as C};
use Vendor\Package\Namespace\ClassD as D;
use Vendor\Package\AnotherNamespace\ClassE as E;

use function Vendor\Package\{functionA, functionB, functionC};
use const Vendor\Package\{ConstantA, ConstantB, ConstantC};

class FooBar
{
    // ... additional PHP code ...
}

</code></pre>

<p>Compound namespaces with a depth of two or more MUST not be used. Therefore the
following is the maximum compounding depth allowed:</p>

<pre><code class="language-php">&lt;?php

use Vendor\Package\Namespace\{
    SubnamespaceOne\ClassA,
    SubnamespaceOne\ClassB,
    SubnamespaceTwo\ClassY,
    ClassZ,
};
</code></pre>

<p>When wishing to declare strict types in files containing markup outside PHP
opening and closing tags MUST, on the first line, include an opening php tag,
the strict types declaration and closing tag.</p>

<p>For example:</p>

<pre><code class="language-php">&lt;?php declare(strict_types=1); ?&gt;
&lt;html&gt;
&lt;body&gt;
    &lt;?php
        // ... additional PHP code ...
    ?&gt;
&lt;/body&gt;
&lt;/html&gt;
</code></pre>

<p>Declare statements MUST contain no spaces and MUST look like <code>declare(strict_types=1);</code>.</p>

<p>Block declare statements are allowed and MUST be formatted as below. Note position of
braces and spacing:</p>

<pre><code class="language-php">declare(ticks=1) {
    //some code
}
</code></pre>

<h3 id="4-类-class-属性-property-和-方法-method">4. <code>类(class)</code>，<code>属性(property)</code>和<code>方法(method)</code></h3>

<p>术语“类”指所有的<code>类(class)</code>，<code>接口(interface)</code>和<code>特性(trait)</code>。</p>

<p>类的右花括号后同一行内<code>不可</code>有任何注释或语句。</p>

<p>当实例化一个类时，即使没有任何初始化参数，也<code>必须</code>写上括号。</p>

<pre><code class="language-php">new Foo();
</code></pre>

<h4 id="4-1-扩展-extend-和-实现-implement">4.1 <code>扩展(extend)</code>和<code>实现(implement)</code></h4>

<p>一个类的<code>扩展(extend)</code>和<code>实现(implement)</code>关键词<code>必须</code>和<code>类名(class name)</code>在同一行。</p>

<p><code>类(class)</code>的左花括号<code>必须</code>放在下面自成一行，且其之前或之后<code>不可</code>有空行；右花括号必须放在<code>类(class)</code>主体的后面自成一行，且其之前<code>不可</code>有空行。</p>

<pre><code class="language-php">&lt;?php
namespace Vendor\Package;

use FooClass;
use BarClass as Bar;
use OtherVendor\OtherPackage\BazClass;

class ClassName extends ParentClass implements \ArrayAccess, \Countable
{
    // constants, properties, methods
}
</code></pre>

<p><code>实现(implement)</code>列表<code>可以</code>被拆分为多个缩进了一次的子行。如果要拆成多个子行，列表的第一项<code>必须</code>要放在下一行，并且每行<code>必须</code>只有一个<code>接口(interface)</code>。</p>

<pre><code class="language-php">&lt;?php
namespace Vendor\Package;

use FooClass;
use BarClass as Bar;
use OtherVendor\OtherPackage\BazClass;

class ClassName extends ParentClass implements
    \ArrayAccess,
    \Countable,
    \Serializable
{
    // constants, properties, methods
}
</code></pre>

<h4 id="4-2-using-traits">4.2 Using traits</h4>

<p>The <code>use</code> keyword used inside the classes to implement traits MUST be
declared on the next line after the opening brace.</p>

<pre><code class="language-php">&lt;?php
namespace Vendor\Package;

use Vendor\Package\FirstTrait;

class ClassName
{
    use FirstTrait;
}
</code></pre>

<p>Each individual Trait that is imported into a class MUST be included
one-per-line, and each inclusion MUST have its own <code>use</code> statement.</p>

<pre><code class="language-php">&lt;?php
namespace Vendor\Package;

use Vendor\Package\FirstTrait;
use Vendor\Package\SecondTrait;
use Vendor\Package\ThirdTrait;

class ClassName
{
    use FirstTrait;
    use SecondTrait;
    use ThirdTrait;
}
</code></pre>

<p>When the class has nothing after the <code>use</code> declaration, the class
closing brace MUST be on the next line after the <code>use</code> declaration.</p>

<pre><code class="language-php">&lt;?php
namespace Vendor\Package;

use Vendor\Package\FirstTrait;

class ClassName
{
    use FirstTrait;
}
</code></pre>

<p>Otherwise it MUST have a blank line after the <code>use</code> declaration.</p>

<pre><code class="language-php">&lt;?php
namespace Vendor\Package;

use Vendor\Package\FirstTrait;

class ClassName
{
    use FirstTrait;

    private $property;
}
</code></pre>

<h4 id="4-3-属性-property">4.3 <code>属性(property)</code></h4>

<p>所有的<code>属性(property)</code>都<code>必须</code>声明其可见性。</p>

<p><code>变量(var)</code>关键字<code>不可</code>用来声明一个<code>属性(property)</code>。</p>

<p>一条语句<code>不可</code>声明多个<code>属性(property)</code>。</p>

<p><code>属性名(property name)</code> <code>不推荐</code>用单个下划线作为前缀来表明其<code>保护(protected)</code>或<code>私有(private)</code>的可见性。</p>

<p>一个<code>属性(property)</code>声明看起来应该像下面这样。</p>

<pre><code class="language-php">&lt;?php
namespace Vendor\Package;

class ClassName
{
    public $foo = null;
}
</code></pre>

<h4 id="4-4-方法-method-和-函数-function">4.4 <code>方法(method)</code>和<code>函数(function)</code></h4>

<p>所有的<code>方法(method)</code>都<code>必须</code>声明其可见性。</p>

<p><code>方法名(method name)</code> <code>不推荐</code>用单个下划线作为前缀来表明其<code>保护(protected)</code>或<code>私有(private)</code>的可见性。</p>

<p><code>方法名(method name)</code>在其声明后面<code>不可</code>有空格跟随。其左花括号<code>必须</code>放在下面自成一行，且右花括号<code>必须</code>放在方法主体的下面自成一行。左括号后面<code>不可</code>有空格，且右括号前面也<code>不可</code>有空格。</p>

<p>一个<code>方法(method)</code>声明看来应该像下面这样。 注意括号，逗号，空格和花括号的位置：</p>

<pre><code class="language-php">&lt;?php
namespace Vendor\Package;

class ClassName
{
    public function fooBarBaz($arg1, &amp;$arg2, $arg3 = [])
    {
        // method body
    }
}
</code></pre>

<p>一个<code>函数(function)</code>声明看来应该像下面这样。 注意括号，逗号，空格和花括号的位置：</p>

<pre><code class="language-php">&lt;?php

function fooBarBaz($arg1, &amp;$arg2, $arg3 = [])
{
    // function body
}
</code></pre>

<h4 id="4-5-方法-method-和-函数-function-的参数">4.5 <code>方法(method)</code>和<code>函数(function)</code>的参数</h4>

<p>在参数列表中，逗号之前<code>不可</code>有空格，而逗号之后则<code>必须</code>要有一个空格。</p>

<p><code>方法(method)</code>中有默认值的参数必须放在参数列表的最后面。</p>

<p><code>方法(method)</code>和<code>函数(function)</code>的参数的标量类型声明<code>必须</code>小写。</p>

<pre><code class="language-php">&lt;?php
namespace Vendor\Package;

class ClassName
{
    public function foo(int $arg1, &amp;$arg2, $arg3 = [])
    {
        // method body
    }
}
</code></pre>

<p>参数列表<code>可以</code>被拆分为多个缩进了一次的子行。如果要拆分成多个子行，参数列表的第一项<code>必须</code>放在下一行，并且每行<code>必须</code>只有一个参数。A single argument being
split across multiple lines (As might be the case with an anonymous function or
array) does not constitute splitting the argument list itself.</p>

<p>当参数列表被拆分成多个子行，右括号和左花括号之间<code>必须</code>又一个空格并且自成一行。</p>

<pre><code class="language-php">&lt;?php
namespace Vendor\Package;

class ClassName
{
    public function aVeryLongMethodName(
        ClassTypeHint $arg1,
        &amp;$arg2,
        array $arg3 = []
    ) {
        // method body
    }
}
</code></pre>

<pre><code class="language-php">&lt;?php

somefunction($foo, $bar, [
  // ...
], $baz);

$app-&gt;get('/hello/{name}', function ($name) use ($app) {
    return 'Hello '.$app-&gt;escape($name);
});
</code></pre>

<p>When you have a return type declaration present there MUST be one space after
the colon with followed by the type declaration. The colon and declaration MUST be
on the same line as the argument list closing parentheses with no spaces between
the two characters. The declaration keyword (e.g. string) MUST be lowercase.</p>

<pre><code class="language-php">&lt;?php
declare(strict_types=1);

namespace Vendor\Package;

class ReturnTypeVariations
{
    public function functionName($arg1, $arg2): string
    {
        return 'foo';
    }
}
</code></pre>

<h4 id="4-6-抽象-abstract-终结-final-和-静态-static">4.6 <code>抽象(abstract)</code>，<code>终结(final)</code>和 <code>静态(static)</code></h4>

<p>当用到<code>抽象(abstract)</code>和<code>终结(final)</code>来做类声明时，它们<code>必须</code>放在可见性声明的前面。</p>

<p>而当用到<code>静态(static)</code>来做类声明时，则<code>必须</code>放在可见性声明的后面。</p>

<pre><code class="language-php">&lt;?php
namespace Vendor\Package;

abstract class ClassName
{
    protected static $foo;

    abstract protected function zim();

    final public static function bar()
    {
        // method body
    }
}
</code></pre>

<h4 id="4-7-调用方法和函数">4.7 调用方法和函数</h4>

<p>调用一个方法或函数时，在方法名或者函数名和左括号之间<code>不可</code>有空格，左括号之后<code>不可</code>有空格，右括号之前也<code>不可</code>有空格。参数列表中，逗号之前<code>不可</code>有空格，逗号之后则<code>必须</code>有一个空格。</p>

<pre><code class="language-php">&lt;?php

bar();
$foo-&gt;bar($arg1);
Foo::bar($arg2, $arg3);
</code></pre>

<p>参数列表<code>可以</code>被拆分成多个缩进了一次的子行。如果拆分成子行，列表中的第一项<code>必须</code>放在下一行，并且每一行<code>必须</code>只能有一个参数。</p>

<pre><code class="language-php">&lt;?php

$foo-&gt;bar(
    $longArgument,
    $longerArgument,
    $muchLongerArgument
);
</code></pre>

<h3 id="5-控制结构">5. 控制结构</h3>

<p>下面是对于控制结构代码风格的概括：</p>

<ul>
<li>控制结构的关键词之后<code>必须</code>有一个空格。</li>
<li>控制结构的左括号之后<code>不可</code>有空格。</li>
<li>控制结构的右括号之前<code>不可</code>有空格。</li>
<li>控制结构的右括号和左花括号之间<code>必须</code>有一个空格。</li>
<li>控制结构的代码主体<code>必须</code>进行一次缩进。</li>
<li>控制结构的右花括号<code>必须</code>主体的下一行。</li>
</ul>

<p>每个控制结构的代码主体<code>必须</code>被括在花括号里。这样可是使代码看上去更加标准化，并且加入新代码的时候还可以因此而减少引入错误的可能性。</p>

<h4 id="5-1-if-elseif-else">5.1 <code>if</code>，<code>elseif</code>，<code>else</code></h4>

<p>下面是一个<code>if</code>条件控制结构的示例，注意其中括号，空格和花括号的位置。同时注意<code>else</code>和<code>elseif</code>要和前一个条件控制结构的右花括号在同一行。</p>

<pre><code class="language-php">&lt;?php

if ($expr1) {
    // if body
} elseif ($expr2) {
    // elseif body
} else {
    // else body;
}
</code></pre>

<p><code>推荐</code>用<code>elseif</code>来替代<code>else if</code>，以保持所有的条件控制关键字看起来像是一个单词。</p>

<h4 id="5-2-switch-case">5.2 <code>switch</code>, <code>case</code></h4>

<p>下面是一个<code>switch</code>条件控制结构的示例，注意其中括号，空格和花括号的位置。<code>case</code>语句<code>必须</code>要缩进一级，而<code>break</code>关键字（或其他中止关键字）<code>必须</code>和<code>case</code>结构的代码主体在同一个缩进层级。如果一个有主体代码的<code>case</code>结构故意的继续向下执行则<code>必须</code>要有一个类似于<code>// no break</code>的注释。</p>

<pre><code class="language-php">&lt;?php

switch ($expr) {
    case 0:
        echo 'First case, with a break';
        break;
    case 1:
        echo 'Second case, which falls through';
        // no break
    case 2:
    case 3:
    case 4:
        echo 'Third case, return instead of break';
        return;
    default:
        echo 'Default case';
        break;
}
</code></pre>

<h4 id="5-3-while-do-while">5.3 <code>while</code>, <code>do while</code></h4>

<p>下面是一个<code>while</code>循环控制结构的示例，注意其中括号，空格和花括号的位置。</p>

<pre><code class="language-php">&lt;?php

while ($expr) {
    // structure body
}
</code></pre>

<p>下面是一个<code>do while</code>循环控制结构的示例，注意其中括号，空格和花括号的位置。</p>

<pre><code class="language-php">&lt;?php

do {
    // structure body;
} while ($expr);
</code></pre>

<h4 id="5-4-for">5.4 <code>for</code></h4>

<p>下面是一个<code>for</code>循环控制结构的示例，注意其中括号，空格和花括号的位置。</p>

<pre><code class="language-php">&lt;?php

for ($i = 0; $i &lt; 10; $i++) {
    // for body
}
</code></pre>

<h4 id="5-5-foreach">5.5 <code>foreach</code></h4>

<p>下面是一个<code>for</code>循环控制结构的示例，注意其中括号，空格和花括号的位置。</p>

<pre><code class="language-php">&lt;?php

foreach ($iterable as $key =&gt; $value) {
    // foreach body
}
</code></pre>

<h4 id="5-6-try-catch-finally">5.6 <code>try</code>, <code>catch</code>, <code>finally</code></h4>

<p>下面是一个<code>try catch</code>异常处理控制结构的示例，注意其中括号，空格和花括号的位置。</p>

<pre><code class="language-php">&lt;?php

try {
    // try body
} catch (FirstThrowableType $e) {
    // catch body
} catch (OtherThrowableType $e) {
    // catch body
} finally {
    // finally body
}
</code></pre>

<h3 id="6-操作符">6. 操作符</h3>

<p>所有的二元和三元运算符前后必须有一个空，字符串连接符除外。包括所有的<a href="http://php.net/manual/en/language.operators.arithmetic.php" target="_blank">算术运算符</a>,
<a href="http://php.net/manual/en/language.operators.comparison.php" target="_blank">比较运算符</a>, <a href="http://php.net/manual/en/language.operators.assignment.php" target="_blank">赋值运算符</a>, <a href="http://php.net/manual/en/language.operators.bitwise.php" target="_blank">位运算符</a>, <a href="http://php.net/manual/en/language.operators.logical.php" target="_blank">逻辑运算符</a> (除了 <code>!</code>)
和 <a href="http://php.net/manual/en/language.operators.type.php" target="_blank">类型运算符</a>.</p>

<p>Other operators such as string concatenation operators are left to interpetation.</p>

<pre><code class="language-php">&lt;?php

if ($a === $b) {
    $foo = $bar ?? $a ?? $b;
} elseif ($a &gt; $b) {
    $variable = $foo ? 'foo' : 'bar';
}
</code></pre>

<h3 id="7-闭包">7. 闭包</h3>

<p>声明闭包时所用的<code>function</code>关键字之后<code>必须</code>要有一个空格，而<code>use</code>关键字的前后都要有一个空格。</p>

<p>闭包的左花括号<code>必须</code>跟其在同一行，而右花括号<code>必须</code>在闭包主体的下一行。</p>

<p>闭包的参数列表和变量列表的左括号后面<code>不可</code>有空格，右括号的前面也<code>不可</code>有空格。</p>

<p>闭包的参数列表和变量列表中逗号前面<code>不可</code>有空格，而逗号后面则<code>必须</code>有空格。</p>

<p>闭包的参数列表中带默认值的参数<code>必须</code>放在参数列表的结尾部分。</p>

<p>下面是一个闭包的示例。注意括号，空格和花括号的位置。</p>

<pre><code class="language-php">&lt;?php

$closureWithArgs = function ($arg1, $arg2) {
    // body
};

$closureWithArgsAndVars = function ($arg1, $arg2) use ($var1, $var2) {
    // body
};
</code></pre>

<p>参数列表和变量列表<code>可以</code>被拆分成多个缩进了一级的子行。如果要拆分成多个子行，列表中的第一项<code>必须</code>放在下一行，并且每一行<code>必须</code>只放一个参数或变量。</p>

<p>当列表（不管是参数还是变量）最终被拆分成多个子行，右括号和左花括号之间<code>必须</code>要有一个空格并且自成一行。</p>

<p>下面是一个参数列表和变量列表被拆分成多个子行的示例。</p>

<pre><code class="language-php">&lt;?php

$longArgs_noVars = function (
    $longArgument,
    $longerArgument,
    $muchLongerArgument
) {
   // body
};

$noArgs_longVars = function () use (
    $longVar1,
    $longerVar2,
    $muchLongerVar3
) {
   // body
};

$longArgs_longVars = function (
    $longArgument,
    $longerArgument,
    $muchLongerArgument
) use (
    $longVar1,
    $longerVar2,
    $muchLongerVar3
) {
   // body
};

$longArgs_shortVars = function (
    $longArgument,
    $longerArgument,
    $muchLongerArgument
) use ($var1) {
   // body
};

$shortArgs_longVars = function ($arg) use (
    $longVar1,
    $longerVar2,
    $muchLongerVar3
) {
   // body
};
</code></pre>

<p>把闭包作为一个参数在函数或者方法中调用时，依然要遵守上述规则。</p>

<pre><code class="language-php">&lt;?php

$foo-&gt;bar(
    $arg1,
    function ($arg2) use ($var1) {
        // body
    },
    $arg3
);
</code></pre>

<h3 id="8-匿名类">8. 匿名类</h3>

<p>Anonymous Classes MUST follow the same guidelines and principles as closures
in the above section.</p>

<pre><code class="language-php">&lt;?php

$instance = new class {};
</code></pre>

<p>The opening bracket MAY be on the same line as the <code>class</code> keyword so long as
the list of <code>implements</code> interfaces does not wrap. If the list of interfaces
wraps, the bracket MUST be placed on the line immediately following the last
interface.</p>

<pre><code class="language-php">&lt;?php

// Bracket on the same line
$instance = new class extends \Foo implements \HandleableInterface {
    // Class content
};

// Bracket on the next line
$instance = new class extends \Foo implements
    \ArrayAccess,
    \Countable,
    \Serializable
{
    // Class content
};
</code></pre>

<h2 id="附录">附录</h2>

<h3 id="php-cs-fixer">php-cs-fixer</h3>

<p><a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer" target="_blank">https://github.com/FriendsOfPHP/PHP-CS-Fixer</a></p>

<p>安装</p>

<pre><code>composer.phar global require fabpot/php-cs-fixer
</code></pre>

<p>File &gt; Settings &gt; Tools &gt; External Tools</p>

<p><img src="https://ooo.0o0.ooo/2015/12/25/567e0f1881501.jpg" alt="QQ截图20151226115156.jpg" /></p>

<p><code>--level=psr2 --verbose fix &quot;$FileDir$/$FileName$&quot;</code></p>

<p><code>$ProjectFileDir$</code></p>

<p>File &gt; Settings &gt; Keymap 设置快捷键</p>

<h3 id="其他文档推荐">其他文档推荐</h3>

<p><a href="http://www.phptherightway.com/" target="_blank">PHP之道</a>
<a href="https://github.com/domnikl/DesignPatternsPHP" target="_blank">PHP设计模式</a>
<a href="http://zhibimo.com/read/Ashu/front-end-style-guide/" target="_blank">前端开发规范手册</a>
<a href="http://pan.baidu.com/share/link?shareid=1023640994&amp;uk=3861181332" target="_blank">《SQL编程风格》</a></p>

<h3 id="php-cs-fixer的一些fixer含义">php-cs-fixer的一些fixer含义</h3>

<ul>
<li><strong>encoding</strong> <a href="http://www.php-fig.org/psr/psr-1/" target="_blank">PSR-1</a></li>
</ul>

<p>源文件中php代码的编码格式<code>必须</code>只使用不带<code>字节顺序标记(BOM)</code>的<code>UTF-8</code>。</p>

<ul>
<li><strong>short_tag</strong> <a href="http://www.php-fig.org/psr/psr-1/" target="_blank">PSR-1</a></li>
</ul>

<p>PHP代码<code>必须</code>只使用<code>长标签(&lt;?php ?&gt;)</code>或者<code>短输出式标签(&lt;?= ?&gt;)</code>；而<code>不可</code>使用其他标签。</p>

<ul>
<li><strong>braces</strong> <a href="http://www.php-fig.org/psr/psr-2/" target="_blank">PSR-2</a></li>
</ul>

<p><code>类(class)</code>的左花括号<code>必须</code>放到其声明下面自成一行，右花括号则<code>必须</code>放到类主体下面自成一行。</p>

<p><code>方法(method)</code>的左花括号<code>必须</code>放到其声明下面自成一行，右花括号则<code>必须</code>放到方法主体的下一行。</p>

<p>控制结构的左花括号<code>必须</code>跟其放在同一行，右花括号<code>必须</code>放在该控制结构代码主体的下一行。控制结构的左括号之后<code>不可</code>有空格，右括号之前也<code>不可</code>有空格。</p>

<ul>
<li><strong>class_definition</strong> <a href="http://www.php-fig.org/psr/psr-2/" target="_blank">PSR-2</a></li>
</ul>

<p>在定义<code>类(class)</code>、<code>特性(trait)</code>和<code>接口(interface)</code>时，关键词左右<code>必须</code>有一个空格。</p>

<ul>
<li><strong>elseif</strong> <a href="http://www.php-fig.org/psr/psr-2/" target="_blank">PSR-2</a></li>
</ul>

<p><code>推荐</code>用<code>elseif</code>来替代<code>else if</code>，以保持所有的条件控制关键字看起来像是一个单词。</p>

<ul>
<li><strong>eof_ending</strong> <a href="http://www.php-fig.org/psr/psr-2/" target="_blank">PSR-2</a></li>
</ul>

<p>所有PHP源文件<code>必须</code>以一个空行结束。</p>

<ul>
<li><strong>function_call_space</strong> <a href="http://www.php-fig.org/psr/psr-2/" target="_blank">PSR-2</a></li>
</ul>

<p><code>函数(function)</code>的关键字的后面<code>不可</code>有空格。</p>

<ul>
<li><strong>function_declaration</strong> <a href="http://www.php-fig.org/psr/psr-2/" target="_blank">PSR-2</a></li>
</ul>

<p>声明闭包时所用的<code>function</code>关键字之后<code>必须</code>要有一个空格，而<code>use</code>关键字的前后都要有一个空格。</p>

<ul>
<li><strong>indentation</strong> <a href="http://www.php-fig.org/psr/psr-2/" target="_blank">PSR-2</a>
<br /></li>
</ul>

<p>代码<code>必须</code>使用4个空格，且<code>不可</code>使用制表符来作为缩进。</p>

<blockquote>
<p>注意：代码中只使用空格，且不和制表符混合使用，将会对避免代码差异，补丁，历史和注解中的一些问题有帮助。空格的使用还可以使通过调整细微的缩进来改进行间对齐变得更加的简单。</p>
</blockquote>

<ul>
<li><strong>line_after_namespace</strong> <a href="http://www.php-fig.org/psr/psr-2/" target="_blank">PSR-2</a>
<br /></li>
</ul>

<p><code>命名空间(namespace)</code>的声明后面<code>必须</code>有一行空行。</p>

<ul>
<li><strong>linefeed</strong> <a href="http://www.php-fig.org/psr/psr-2/" target="_blank">PSR-2</a></li>
</ul>

<p>所有的PHP源文件<code>必须</code>使用Unix LF(换行)作为行结束符。</p>

<ul>
<li><strong>lowercase_constants</strong> <a href="http://www.php-fig.org/psr/psr-2/" target="_blank">PSR-2</a></li>
</ul>

<p>PHP常量<code>true</code>, <code>false</code>和<code>null</code> <code>必须</code>使用小写字母。</p>

<ul>
<li><strong>lowercase_keywords</strong> <a href="http://www.php-fig.org/psr/psr-2/" target="_blank">PSR-2</a>
<br /></li>
</ul>

<p>PHP关键字(<a href="http://php.net/manual/en/reserved.keywords.php" target="_blank">keywords</a>)<code>必须</code>使用小写字母。</p>

<ul>
<li><strong>method_argument_space</strong> <a href="http://www.php-fig.org/psr/psr-2/" target="_blank">PSR-2</a>
<br /></li>
</ul>

<p><code>方法(method)</code>的参数列表中，逗号之前<code>不可</code>有空格，而逗号之后则<code>必须</code>要有一个空格。</p>

<ul>
<li><strong>multiple_use</strong> <a href="http://www.php-fig.org/psr/psr-2/" target="_blank">PSR-2</a></li>
</ul>

<p>一句声明中，<code>必须</code>只有一个<code>导入(use)</code>关键字。</p>

<ul>
<li><strong>parenthesis</strong> <a href="http://www.php-fig.org/psr/psr-2/" target="_blank">PSR-2</a>
<br /></li>
</ul>

<p>左括号之后<code>不可</code>有空格，右括号之前也<code>不可</code>有空格。</p>

<ul>
<li><strong>php_closing_tag</strong> <a href="http://www.php-fig.org/psr/psr-2/" target="_blank">PSR-2</a>
<br /></li>
</ul>

<p>纯PHP代码源文件的关闭标签<code>?&gt;</code> <code>必须</code>省略。</p>

<ul>
<li><strong>single_line_after_imports</strong> <a href="http://www.php-fig.org/psr/psr-2/" target="_blank">PSR-2</a></li>
</ul>

<p>所有的<code>导入(use)</code>声明<code>必须</code>放在<code>命名空间(namespace)</code>声明的下面。</p>

<p>在<code>导入(use)</code>声明代码块后面<code>必须</code>有一行空行。</p>

<ul>
<li><strong>switch_case_space</strong> <a href="http://www.php-fig.org/psr/psr-2/" target="_blank">PSR-2</a></li>
</ul>

<p><code>case</code>和值之间<code>必须</code>只有一个空格。</p>

<ul>
<li><strong>trailing_spaces</strong> <a href="http://www.php-fig.org/psr/psr-2/" target="_blank">PSR-2</a></li>
</ul>

<p>在非空行后面<code>不可</code>有空格。</p>

<ul>
<li><strong>visibility</strong> <a href="http://www.php-fig.org/psr/psr-2/" target="_blank">PSR-2</a></li>
</ul>

<p>所有的<code>属性(property)</code>和<code>方法(method)</code>都<code>必须</code>声明其可见性。</p>

<p><code>属性名(property name)</code>和<code>方法名(method name)</code> <code>不推荐</code>用单个下划线作为前缀来表明其<code>保护(protected)</code>或<code>私有(private)</code>的可见性。</p>

<p>当用到<code>抽象(abstract)</code>和<code>终结(final)</code>来做类声明时，它们<code>必须</code>放在可见性声明的前面。</p>

<p>而当用到<code>静态(static)</code>来做类声明时，则<code>必须</code>放在可见性声明的后面。</p>
]]></content>
        </item>
        
        <item>
            <title>PHP新特性内部分享大纲</title>
            <link>https://qxzzf.com/posts/php%E6%96%B0%E7%89%B9%E6%80%A7%E5%86%85%E9%83%A8%E5%88%86%E4%BA%AB%E5%A4%A7%E7%BA%B2/</link>
            <pubDate>Tue, 28 Jun 2016 22:06:40 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/php%E6%96%B0%E7%89%B9%E6%80%A7%E5%86%85%E9%83%A8%E5%88%86%E4%BA%AB%E5%A4%A7%E7%BA%B2/</guid>
            <description>PHP 5.4 数组短标签 $arr = array(1, 2, 3); $arr = [1, 2, 3];  函数返回值数组访问解析 function get_arr() { return [ &#39;a&#39; =&amp;gt; 1, &#39;b&#39; =&amp;gt; 2, ]; } echo get_arr()[&#39;a&#39;];  在实例化时访问类成员 $query = new Query(); $news = $query-&amp;gt;from(&#39;news&#39;)-&amp;gt;all(); $news = (new Query())-&amp;gt;from(&#39;news&#39;)-&amp;gt;all();  traits 场景：soft delete等
trait SoftDeleteTrait { public function delete() { $this-&amp;gt;status = Status::DELETED; return $this-&amp;gt;save(); } } class News extends \yii\db\ActiveRecord { use SoftDeleteTrait; } $news = News::findOne($condition); $news-&amp;gt;delete();  内置的http服务器 php -S localhost:8000  实例：https://github.</description>
            <content type="html"><![CDATA[

<h3 id="php-5-4-http-php-net-manual-en-migration54-new-features-php"><a href="http://php.net/manual/en/migration54.new-features.php" target="_blank">PHP 5.4</a></h3>

<h4 id="数组短标签">数组短标签</h4>

<pre><code class="language-php">$arr = array(1, 2, 3);

$arr = [1, 2, 3];
</code></pre>

<h4 id="函数返回值数组访问解析">函数返回值数组访问解析</h4>

<pre><code class="language-php">function get_arr() {
    return [
        'a' =&gt; 1,
        'b' =&gt; 2,
    ];
}

echo get_arr()['a'];
</code></pre>

<h4 id="在实例化时访问类成员">在实例化时访问类成员</h4>

<pre><code class="language-php">$query = new Query();
$news = $query-&gt;from('news')-&gt;all();

$news = (new Query())-&gt;from('news')-&gt;all();
</code></pre>

<h4 id="traits">traits</h4>

<p>场景：soft delete等</p>

<pre><code class="language-php">trait SoftDeleteTrait
{
    public function delete()
    {
        $this-&gt;status = Status::DELETED;

        return $this-&gt;save();
    }
}

class News extends \yii\db\ActiveRecord
{
    use SoftDeleteTrait;
}

$news = News::findOne($condition);
$news-&gt;delete();
</code></pre>

<h4 id="内置的http服务器">内置的http服务器</h4>

<pre><code class="language-shell">php -S localhost:8000
</code></pre>

<p>实例：<a href="https://github.com/laravel/valet" target="_blank">https://github.com/laravel/valet</a></p>

<h4 id="默认字符集改为-utf-8">默认字符集改为 <code>UTF-8</code></h4>

<p><a href="http://php.net/manual/en/function.htmlspecialchars.php" target="_blank">http://php.net/manual/en/function.htmlspecialchars.php</a></p>

<h3 id="php-5-5-http-php-net-manual-en-migration55-new-features-php"><a href="http://php.net/manual/en/migration55.new-features.php" target="_blank">PHP 5.5</a></h3>

<p><a href="http://php.net/manual/en/migration55.new-features.php" target="_blank">http://php.net/manual/en/migration55.new-features.php</a></p>

<h4 id="foreach-支持-list"><code>foreach</code>支持<code>list</code></h4>

<p>在元素顺序固定时使用比较方便。</p>

<pre><code class="language-php">$news = [
    [
        'title' =&gt; 'title1',
        'content' =&gt; 'content1',
        'url' =&gt; 'url1',
    ],
    [
        'title' =&gt; 'title2',
        'content' =&gt; 'content2',
        'url' =&gt; 'url2',
    ],
];

foreach ($news as $r) {
    echo $r['title'].$r['content'].$r['url'];
}

foreach ($news as list($title, $content, $url)) {
    echo $title.$content.$url;
}
</code></pre>

<h4 id="empty-支持任意表达式"><code>empty</code>支持任意表达式</h4>

<pre><code class="language-php">function get_result() {
    return false;
}

$var = get_result();
var_dump(empty($var));

var_dump(empty(get_result()));
</code></pre>

<h4 id="数组和字符串直接取值">数组和字符串直接取值</h4>

<pre><code class="language-php">echo [1, 2, 3][0];
echo 'string'[0];
</code></pre>

<h4 id="通过-class-获取类名">通过 <code>::class</code> 获取类名</h4>

<pre><code class="language-php">echo News::class;

//yii2中的兼容5.4的实现
class Object implements Configurable
{
    public static function className()
    {
        return get_called_class();
    }
}

News::className();
</code></pre>

<h4 id="生成器">生成器</h4>

<p>生成器和迭代器有点类似，但是与标准的PHP迭代器不同，PHP生成器不要求类实现<code>Iterator</code>接口，生成器会根据需求每次计算并产出需要迭代的值，从而减轻了类的开销和负担。这在处理较大的特殊文件、缓存数据等时会有比较明显的优势。</p>

<pre><code class="language-php">function generatorRange($length) {
    for ($i=0; $i&lt;$length; $i++) {
        yield $i;
    }
}

function iteratorRange($length) {
    $dataSet = [];
    for ($i=0; $i&lt;$length; $i++) {
        $dataSet[] = $i;
    }
    return $dataSet;
}

foreach (generatorRange(10000000) as $i) {
    if ($i % 1000000 == 0) {
        echo $i.'&lt;br&gt;';
    }
}
</code></pre>

<h4 id="集成-zend-opcache">集成 <code>Zend Opcache</code></h4>

<h3 id="php-5-6-http-php-net-manual-en-migration56-new-features-php"><a href="http://php.net/manual/en/migration56.new-features.php" target="_blank">PHP 5.6</a></h3>

<h4 id="使用表达式定义常量">使用表达式定义常量</h4>

<p>在之前的 PHP 版本中， 必须使用静态值来定义常量，声明属性以及指定函数参数默认值。 现在你可以使用包括数值、字符串字面量以及其他常量在内的数值表达式来 定义常量、声明属性以及设置函数参数默认值。</p>

<pre><code class="language-php">const ONE = 1;
const TWO = ONE * 2;

class C {
    const THREE = TWO + 1;
    const ONE_THIRD = ONE / self::THREE;
    const SENTENCE = 'The value of THREE is '.self::THREE;

    public function f($a = ONE + self::THREE) {
        return $a;
    }
}

echo (new C)-&gt;f().'&lt;br&gt;';
echo C::SENTENCE;
</code></pre>

<h4 id="常量支持数组">常量支持数组</h4>

<p>可以通过 <code>const</code> 关键字来定义类型为 <code>array</code> 的常量。</p>

<pre><code class="language-php">const ABC = ['a', 'b', 'c'];
</code></pre>

<h4 id="运算符"><code>...</code> 运算符</h4>

<p>参数合并</p>

<pre><code class="language-php">function f($req, $opt = null, ...$params) {
    // $params 是一个包含了剩余参数的数组
    printf('$req: %d; $opt: %d; number of params: %d'.&quot;&lt;br&gt;&quot;,
           $req, $opt, count($params));
}

f(1);
f(1, 2);
f(1, 2, 3);
f(1, 2, 3, 4);
f(1, 2, 3, 4, 5);
</code></pre>

<p>参数展开</p>

<pre><code class="language-php">function add($a, $b, $c) {
    return $a + $b + $c;
}

$operators = [2, 3];
echo add(1, ...$operators);
</code></pre>

<h4 id="运算符-1"><code>**</code> 运算符</h4>

<p>用于幂运算</p>

<pre><code class="language-php">$a = 2;
$a **= 3;
printf(&quot;a = %d&quot;, $a);
</code></pre>

<h4 id="use-可用于函数和常量"><code>use</code> 可用于函数和常量</h4>

<p>函数和常量可以不必封装在类中就可以支持命名空间。</p>

<pre><code class="language-php">namespace Name\Space {
    const SORT_ASC = 1;
    const SORT_DESC = -1;
    function phpversion() { return 'custom'; }
}

namespace {
    echo SORT_ASC.' '.SORT_DESC.'&lt;br&gt;';
    echo phpversion().'&lt;br&gt;';

    use const Name\Space\SORT_ASC;
    use const Name\Space\SORT_DESC;
    use function Name\Space\phpversion;

    echo SORT_ASC.' '.SORT_DESC.'&lt;br&gt;';
    echo phpversion().'&lt;br&gt;';
}
</code></pre>

<h4 id="大文件上传">大文件上传</h4>

<p>现在可以支持大于 2GB 的文件上传。</p>

<h4 id="php-input-是可重用的了"><code>php://input</code> 是可重用的了</h4>

<p>可以多次打开并读取<code>php://input</code>， 数据流支持<code>seek</code> 操作，同时，这个特性使得在处理 POST 的数据的时候， 可以明显降低对于内存的需求量。</p>

<h3 id="php-7-http-php-net-manual-en-migration70-new-features-php"><a href="http://php.net/manual/en/migration70.new-features.php" target="_blank">PHP 7</a></h3>

<p><code>PHP 7</code> 最令人激动的就是性能上的提升了，下面是来自鸟哥惠新宸的一些测试图片：</p>

<p><img src="http://laruence-wordpress.stor.sinaapp.com/uploads/MYVQSTIBYX6KHZQ9XH72U-1024x573.jpg" alt="5.6 vs 7.0" /></p>

<p><img src="http://img.ptcms.csdn.net/article/201509/16/55f972f220584_middle.jpg" alt="benchmark" /></p>

<p><img src="http://img.ptcms.csdn.net/article/201509/16/55f9735ed3e69_middle.jpg" alt="wordpress qps" /></p>

<h4 id="运算符-2"><code>??</code> 运算符</h4>

<p>日常使用中存在大量同时使用三元表达式和 isset()的情况而新增的语法糖。</p>

<pre><code class="language-php">$result = isset($var) ? $var : 'none';

$result = $var ?? 'none';
</code></pre>

<h4 id="比较操作符"><code>&lt;=&gt;</code> 比较操作符</h4>

<p>组合比较符用于比较两个表达式。当$a小于、等于或大于$b时它分别返回-1、0或1。比较的原则是沿用 PHP 的<a href="http://php.net/manual/en/types.comparisons.php" target="_blank">常规比较规则</a>进行的</p>

<pre><code class="language-php">$arr = [
    ['name' =&gt; 'one', 'age' =&gt; 23],
    ['name' =&gt; 'two', 'age' =&gt; 12],
    ['name' =&gt; 'three', 'age' =&gt; 55],
];

usort($arr, function($a, $b) {
    return $a['age'] &lt;=&gt; $b['age'];
});

var_dump($arr);
</code></pre>

<h4 id="unicode-codepoint-转译语法"><code>Unicode codepoint</code> 转译语法</h4>

<p>这接受一个以16进制形式的 <code>Unicode codepoint</code>，并打印出一个双引号或 <code>heredoc</code> 包围的 UTF-8 编码格式的字符串。 可以接受任何有效的 <code>codepoint</code>，并且开头的 0 是可以省略的。</p>

<pre><code class="language-php">//emoji微笑
echo &quot;\u{1F603}&quot;;
</code></pre>

<h4 id="标量类型声明">标量类型声明</h4>

<p>标量类型声明有两种模式: 强制 (默认) 和 严格模式。 现在可以使用下列类型参数（无论用强制模式还是严格模式）： 字符串(string), 整数 (int), 浮点数 (float), 以及布尔值 (bool)。它们扩充了PHP5中引入的其他类型：类名，接口，数组和 回调类型。</p>

<pre><code class="language-php">declare(strict_types=0);

function sumOfInts(int ...$ints)
{
    return array_sum($ints);
}

var_dump(sumOfInts(2, '3', 4.1));
</code></pre>

<p>标量类型声明在目前的阶段对性能是有负面的影响的，但类型提示会对类型推断起到帮助作用, <code>PHP 7.1</code> 中已经加入了&rdquo;类似&rdquo;JIT的技术(type specifical opcode handler), 到时候类型声明则可以间接地提高性能。</p>

<h4 id="返回值类型声明">返回值类型声明</h4>

<p>支持函数<code>function</code>、方法<code>method</code>或者匿名函数<code>closure</code>的返回值类型声明。返回值支持的类型有：string、int、float、bool、array、<a href="http://php.net/manual/en/language.types.callable.php" target="_blank">callable</a>、self（仅成员方法）、parent（仅成员方法）、Closure、类名、接口名。</p>

<pre><code class="language-php">function sum5($a, $b) {
    return $a + $b;
}

function sum7($a, $b): float {
    return $a + $b;
}

var_dump(sum5(1, 2), sum7(1, 2), sum5(1.0, 2));
</code></pre>

<pre><code class="language-php">class News
{
    public static function findNewsYouNeed()
    {
        return null;
    }
}

function getNews(): array {
    $news = News::findNewsYouNeed();
    return $news;
}

foreach ($news as $r) {}
</code></pre>

<h4 id="unserialize-过滤"><code>unserialize()</code> 过滤</h4>

<p>这个特性旨在提供更安全的方式解包不可靠的数据。它通过白名单的方式来防止潜在的代码注入。</p>

<pre><code class="language-php">// converts all objects into __PHP_Incomplete_Class object
$data = unserialize($foo, [&quot;allowed_classes&quot; =&gt; false]);

// converts all objects into __PHP_Incomplete_Class object except those of MyClass and MyClass2
$data = unserialize($foo, [&quot;allowed_classes&quot; =&gt; [&quot;MyClass&quot;, &quot;MyClass2&quot;]);

// default behaviour (same as omitting the second argument) that accepts all classes
$data = unserialize($foo, [&quot;allowed_classes&quot; =&gt; true]);
</code></pre>

<h4 id="常量数组支持-define-定义">常量数组支持 <code>define()</code> 定义</h4>

<p><code>PHP5.6</code>开始支持<code>const</code>定义数组常量，<code>PHP7</code>开始支持<code>define()</code>。</p>

<pre><code class="language-php">&lt;?php
define('ANIMALS', [
    'dog',
    'cat',
    'bird'
]);

echo ANIMALS[1];
</code></pre>

<h4 id="匿名类">匿名类</h4>

<p>现在支持通过 <code>new class</code> 来实例化一个匿名类，这可以用来替代一些“用后即焚”的完整类定义。</p>

<pre><code class="language-php">&lt;?php
interface Logger {
    public function log(string $msg);
}

class Application {
    private $logger;

    public function getLogger(): Logger {
         return $this-&gt;logger;
    }

    public function setLogger(Logger $logger) {
         $this-&gt;logger = $logger;
    }
}

$app = new Application;
$app-&gt;setLogger(new class implements Logger {
    public function log(string $msg) {
        echo $msg;
    }
});

var_dump($app-&gt;getLogger());
</code></pre>

<h4 id="closure-call">Closure::call()</h4>

<p>Closure::call() 可以方便地即时绑定一个闭包到对象上并调用它，而且它的性能更好。</p>

<pre><code class="language-php">class A {private $x = 1;}

// Pre PHP 7 code
$getXCB = function() {return $this-&gt;x;};
$getX = $getXCB-&gt;bindTo(new A, A::class); // intermediate closure
echo $getX();

// PHP 7+ code
$getX = function() {return $this-&gt;x;};
echo $getX-&gt;call(new A);
</code></pre>

<h4 id="intlchar"><code>IntlChar</code></h4>

<p>新增加的 IntlChar 类旨在暴露出更多的 ICU 功能。这个类自身定义了许多静态方法用于操作多字符集的 <code>unicode</code> 字符。</p>

<pre><code class="language-php">printf('%x', IntlChar::CODEPOINT_MAX);
echo '&lt;br&gt;'.IntlChar::charName('@').'&lt;br&gt;';
var_dump(IntlChar::ispunct('!'));
</code></pre>

<p>若要使用此类，需先安装 <code>Intl</code> 扩展。</p>

<h4 id="预期">预期</h4>

<p>预期是向后兼用并增强之前的 <code>assert()</code> 的方法。 它使得在生产环境中启用断言为零成本，并且提供当断言失败时抛出特定异常的能力。</p>

<p>老版本的API出于兼容目的将继续被维护，<code>assert()</code> 现在是一个语言结构，它允许第一个参数是一个表达式，而不仅仅是一个待计算的 <code>string</code> 或一个待测试的 <code>boolean</code>。</p>

<pre><code class="language-php">ini_set('assert.exception', 1);

class CustomError extends AssertionError {}

assert(false, new CustomError('Some error message'));
</code></pre>

<h4 id="group-use-declarations"><code>Group use declarations</code></h4>

<p>从同一 <code>namespace</code> 导入的类、函数和常量现在可以通过单个 use 语句 一次性导入了。</p>

<pre><code class="language-php">// Pre PHP 7 code
use some\namespace\ClassA;
use some\namespace\ClassB;
use some\namespace\ClassC as C;

use function some\namespace\fn_a;
use function some\namespace\fn_b;
use function some\namespace\fn_c;

use const some\namespace\ConstA;
use const some\namespace\ConstB;
use const some\namespace\ConstC;

// PHP 7+ code
use some\namespace\{ClassA, ClassB, ClassC as C};
use function some\namespace\{fn_a, fn_b, fn_c};
use const some\namespace\{ConstA, ConstB, ConstC};
</code></pre>

<h4 id="生成器支持-return">生成器支持 <code>return</code></h4>

<p>这个特性是基于 <code>PHP 5.5</code> 版本中引入的生成器的，它使得生成器内部可以使用<code>return</code>语句返回一个最终的表达式（不允许返回引用）。该返回值在生成器产生完所有的值之后可以通过  <code>getReturn()</code> 方法获取到。</p>

<pre><code class="language-php">$gen = (function() {
    yield 1;
    yield 2;

    return 3;
})();

foreach ($gen as $val) {
    echo $val, PHP_EOL;
}

echo $gen-&gt;getReturn(), PHP_EOL;
</code></pre>

<h4 id="生成器委托-generator-delegation">生成器委托 <code>Generator delegation</code></h4>

<p>现在我们可以直接在构造生成器时通过 <code>yield from</code> 自动将另一个生成器、对象或数组作为自己的成员，而不需要在生成器外部去写冗余代码。</p>

<pre><code class="language-php">function gen()
{
    yield 1;
    yield 2;

    yield from gen2();
}

function gen2()
{
    yield 3;
    yield 4;
}

foreach (gen() as $val)
{
    echo $val, PHP_EOL;
}
</code></pre>

<h4 id="使用-intdiv-计算整数除法">使用 <code>intdiv()</code> 计算整数除法</h4>

<p>用于计算整数除法。</p>

<pre><code class="language-php">function div($a, $b) {
    var_dump(intval($a / $b), intdiv($a, $b));
    echo '&lt;br&gt;';
}

div(3, 2);
div(-3, 2);
div(3, -2);
div(-3, -2);
div(PHP_INT_MAX, PHP_INT_MAX);
div(PHP_INT_MIN, PHP_INT_MIN);
div(PHP_INT_MIN, -1);
div(1, 0);
</code></pre>

<h4 id="session-配置项"><code>Session</code>配置项</h4>

<p><code>session_start()</code>
现在可以接收一个包含配置的数组以覆盖写在 <code>php.ini</code> 中的 <code>session</code> 配置项。</p>

<pre><code class="language-php">session_start([
    'cache_limiter' =&gt; 'private',
    'read_and_close' =&gt; true,
]);
</code></pre>

<h4 id="preg-replace-callback-array"><code>preg_replace_callback_array()</code></h4>

<blockquote>
<p>mixed preg_replace_callback ( mixed $pattern , callable $callback , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )</p>

<p>mixed preg_replace_callback_array ( array $patterns_and_callbacks , mixed $subject [, int $limit = -1 [, int &amp;$count ]] )</p>
</blockquote>

<p>在<code>PHP7</code>之前使用<code>preg_replace_callback</code>时只能使用一个特定的回调函数来替换匹配到的表达式，这使得有可能需要在回调函数里写分支来实现特定的替换逻辑，现在有了<code>preg_replace_callback_array</code>就可以让每个不同的表达式对应不同的回调函数。</p>

<pre><code class="language-php">$subject = 'Aaaaaa Bbb';

echo preg_replace_callback_array(
    [
        '~[a]+~i' =&gt; function ($match) {
            return str_repeat('1', strlen($match[0]));
        },
        '~[b]+~i' =&gt; function ($match) {
            return str_repeat('2', strlen($match[0]));
        }
    ],
    $subject
);
</code></pre>

<h4 id="更可靠的随机函数">更可靠的随机函数</h4>

<p>新增两个<code>CSPRNG</code>函数：<code>random_int</code>和<code>random_bytes</code>。</p>

<p><a href="https://github.com/paragonie/random_compat" target="_blank">https://github.com/paragonie/random_compat</a> 让<code>PHP 5.x</code>也可以使用<code>random_int</code>和<code>random_bytes</code>。</p>

<p>以上函数的随机性不同的取决于环境：</p>

<ul>
<li>在window上，<code>CryptGenRandom()</code>总是被使用。</li>
<li>在其他平台，<code>arc4random_buf()</code>如果可用会被使用（在BSD系列或者具有libbsd的系统上成立）</li>
<li>以上都不成立的话，一个linux系统调<code>用getrandom(2)</code>会被使用</li>
<li>如果还不行，<code>/dev/urandom</code> 会被作为最后一个可使用的工具</li>
<li>如果以上都不行，系统会抛出错误</li>
</ul>

<pre><code class="language-php">$times = 600000; 
$csprng = 0; 
$rand = 0;

for ($i = 0; $i &lt; $times; $i++){ 
    $csprng += roll() === 6 ? 1 : 0;
    $rand += roll(false) === 6 ? 1 : 0;
} 

function roll($csprng = true){ 
    return $csprng ? random_int(1, 6) : rand(1, 6); 
}

var_dump($csprng, $rand); 
</code></pre>

<h4 id="关键词在特定的场景中也可以使用">关键词在特定的场景中也可以使用</h4>

<pre><code class="language-php">class Test 
{
    public static function forEach($param) 
    {
        var_dump($param);
    }
    
    public static function function($param) 
    {
        static::forEach($param);
    }
}

Test::function([1,2,3]);
</code></pre>

<h3 id="附录">附录</h3>

<h4 id="php7-一些不向后兼容的变更-http-php-net-manual-zh-migration70-incompatible-php"><a href="http://php.net/manual/zh/migration70.incompatible.php" target="_blank">PHP7 一些不向后兼容的变更</a></h4>

<p><code>PHP 5.x</code>在版本更新中不向后兼容的变更大多数都是历史比较久远的特性了，现在的代码里尤其是在使用框架的情况下基本见不到，<code>PHP 7</code>的改动比较大，但影响到的部分一般也并不常用，很多优先级的改动其实只要实际编码中注意多使用 <code>()</code> 和 <code>{}</code>，原本的代码基本就可以无痛迁移至 <code>PHP 7</code>。</p>

<h4 id="php7-compatibility-checker-https-github-com-sstalle-php7cc"><a href="https://github.com/sstalle/php7cc" target="_blank">PHP7 Compatibility Checker</a></h4>

<pre><code class="language-shell">composer global require sstalle/php7cc

php7cc --help

php7cc /path/to/my/directory/
</code></pre>

<h4 id="参考资料">参考资料</h4>

<p><a href="http://www.laruence.com/" target="_blank">风雪之隅</a></p>

<p><a href="http://www.php7.site/book/php7/about-30.html" target="_blank">http://www.php7.site/</a></p>

<p><a href="http://laravelacademy.org/modern-php/feature-modern-php" target="_blank">现代 PHP 新特性系列文章</a></p>
]]></content>
        </item>
        
        <item>
            <title>记一则被骗经历</title>
            <link>https://qxzzf.com/posts/%E8%AE%B0%E4%B8%80%E5%88%99%E8%A2%AB%E9%AA%97%E7%BB%8F%E5%8E%86/</link>
            <pubDate>Sat, 25 Jun 2016 10:06:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E8%AE%B0%E4%B8%80%E5%88%99%E8%A2%AB%E9%AA%97%E7%BB%8F%E5%8E%86/</guid>
            <description>下班走在路上，因为急着去吃点东西所以走的很快，突然被一对中年夫妇叫住，说要去嘉定但是身上没钱了，希望能借点钱。
我第一反映就是这两人是骗子，想快点走，但他们缠着我而且说的很诚恳，说了些明天十点前必定会还给我，走的累了身体又不舒服等等，还用手机给我打了电话，留了联系方式。
结果我就给了他们两百块钱，事后仔细一看他的电话是171开头的虚拟号，打过去关机，想来必然是骗子了，好在只是两百块钱，不过之后想起来还是觉得自己好傻。</description>
            <content type="html"><![CDATA[<p>下班走在路上，因为急着去吃点东西所以走的很快，突然被一对中年夫妇叫住，说要去嘉定但是身上没钱了，希望能借点钱。</p>

<p>我第一反映就是这两人是骗子，想快点走，但他们缠着我而且说的很诚恳，说了些明天十点前必定会还给我，走的累了身体又不舒服等等，还用手机给我打了电话，留了联系方式。</p>

<p>结果我就给了他们两百块钱，事后仔细一看他的电话是171开头的虚拟号，打过去关机，想来必然是骗子了，好在只是两百块钱，不过之后想起来还是觉得自己好傻。</p>
]]></content>
        </item>
        
        <item>
            <title>PHP使用软链部署时opcache缓存旧版本代码的坑</title>
            <link>https://qxzzf.com/posts/php%E4%BD%BF%E7%94%A8%E8%BD%AF%E9%93%BE%E9%83%A8%E7%BD%B2%E6%97%B6opcache%E7%BC%93%E5%AD%98%E6%97%A7%E7%89%88%E6%9C%AC%E4%BB%A3%E7%A0%81%E7%9A%84%E5%9D%91/</link>
            <pubDate>Thu, 23 Jun 2016 15:51:59 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/php%E4%BD%BF%E7%94%A8%E8%BD%AF%E9%93%BE%E9%83%A8%E7%BD%B2%E6%97%B6opcache%E7%BC%93%E5%AD%98%E6%97%A7%E7%89%88%E6%9C%AC%E4%BB%A3%E7%A0%81%E7%9A%84%E5%9D%91/</guid>
            <description>参考链接： http://codinghobo.com/opcache-and-symlink-based-deployments/</description>
            <content type="html"><![CDATA[<p>参考链接： <a href="http://codinghobo.com/opcache-and-symlink-based-deployments/" target="_blank">http://codinghobo.com/opcache-and-symlink-based-deployments/</a></p>
]]></content>
        </item>
        
        <item>
            <title>使用Navicat的SSH tunnel连接数据库时失败的可能原因</title>
            <link>https://qxzzf.com/posts/%E4%BD%BF%E7%94%A8navicat%E7%9A%84ssh-tunnel%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%B6%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%8F%AF%E8%83%BD%E5%8E%9F%E5%9B%A0/</link>
            <pubDate>Mon, 20 Jun 2016 20:37:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E4%BD%BF%E7%94%A8navicat%E7%9A%84ssh-tunnel%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93%E6%97%B6%E5%A4%B1%E8%B4%A5%E7%9A%84%E5%8F%AF%E8%83%BD%E5%8E%9F%E5%9B%A0/</guid>
            <description>有可能ssh的配置文件 \etc\ssh\sshd_config 中禁用了tcp端口转发，
AllowTcpForwarding yes  如果上述参数为 no ，则修改为 yes 后重启 ssh 服务即可。
参考链接： https://rzemieniecki.wordpress.com/2012/08/14/navicat-mysql-connection-error/</description>
            <content type="html"><![CDATA[<p>有可能ssh的配置文件 <code>\etc\ssh\sshd_config</code> 中禁用了tcp端口转发，</p>

<pre><code class="language-shell">AllowTcpForwarding yes
</code></pre>

<p>如果上述参数为 no ，则修改为 yes 后重启 ssh 服务即可。</p>

<p>参考链接： <a href="https://rzemieniecki.wordpress.com/2012/08/14/navicat-mysql-connection-error/" target="_blank">https://rzemieniecki.wordpress.com/2012/08/14/navicat-mysql-connection-error/</a></p>
]]></content>
        </item>
        
        <item>
            <title>PHP Warning: Module &#39;modulename&#39; already loaded in Unknown on line 0 产生原因及解决方法</title>
            <link>https://qxzzf.com/posts/php-warning-module-modulename-already-loaded-in-unknown-on-line-0-%E4%BA%A7%E7%94%9F%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link>
            <pubDate>Sun, 12 Jun 2016 11:31:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/php-warning-module-modulename-already-loaded-in-unknown-on-line-0-%E4%BA%A7%E7%94%9F%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid>
            <description>在以 cli 模式执行 PHP 脚本时，如果发现了如下的报错：
PHP Warning: Module &#39;modulename&#39; already loaded in Unknown on line 0  那就说明该扩展在编译 PHP 时已经 enable 了，但是在 php.ini 中又写了动态调用该扩展的 so 文件。
这时候我们可以查看一下 phpinfo ：
php -i | grep &#39;modulename&#39; php -i | grep &#39;php.ini&#39;  然后去对应的 php.ini 文件中去掉该扩展即可。</description>
            <content type="html"><![CDATA[<p>在以 cli 模式执行 PHP 脚本时，如果发现了如下的报错：</p>

<pre><code class="language-shell">PHP Warning: Module 'modulename' already loaded in Unknown on line 0
</code></pre>

<p>那就说明该扩展在编译 PHP 时已经 enable 了，但是在 php.ini 中又写了动态调用该扩展的 so 文件。</p>

<p>这时候我们可以查看一下 phpinfo ：</p>

<pre><code class="language-shell">php -i | grep 'modulename'
php -i | grep 'php.ini'
</code></pre>

<p>然后去对应的 php.ini 文件中去掉该扩展即可。</p>
]]></content>
        </item>
        
        <item>
            <title>nginx使用realip模块获取用户的真实ip</title>
            <link>https://qxzzf.com/posts/nginx%E4%BD%BF%E7%94%A8realip%E6%A8%A1%E5%9D%97%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E7%9A%84%E7%9C%9F%E5%AE%9Eip/</link>
            <pubDate>Sat, 11 Jun 2016 20:13:56 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/nginx%E4%BD%BF%E7%94%A8realip%E6%A8%A1%E5%9D%97%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E7%9A%84%E7%9C%9F%E5%AE%9Eip/</guid>
            <description>我们经常会使用cdn来达到加快网站访问速度和隐藏服务器真实ip的目的，但是站点使用了cdn后程序获取到的用户ip以及nginx日志中记录的ip均会变成cdn的中转ip。不过cdn一般会实用自定义ip头来保存用户的真实ip，或者是将其放在X_FORWARDED_FOR头里，通过nginx的realip模块和这些ip头里的信息就可以获取到用户的真实ip了。
首先需要确认安装nginx的时候加上了realip模块：
 ./configure --with-http_realip_module  nginx配置示例：
 server { listen 80; server_name www.test.com; index index.php index.html index.html; root /data/site/www.test.com; access_log /data/wwwlogs/test.access.log main; set_real_ip_from 192.168.50.0/24; set_real_ip_from 61.22.22.22; set_real_ip_from 121.207.33.33; set_real_ip_from 127.0.0.1; real_ip_header X-Forwarded-For; real_ip_recursive on; fastcgi_pass unix:/var/run/phpfpm.sock; fastcgi_index index.php; include fastcgi.conf; }  我的一个小站使用了百度云加速，于是开了一个项目用来保存这种cdn的realip配置，参见：https://github.com/takashiki/cdn-real-ip-list。</description>
            <content type="html"><![CDATA[<p>我们经常会使用cdn来达到加快网站访问速度和隐藏服务器真实ip的目的，但是站点使用了cdn后程序获取到的用户ip以及nginx日志中记录的ip均会变成cdn的中转ip。不过cdn一般会实用自定义ip头来保存用户的真实ip，或者是将其放在X_FORWARDED_FOR头里，通过nginx的realip模块和这些ip头里的信息就可以获取到用户的真实ip了。</p>

<p>首先需要确认安装nginx的时候加上了realip模块：</p>

<pre><code>    ./configure --with-http_realip_module
</code></pre>

<p>nginx配置示例：</p>

<pre><code>    server {
    listen       80;
    server_name  www.test.com;
    index index.php index.html index.html;
    root /data/site/www.test.com;
    access_log  /data/wwwlogs/test.access.log  main;

    set_real_ip_from  192.168.50.0/24;
    set_real_ip_from  61.22.22.22;
    set_real_ip_from  121.207.33.33;
    set_real_ip_from  127.0.0.1;
    real_ip_header    X-Forwarded-For;
    real_ip_recursive on;
    fastcgi_pass  unix:/var/run/phpfpm.sock;
    fastcgi_index index.php;
    include fastcgi.conf;
}
</code></pre>

<p>我的一个小站使用了百度云加速，于是开了一个项目用来保存这种cdn的realip配置，参见：<a href="https://github.com/takashiki/cdn-real-ip-list" target="_blank">https://github.com/takashiki/cdn-real-ip-list</a>。</p>
]]></content>
        </item>
        
        <item>
            <title>PHP中使用pcntl扩展时Mysql连接关闭的解决方案</title>
            <link>https://qxzzf.com/posts/php%E4%B8%AD%E4%BD%BF%E7%94%A8pcntl%E6%89%A9%E5%B1%95%E6%97%B6mysql%E8%BF%9E%E6%8E%A5%E5%85%B3%E9%97%AD%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
            <pubDate>Tue, 07 Jun 2016 15:48:51 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/php%E4%B8%AD%E4%BD%BF%E7%94%A8pcntl%E6%89%A9%E5%B1%95%E6%97%B6mysql%E8%BF%9E%E6%8E%A5%E5%85%B3%E9%97%AD%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
            <description>PHP官方的手册里也记载了该问题及其解决方法：http://php.net/manual/zh/function.pcntl-fork.php#70721。
产生该问题的原因就是子进程会关闭父进程的数据库连接，所以需要在子进程中重新进行数据库连接，官方文档里给出的示例代码如下：
// Create the MySQL connection $db = mysql_connect($server, $username, $password); $pid = pcntl_fork(); if ( $pid == -1 ) { // Fork failed exit(1); } else if ( $pid ) { // We are the parent // Can no longer use $db because it will be closed by the child // Instead, make a new MySQL connection for ourselves to work with $db = mysql_connect($server, $username, $password, true); } else { // We are the child // Do something with the inherited connection here // It will get closed upon exit exit(0);  如果是使用框架的话，也需要进行类似的操作，比如说Yii1中可以这么写，参考链接http://www.</description>
            <content type="html"><![CDATA[<p>PHP官方的手册里也记载了该问题及其解决方法：<a href="http://php.net/manual/zh/function.pcntl-fork.php#70721" target="_blank">http://php.net/manual/zh/function.pcntl-fork.php#70721</a>。</p>

<p>产生该问题的原因就是子进程会关闭父进程的数据库连接，所以需要在子进程中重新进行数据库连接，官方文档里给出的示例代码如下：</p>

<pre><code class="language-php">// Create the MySQL connection 
$db = mysql_connect($server, $username, $password); 

$pid = pcntl_fork(); 
             
if ( $pid == -1 ) {        
    // Fork failed            
    exit(1); 
} else if ( $pid ) { 
    // We are the parent 
    // Can no longer use $db because it will be closed by the child 
    // Instead, make a new MySQL connection for ourselves to work with 
    $db = mysql_connect($server, $username, $password, true); 
} else { 
    // We are the child 
    // Do something with the inherited connection here 
    // It will get closed upon exit 
    exit(0); 
</code></pre>

<p>如果是使用框架的话，也需要进行类似的操作，比如说Yii1中可以这么写，参考链接<a href="http://www.yiiframework.com/forum/index.php/topic/3460-pcntl-fork-mysql-and-yii/" target="_blank">http://www.yiiframework.com/forum/index.php/topic/3460-pcntl-fork-mysql-and-yii/</a>:</p>

<pre><code class="language-php">Yii::app()-&gt;getDb()-&gt;setActive(false);
$pid = pcntl_fork();
Yii::app()-&gt;getDb()-&gt;setActive(true);
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>扩展未使用LVM的ext4格式的Linux分区</title>
            <link>https://qxzzf.com/posts/%E6%89%A9%E5%B1%95%E6%9C%AA%E4%BD%BF%E7%94%A8lvm%E7%9A%84ext4%E6%A0%BC%E5%BC%8F%E7%9A%84linux%E5%88%86%E5%8C%BA/</link>
            <pubDate>Mon, 06 Jun 2016 17:32:18 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E6%89%A9%E5%B1%95%E6%9C%AA%E4%BD%BF%E7%94%A8lvm%E7%9A%84ext4%E6%A0%BC%E5%BC%8F%E7%9A%84linux%E5%88%86%E5%8C%BA/</guid>
            <description>自用的虚拟机上磁盘空间不够了，在VMWare的配置里给虚拟机的硬盘又加了20G，但是原来的磁盘没有使用 LVM，又是 ext4 格式的分区。如果使用了 Logical Volume Manager（逻辑卷管理）的话，扩展起来就比较方便了，ext3 格式的话就可以直接用 parted 来扩展分区。
查看磁盘分区信息：
# 查看分区大小、是否使用了LVM fdisk -l # 查看分区格式 df -hT  对于未使用 LVM 的 ext4 格式的分区，我们只能先把这个分区删除，然后再创建新的分区，分区的删除操作并不会影响磁盘上的数据，操作完成后也不会造成数据的损失。
fdisk /dev/sda # 使用d命令删除分区 # 使用n命令创建分区，还是选择 p-主分区 # 其他保持默认就可以 # w命令保存修改 reboot resize2fs /dev/sda1  参考文章： https://thewiringcloset.wordpress.com/2013/01/09/extending-a-root-filesystem-in-linux-without-lvm/</description>
            <content type="html"><![CDATA[<p>自用的虚拟机上磁盘空间不够了，在VMWare的配置里给虚拟机的硬盘又加了20G，但是原来的磁盘没有使用 LVM，又是 ext4 格式的分区。如果使用了 Logical Volume Manager（逻辑卷管理）的话，扩展起来就比较方便了，ext3 格式的话就可以直接用 parted 来扩展分区。</p>

<p>查看磁盘分区信息：</p>

<pre><code class="language-shell"># 查看分区大小、是否使用了LVM
fdisk -l

# 查看分区格式
df -hT
</code></pre>

<p>对于未使用 LVM 的 ext4 格式的分区，我们只能先把这个分区删除，然后再创建新的分区，分区的删除操作并不会影响磁盘上的数据，操作完成后也不会造成数据的损失。</p>

<pre><code class="language-shell">fdisk /dev/sda
# 使用d命令删除分区
# 使用n命令创建分区，还是选择 p-主分区
# 其他保持默认就可以
# w命令保存修改

reboot

resize2fs /dev/sda1
</code></pre>

<p>参考文章： <a href="https://thewiringcloset.wordpress.com/2013/01/09/extending-a-root-filesystem-in-linux-without-lvm/" target="_blank">https://thewiringcloset.wordpress.com/2013/01/09/extending-a-root-filesystem-in-linux-without-lvm/</a></p>
]]></content>
        </item>
        
        <item>
            <title>使用过的物件总结（不定期更新）</title>
            <link>https://qxzzf.com/posts/%E4%BD%BF%E7%94%A8%E8%BF%87%E7%9A%84%E7%89%A9%E4%BB%B6%E6%80%BB%E7%BB%93%E4%B8%8D%E5%AE%9A%E6%9C%9F%E6%9B%B4%E6%96%B0/</link>
            <pubDate>Fri, 03 Jun 2016 21:32:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E4%BD%BF%E7%94%A8%E8%BF%87%E7%9A%84%E7%89%A9%E4%BB%B6%E6%80%BB%E7%BB%93%E4%B8%8D%E5%AE%9A%E6%9C%9F%E6%9B%B4%E6%96%B0/</guid>
            <description>薄款零钱包  实用度：实用 价格：便宜
 可以放四张卡、硬币、纸币，我一般用来放一张公交卡一张门禁卡和零钱，做公交地铁可以直接放在钱包里刷，硬币公交卡啥的都不容易丢了。
无印良品香薰机  实用度：尚可 价格：昂贵
 其实就是加湿器，外观比较好看，灯光很有感觉，但是太贵了，和常见的加湿器比容量也不大，平时自己也懒得开，不过总的来说除了太贵之外都还是可以的。
无印良品马克杯  实用度：不错 价格：较贵
 说实话我买的几件无印良品的东西主要就是看中外观了，这款马克杯带茶漏，中间夹层可以放纸，蛮有格调，不过缺点任然是贵，然后就是不耐摔……
无印良品双层纱布睡衣  实用度：不错 价格：较贵
 这套睡衣还是不错的，然后就还是贵……后来买过淘宝上的一套外贸双层纱布的睡衣，只有三四分之一的价格，但感觉相差不大。
象印保温杯  实用度：不错 价格：尚可
 这款杯子我是买的代购，白色亚马逊特别版，不确定是不是正品，感觉漆略容易掉，保温效果倒是着实不错，50度左右的水放一夜还是带点温的。
My Bottle 随身杯  实用度：不错 价格：稍贵
 这个杯子的外观感觉有点见仁见智，被各种各样的美照给忽悠了，经常被人吐槽这是世界茶饮的杯子……
机械键盘  实用度：不错 价格：看情况
 买了一把灵逸黑寡妇青轴87键，一把雷柏V500茶轴87键，都是比较便宜的，总的感觉手感都很好，经常写代码必备。
乳胶记忆枕  实用度：尚可 价格：看情况
 买的是南极人的不到一百块钱的便宜乳胶枕，总的感觉还是比一般的枕头睡着舒服，但毕竟还只是比较低端的，所以体验也并不十分惊艳。
简易落地衣架  实用度：不错 价格：便宜
 淘宝上二三十快包邮的钢管组成的落地衣架，有了它，床上再也不被衣服堆得乱糟糟的了。
带定时功能的电饭煲  实用度：不错 价格：尚可
 每天的早饭都是用它来定时煮的粥，原料是从淘宝上买的各种五谷杂粮，感觉还是相当实用的。
小型单开门冰箱  实用度：不佳 价格：尚可
 冷冻盒太小了，基本只够放一包大一点的速冻水饺，而且冷冻盒的温度感觉和冷藏室差不太多，冷冻盒里结冰了，冷藏室也会结冰……
方形斜挎包  实用度：不错 价格：看情况</description>
            <content type="html"><![CDATA[

<h3 id="薄款零钱包">薄款零钱包</h3>

<blockquote>
<p>实用度：实用
价格：便宜</p>
</blockquote>

<p>可以放四张卡、硬币、纸币，我一般用来放一张公交卡一张门禁卡和零钱，做公交地铁可以直接放在钱包里刷，硬币公交卡啥的都不容易丢了。</p>

<h3 id="无印良品香薰机">无印良品香薰机</h3>

<blockquote>
<p>实用度：尚可
价格：昂贵</p>
</blockquote>

<p>其实就是加湿器，外观比较好看，灯光很有感觉，但是太贵了，和常见的加湿器比容量也不大，平时自己也懒得开，不过总的来说除了太贵之外都还是可以的。</p>

<h3 id="无印良品马克杯">无印良品马克杯</h3>

<blockquote>
<p>实用度：不错
价格：较贵</p>
</blockquote>

<p>说实话我买的几件无印良品的东西主要就是看中外观了，这款马克杯带茶漏，中间夹层可以放纸，蛮有格调，不过缺点任然是贵，然后就是不耐摔……</p>

<h3 id="无印良品双层纱布睡衣">无印良品双层纱布睡衣</h3>

<blockquote>
<p>实用度：不错
价格：较贵</p>
</blockquote>

<p>这套睡衣还是不错的，然后就还是贵……后来买过淘宝上的一套外贸双层纱布的睡衣，只有三四分之一的价格，但感觉相差不大。</p>

<h3 id="象印保温杯">象印保温杯</h3>

<blockquote>
<p>实用度：不错
价格：尚可</p>
</blockquote>

<p>这款杯子我是买的代购，白色亚马逊特别版，不确定是不是正品，感觉漆略容易掉，保温效果倒是着实不错，50度左右的水放一夜还是带点温的。</p>

<h3 id="my-bottle-随身杯">My Bottle 随身杯</h3>

<blockquote>
<p>实用度：不错
价格：稍贵</p>
</blockquote>

<p>这个杯子的外观感觉有点见仁见智，被各种各样的美照给忽悠了，经常被人吐槽这是世界茶饮的杯子……</p>

<h3 id="机械键盘">机械键盘</h3>

<blockquote>
<p>实用度：不错
价格：看情况</p>
</blockquote>

<p>买了一把灵逸黑寡妇青轴87键，一把雷柏V500茶轴87键，都是比较便宜的，总的感觉手感都很好，经常写代码必备。</p>

<h3 id="乳胶记忆枕">乳胶记忆枕</h3>

<blockquote>
<p>实用度：尚可
价格：看情况</p>
</blockquote>

<p>买的是南极人的不到一百块钱的便宜乳胶枕，总的感觉还是比一般的枕头睡着舒服，但毕竟还只是比较低端的，所以体验也并不十分惊艳。</p>

<h3 id="简易落地衣架">简易落地衣架</h3>

<blockquote>
<p>实用度：不错
价格：便宜</p>
</blockquote>

<p>淘宝上二三十快包邮的钢管组成的落地衣架，有了它，床上再也不被衣服堆得乱糟糟的了。</p>

<h3 id="带定时功能的电饭煲">带定时功能的电饭煲</h3>

<blockquote>
<p>实用度：不错
价格：尚可</p>
</blockquote>

<p>每天的早饭都是用它来定时煮的粥，原料是从淘宝上买的各种五谷杂粮，感觉还是相当实用的。</p>

<h3 id="小型单开门冰箱">小型单开门冰箱</h3>

<blockquote>
<p>实用度：不佳
价格：尚可</p>
</blockquote>

<p>冷冻盒太小了，基本只够放一包大一点的速冻水饺，而且冷冻盒的温度感觉和冷藏室差不太多，冷冻盒里结冰了，冷藏室也会结冰……</p>

<h3 id="方形斜挎包">方形斜挎包</h3>

<blockquote>
<p>实用度：不错
价格：看情况</p>
</blockquote>

<p>这种小的单肩斜挎包对于普通上班族来说还是蛮实用的，里面可以放钱包、雨伞、杯子、耳机、钥匙、移动电源等等日常出门必备物品，适合平时上班不需要带文件、电脑的人，骑自行车的可以考虑胸包。</p>

<h3 id="吸尘器">吸尘器</h3>

<blockquote>
<p>实用度：不错
价格：看情况</p>
</blockquote>

<p>只买过一个便宜的，用下来感觉还是挺方便的，比用扫帚和拖把方便多了。</p>

<h3 id="烘鞋器">烘鞋器</h3>

<blockquote>
<p>实用度：不错
价格：便宜</p>
</blockquote>

<p>鞋里进水或者洗过之后没有好天气或者时间来晒的时候很实用，冬天也可以用来取暖。</p>

<h3 id="tp-link迷你无线路由器">TP-Link迷你无线路由器</h3>

<blockquote>
<p>实用度：不错
价格：尚可</p>
</blockquote>

<p>使用方便，主要是不占地方，就相当于一个插座，这一点很好。</p>

<h3 id="一转三插座">一转三插座</h3>

<blockquote>
<p>实用度：不错
价格：便宜</p>
</blockquote>

<p>众筹的时候九块九包邮买了一个，实在太实用了，特别适用于插座数量不够又不想用拖线板一下子搞出很多线的情况。</p>
]]></content>
        </item>
        
        <item>
            <title>Linux下安装Kafka和PHP的相关扩展</title>
            <link>https://qxzzf.com/posts/linux%E4%B8%8B%E5%AE%89%E8%A3%85kafka%E5%92%8Cphp%E7%9A%84%E7%9B%B8%E5%85%B3%E6%89%A9%E5%B1%95/</link>
            <pubDate>Tue, 31 May 2016 17:50:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/linux%E4%B8%8B%E5%AE%89%E8%A3%85kafka%E5%92%8Cphp%E7%9A%84%E7%9B%B8%E5%85%B3%E6%89%A9%E5%B1%95/</guid>
            <description>以下操作在 Ubuntu 16.04 下进行，其他系统可能略有不同：
安装kafka  配置防火墙，开启9092端口，编辑 \etc\iptables.up.rules 文件，添加一行：  -A INPUT -p tcp -m state --state NEW -m tcp --dport 9092 -j ACCEPT  保存后执行：
iptables-apply /etc/iptables.up.rules   Ubuntu 16.04 自带 JDK，其他系统如果未安装则需要安装。
 安装 kafka
  kafka 最新的发行版本下载地址可以在 http://archive.apache.org/dist/kafka/ 里找。
cd /tmp wget http://archive.apache.org/dist/kafka/0.10.0.0/kafka_2.11-0.10.0.0.tgz tar -xzvf kafka_2.11-0.10.0.0.tgz mv kafka_2.11-0.10.0.0 /usr/local/kafka   启动 zookeeper 和 kafka  这两者的配置这里就先不研究了，直接启动试试看：
nohup /usr/local/kafka/bin/zookeeper-server-start.sh /usr/local/kafka/config/zookeeper.properties &amp;amp; nohup /usr/local/kafka/bin/kafka-server-start.sh /usr/local/kafka/config/server.properties &amp;amp;  安装PHP相关扩展 zookeeper 扩展  安装 libzookeeper_mt  cd /tmp wget -N http://archive.</description>
            <content type="html"><![CDATA[

<p>以下操作在 Ubuntu 16.04 下进行，其他系统可能略有不同：</p>

<h3 id="安装kafka">安装kafka</h3>

<ol>
<li>配置防火墙，开启9092端口，编辑 <code>\etc\iptables.up.rules</code> 文件，添加一行：</li>
</ol>

<pre><code class="language-shell">-A INPUT -p tcp -m state --state NEW -m tcp --dport 9092 -j ACCEPT
</code></pre>

<p>保存后执行：</p>

<pre><code class="language-shell">iptables-apply /etc/iptables.up.rules
</code></pre>

<ol>
<li><p>Ubuntu 16.04 自带 JDK，其他系统如果未安装则需要安装。</p></li>

<li><p>安装 kafka</p></li>
</ol>

<p>kafka 最新的发行版本下载地址可以在 <a href="http://archive.apache.org/dist/kafka/" target="_blank">http://archive.apache.org/dist/kafka/</a> 里找。</p>

<pre><code class="language-shell">cd /tmp
wget http://archive.apache.org/dist/kafka/0.10.0.0/kafka_2.11-0.10.0.0.tgz
tar -xzvf kafka_2.11-0.10.0.0.tgz
mv kafka_2.11-0.10.0.0 /usr/local/kafka
</code></pre>

<ol>
<li>启动 zookeeper 和 kafka</li>
</ol>

<p>这两者的配置这里就先不研究了，直接启动试试看：</p>

<pre><code class="language-shell">nohup /usr/local/kafka/bin/zookeeper-server-start.sh /usr/local/kafka/config/zookeeper.properties &amp;
nohup /usr/local/kafka/bin/kafka-server-start.sh /usr/local/kafka/config/server.properties &amp;
</code></pre>

<h3 id="安装php相关扩展">安装PHP相关扩展</h3>

<h4 id="zookeeper-扩展">zookeeper 扩展</h4>

<ol>
<li>安装 libzookeeper_mt</li>
</ol>

<pre><code class="language-shell">cd /tmp
wget -N http://archive.apache.org/dist/zookeeper/zookeeper-3.4.6/zookeeper-3.4.6.tar.gz; tar zxvf zookeeper-3.4.6.tar.gz; rm -f zookeeper-3.4.6.tar.gz
cd zookeeper-3.4.6/src/c
./configure --prefix=/usr/local/zookeeper
make
sudo make install
</code></pre>

<ol>
<li>安装 PHP 的 zookeeper 扩展：</li>
</ol>

<pre><code class="language-shell">cd /tmp
gid clone https://github.com/jbboehr/php-zookeeper.git
# 如果是 PHP7：
# git checkout php7
phpize
./configure --with-php-config=/usr/local/php/bin/php-config  --with-libzookeeper-dir=/usr/local/zookeeper
make
sudo make install
</code></pre>

<p>然后就可以使用这个包了：<a href="https://github.com/nmred/kafka-php" target="_blank">https://github.com/nmred/kafka-php</a>。</p>

<h4 id="rdkafka-扩展">rdkafka 扩展</h4>

<ol>
<li>安装 librdkafka：</li>
</ol>

<pre><code class="language-shell">cd /tmp
wget -N https://github.com/edenhill/librdkafka/archive/master.zip -O librdkafka.zip; unzip librdkafka.zip; rm -f librdkafka.zip
cd librdkafka-master
./configure
make
sudo make install
</code></pre>

<ol>
<li>安装 php-rdkafka 扩展：</li>
</ol>

<pre><code class="language-shell">git clone https://github.com/arnaud-lb/php-rdkafka.git
cd php-rdkafka
# 如果是 PHP7
# git checkout php7
phpize
./configure
make all -j 5
sudo make install
</code></pre>

<h3 id="参考文档">参考文档：</h3>

<ul>
<li><a href="http://www.osyunwei.com/archives/9345.html" target="_blank">http://www.osyunwei.com/archives/9345.html</a></li>
<li><a href="https://github.com/Qihoo360/logkafka/tree/master/docs" target="_blank">https://github.com/Qihoo360/logkafka/tree/master/docs</a></li>
<li><a href="http://blog.programster.org/install-zookeeper-php-extension/" target="_blank">http://blog.programster.org/install-zookeeper-php-extension/</a></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>常见PHP框架简单性能测试</title>
            <link>https://qxzzf.com/posts/%E5%B8%B8%E8%A7%81php%E6%A1%86%E6%9E%B6%E7%AE%80%E5%8D%95%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</link>
            <pubDate>Thu, 26 May 2016 21:19:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E5%B8%B8%E8%A7%81php%E6%A1%86%E6%9E%B6%E7%AE%80%E5%8D%95%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/</guid>
            <description> 本测试使用 apache bench，参数均为 -c 100 -n 2000。
测试环境：
 单核 i7-4700MQ 2G 内存 7200 转机械硬盘  软件版本：
 nginx 1.9 PHP 7  纯PHP文件 这是一个只包含 echo &#39;hello world&#39; 的纯PHP文件的测试结果：
Yii2 Laravel Slim3 Flight Lumen </description>
            <content type="html"><![CDATA[

<p>本测试使用 <code>apache bench</code>，参数均为 <code>-c 100 -n 2000</code>。</p>

<p>测试环境：</p>

<ul>
<li>单核 i7-4700MQ</li>
<li>2G 内存</li>
<li>7200 转机械硬盘</li>
</ul>

<p>软件版本：</p>

<ul>
<li>nginx 1.9</li>
<li>PHP 7</li>
</ul>

<h3 id="纯php文件">纯PHP文件</h3>

<p>这是一个只包含 <code>echo 'hello world'</code> 的纯PHP文件的测试结果：</p>

<p><img src="https://ooo.0o0.ooo/2016/05/26/5746fe473d7d1.jpg" alt="php" /></p>

<h3 id="yii2">Yii2</h3>

<p><img src="https://ooo.0o0.ooo/2016/05/26/5746fe596ebae.jpg" alt="Yii2" /></p>

<h3 id="laravel">Laravel</h3>

<p><img src="https://ooo.0o0.ooo/2016/05/26/5746fe49d74d6.jpg" alt="Laravel" /></p>

<h3 id="slim3">Slim3</h3>

<p><img src="https://ooo.0o0.ooo/2016/05/26/5746fe5439fb6.jpg" alt="Slim3" /></p>

<h3 id="flight">Flight</h3>

<p><img src="https://ooo.0o0.ooo/2016/05/26/5746fe7a22930.jpg" alt="Flight" /></p>

<h3 id="lumen">Lumen</h3>

<p><img src="https://ooo.0o0.ooo/2016/05/28/57498fa4c8f58.jpg" alt="Lumen" /></p>
]]></content>
        </item>
        
        <item>
            <title>Composer版本升级后fxp-asset-plugin和hirak/prestissimo报错的解决办法</title>
            <link>https://qxzzf.com/posts/composer%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7%E5%90%8Efxp-asset-plugin%E5%92%8Chirakprestissimo%E6%8A%A5%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link>
            <pubDate>Thu, 26 May 2016 20:26:04 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/composer%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7%E5%90%8Efxp-asset-plugin%E5%92%8Chirakprestissimo%E6%8A%A5%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid>
            <description>首先卸载并重新安装hirak/prestissimo：
composer global remove hirak/prestissimo --no-plugins composer global require hirak/prestissimo --no-plugins  然后更新fxp/composer-asset-plugin：
composer global update fxp/composer-asset-plugin --no-plugins  </description>
            <content type="html"><![CDATA[<p>首先卸载并重新安装<code>hirak/prestissimo</code>：</p>

<pre><code class="language-shell">composer global remove hirak/prestissimo  --no-plugins
composer global require hirak/prestissimo  --no-plugins
</code></pre>

<p>然后更新<code>fxp/composer-asset-plugin</code>：</p>

<pre><code class="language-php">composer global update fxp/composer-asset-plugin --no-plugins
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Fork过来的项目拉取源项目的更新</title>
            <link>https://qxzzf.com/posts/fork%E8%BF%87%E6%9D%A5%E7%9A%84%E9%A1%B9%E7%9B%AE%E6%8B%89%E5%8F%96%E6%BA%90%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%9B%B4%E6%96%B0/</link>
            <pubDate>Thu, 26 May 2016 14:08:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/fork%E8%BF%87%E6%9D%A5%E7%9A%84%E9%A1%B9%E7%9B%AE%E6%8B%89%E5%8F%96%E6%BA%90%E9%A1%B9%E7%9B%AE%E7%9A%84%E6%9B%B4%E6%96%B0/</guid>
            <description> 在Fork的代码库中添加上游代码库的remote源，其中upstream表示上游代码库名，可以任意：  git remote add upstream https://github.com/lj2007331/lnmp.git   将本地的修改提交 commit
 在每次 Pull Request 前做如下操作，即可实现和上游版本库的同步。
  git remote update upstream git rebase upstream/{branch name}  需要注意的是在rebase操作之前，一定要将checkout到{branch name}所指定的branch，
 Push代码  </description>
            <content type="html"><![CDATA[<ol>
<li>在<code>Fork</code>的代码库中添加上游代码库的<code>remote</code>源，其中<code>upstream</code>表示上游代码库名，可以任意：</li>
</ol>

<pre><code class="language-shell">git remote add upstream https://github.com/lj2007331/lnmp.git
</code></pre>

<ol>
<li><p>将本地的修改提交 <code>commit</code></p></li>

<li><p>在每次 <code>Pull Request</code> 前做如下操作，即可实现和上游版本库的同步。</p></li>
</ol>

<pre><code class="language-shell">git remote update upstream
git rebase upstream/{branch name}
</code></pre>

<p>需要注意的是在<code>rebase</code>操作之前，一定要将<code>checkout</code>到<code>{branch name}</code>所指定的<code>branch</code>，</p>

<ol>
<li><code>Push</code>代码</li>
</ol>
]]></content>
        </item>
        
        <item>
            <title>使用db2md生成表结构</title>
            <link>https://qxzzf.com/posts/%E4%BD%BF%E7%94%A8db2md%E7%94%9F%E6%88%90%E8%A1%A8%E7%BB%93%E6%9E%84/</link>
            <pubDate>Thu, 19 May 2016 17:40:19 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E4%BD%BF%E7%94%A8db2md%E7%94%9F%E6%88%90%E8%A1%A8%E7%BB%93%E6%9E%84/</guid>
            <description>https://github.com/index0h/node-db2md
这个简直是神器，写数据库文档再也不用头疼了。
首先要安装node和npm，这就不多说了。然后使用npm安装db2md：
npm install db2md -g  安装完成后创建配置文件db2md.json，示例如下：
{ &amp;quot;user&amp;quot;: &amp;quot;root&amp;quot;, &amp;quot;pass&amp;quot;: &amp;quot;123456&amp;quot;, &amp;quot;database&amp;quot;: &amp;quot;test&amp;quot;, &amp;quot;tables&amp;quot;: &amp;quot;.*&amp;quot; }  配置完成后即可以开始导出：
db2md -o tables.md  </description>
            <content type="html"><![CDATA[<p><a href="https://github.com/index0h/node-db2md" target="_blank">https://github.com/index0h/node-db2md</a></p>

<p>这个简直是神器，写数据库文档再也不用头疼了。</p>

<p>首先要安装<code>node</code>和<code>npm</code>，这就不多说了。然后使用<code>npm</code>安装<code>db2md</code>：</p>

<pre><code class="language-shell">npm install db2md -g
</code></pre>

<p>安装完成后创建配置文件<a href="https://github.com/index0h/node-db2md/blob/master/examples/minimalConfiguration.json" target="_blank">db2md.json</a>，示例如下：</p>

<pre><code class="language-json">{
    &quot;user&quot;: &quot;root&quot;,
    &quot;pass&quot;: &quot;123456&quot;,
    &quot;database&quot;: &quot;test&quot;,
    &quot;tables&quot;: &quot;.*&quot;
}
</code></pre>

<p>配置完成后即可以开始导出：</p>

<pre><code class="language-shell">db2md -o tables.md
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>nginx日志分片及使用goaccess进行日志分析</title>
            <link>https://qxzzf.com/posts/nginx%E6%97%A5%E5%BF%97%E5%88%86%E7%89%87%E5%8F%8A%E4%BD%BF%E7%94%A8goaccess%E8%BF%9B%E8%A1%8C%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/</link>
            <pubDate>Fri, 13 May 2016 11:14:15 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/nginx%E6%97%A5%E5%BF%97%E5%88%86%E7%89%87%E5%8F%8A%E4%BD%BF%E7%94%A8goaccess%E8%BF%9B%E8%A1%8C%E6%97%A5%E5%BF%97%E5%88%86%E6%9E%90/</guid>
            <description> nginx日志分片 日志分片脚本详见：https://github.com/takashiki/tool-scripts/blob/master/nginx_log_slice.sh
配置好其中的日志路径、nginx pid路径、备份目录即可，可以设置crontab每天凌晨跑一次。
goaccess 这是goaccess的官网链接。
安装 官网给出了具体的安装方法，包括编译安装和包管理器安装，https://goaccess.io/download。
使用 直接打开：
goaccess -f access.log  空格选择日志格式，一般为NCSA Combined Log Format，回车开始分析。
导出HTML或其他格式的报告能够获得更加详细的分析数据，在导出之前需要先添加配置文件~/.goaccessrc，内容如下：
time-format %T date-format %d/%b/%Y log-format %h %^[%d:%t %^] &amp;quot;%r&amp;quot; %s %b &amp;quot;%R&amp;quot; &amp;quot;%u&amp;quot;  执行以下命令开始导出：
goaccess -f access.log -p ~/.goaccessrc -a &amp;gt; report.html  </description>
            <content type="html"><![CDATA[

<h2 id="nginx日志分片">nginx日志分片</h2>

<p>日志分片脚本详见：<a href="https://github.com/takashiki/tool-scripts/blob/master/nginx_log_slice.sh" target="_blank">https://github.com/takashiki/tool-scripts/blob/master/nginx_log_slice.sh</a></p>

<p>配置好其中的日志路径、nginx pid路径、备份目录即可，可以设置crontab每天凌晨跑一次。</p>

<h2 id="goaccess">goaccess</h2>

<p>这是goaccess的<a href="https://www.goaccess.io/" target="_blank">官网链接</a>。</p>

<h3 id="安装">安装</h3>

<p>官网给出了具体的安装方法，包括编译安装和包管理器安装，<a href="https://goaccess.io/download" target="_blank">https://goaccess.io/download</a>。</p>

<h3 id="使用">使用</h3>

<p>直接打开：</p>

<pre><code class="language-shell">goaccess -f access.log
</code></pre>

<p>空格选择日志格式，一般为<code>NCSA Combined Log Format</code>，回车开始分析。</p>

<p>导出HTML或其他格式的报告能够获得更加详细的分析数据，在导出之前需要先添加配置文件<code>~/.goaccessrc</code>，内容如下：</p>

<pre><code class="language-shell">time-format %T
date-format %d/%b/%Y
log-format %h %^[%d:%t %^] &quot;%r&quot; %s %b &quot;%R&quot; &quot;%u&quot;
</code></pre>

<p>执行以下命令开始导出：</p>

<pre><code class="language-shell">goaccess -f access.log -p ~/.goaccessrc -a &gt; report.html

</code></pre>
]]></content>
        </item>
        
        <item>
            <title>《星之所在》半音阶口琴数字谱整理</title>
            <link>https://qxzzf.com/posts/%E6%98%9F%E4%B9%8B%E6%89%80%E5%9C%A8%E5%8D%8A%E9%9F%B3%E9%98%B6%E5%8F%A3%E7%90%B4%E6%95%B0%E5%AD%97%E8%B0%B1%E6%95%B4%E7%90%86/</link>
            <pubDate>Fri, 06 May 2016 20:43:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E6%98%9F%E4%B9%8B%E6%89%80%E5%9C%A8%E5%8D%8A%E9%9F%B3%E9%98%B6%E5%8F%A3%E7%90%B4%E6%95%B0%E5%AD%97%E8%B0%B1%E6%95%B4%E7%90%86/</guid>
            <description>该谱子是根据 acgmo 和 【真·新人向】教你吹最正宗的星之所在 的谱子整改的，去掉了前奏和间奏。
 3#23#5#2 #1[7]#13[7]
[6#56]3#2[7] #1#23#5#4
3#23#5#2 [7]#1#23#4#5
#56#5#43#2#51#2#1
3#23#5#2 #1[7]#13[7]
[6#56]3#2 [7]#1#23#5#4
3#23#5#2[7]#1#23#4#5
#56#5#43#2#51#2#1
#5#476#5#4#2 #23#1
[67]#13 #23#46#5
#4#3#4#6#3 #2#1#2#4#1
[7#67]#4#3#1 #2#3#4#6#5
#4#3#4#5#6 #6(#1)7#6#5#4#6
#67#6#5#4#6#5#4 #3#3#2
3#23#5#2 #1[7]#13[7]
[6#56]3#2[7] #1#23#5#4
3#23#5#2[7] #1#23#4#5
#56#5#43#2#51#2#1
#5#476#5#4#2 #23#1
[67]#13 #23#46#5
#4#3#4#6#3 #2#1#2#4#1
[7#67]#4#3#1 #2#3#4#6#5
#4#3#4#5#6 #6(#1)7#6#5#4#6
#67#6#5#4#6#5#4 #3#3#2
#4#3#4#6#3 #2#1#2#4#1
[7#67]#4#3#1 #2#3#4#6#5
#4#3#4#5#6 #6(#1)7#6#5#4#6
#67#6#5#4#6#5#4 #3#3#2
#4#3#4#6#3 #2#1#2#4#1
[7#67]#4#3#1 #2#3#4#6#5
#4#3#4#5#6 #6(#1)7#6#5#4#6
#67#6#5#4#6#5#4 #3#3#2
#4#3#4#5#6 #6(#1)7#6#5#4#6
#67#6#5#4#6#5#4#3 #3#2</description>
            <content type="html"><![CDATA[<p>该谱子是根据 <a href="http://www.acgmo.cn/view/6/" target="_blank">acgmo</a> 和 <a href="http://tieba.baidu.com/p/2623936310?see_lz=1" target="_blank">【真·新人向】教你吹最正宗的星之所在</a> 的谱子整改的，去掉了前奏和间奏。</p>

<blockquote>
<p>3#23#5#2 #1[7]#13[7]<br />
[6#56]3#2[7] #1#23#5#4</p>

<p>3#23#5#2 [7]#1#23#4#5<br />
#56#5#43#2#51#2#1</p>

<p>3#23#5#2 #1[7]#13[7]<br />
[6#56]3#2 [7]#1#23#5#4</p>

<p>3#23#5#2[7]#1#23#4#5<br />
#56#5#43#2#51#2#1</p>

<p>#5#476#5#4#2 #23#1<br />
[67]#13 #23#46#5</p>

<p>#4#3#4#6#3 #2#1#2#4#1<br />
[7#67]#4#3#1 #2#3#4#6#5</p>

<p>#4#3#4#5#6 #6(#1)7#6#5#4#6<br />
#67#6#5#4#6#5#4 #3#3#2</p>

<p>3#23#5#2 #1[7]#13[7]<br />
[6#56]3#2[7] #1#23#5#4</p>

<p>3#23#5#2[7] #1#23#4#5<br />
#56#5#43#2#51#2#1</p>

<p>#5#476#5#4#2 #23#1<br />
[67]#13 #23#46#5</p>

<p>#4#3#4#6#3 #2#1#2#4#1<br />
[7#67]#4#3#1 #2#3#4#6#5</p>

<p>#4#3#4#5#6 #6(#1)7#6#5#4#6<br />
#67#6#5#4#6#5#4 #3#3#2</p>

<p>#4#3#4#6#3 #2#1#2#4#1<br />
[7#67]#4#3#1 #2#3#4#6#5</p>

<p>#4#3#4#5#6 #6(#1)7#6#5#4#6<br />
#67#6#5#4#6#5#4 #3#3#2</p>

<p>#4#3#4#6#3 #2#1#2#4#1<br />
[7#67]#4#3#1 #2#3#4#6#5</p>

<p>#4#3#4#5#6 #6(#1)7#6#5#4#6<br />
#67#6#5#4#6#5#4 #3#3#2</p>

<p>#4#3#4#5#6 #6(#1)7#6#5#4#6<br />
#67#6#5#4#6#5#4#3 #3#2</p>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>《Secrect Base》半音阶口琴数字谱整理</title>
            <link>https://qxzzf.com/posts/secrect-base%E5%8D%8A%E9%9F%B3%E9%98%B6%E5%8F%A3%E7%90%B4%E6%95%B0%E5%AD%97%E8%B0%B1%E6%95%B4%E7%90%86/</link>
            <pubDate>Fri, 06 May 2016 20:40:03 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/secrect-base%E5%8D%8A%E9%9F%B3%E9%98%B6%E5%8F%A3%E7%90%B4%E6%95%B0%E5%AD%97%E8%B0%B1%E6%95%B4%E7%90%86/</guid>
            <description>这个数字谱是根据 acgmo 上的谱子和网上找到的一个五线谱自己整改的，不一定很准确，不过感觉比较好吹。
 #1 #4 #5
#5#6#6#6#6#6
#6#5#5#5#5#5
#5#4#4#4#4#4
#4#1#1#1
#1 #4 #5
#5#6#6#6#6#6 #6[#1]
#6#6#6#6#6#5#4#5#6#6
#5#6#5#4#4
#5#6#5#4#4
#4#4#4#4#4#4#4#4
#4#4#3#1
#1#4#4#4#4#4#4#4#4
#4#4#3#1
#1#4#4#4#4#4#4#4#4
#5#1#1
#1#1(#6)#1#2#2
#4#4#4#4#4#4#4#4
#4#4#3#1
#1#4#4#4#4#4#4#4#4
#4#4#3#1
#1#4#4#4#4#4#4#4#4
#5#1#1
#1#1(#6)#1#2#2
#2 #2#2#1#2#3#3
#3#3#2#3#4#4
#1#1(#6)#1#2#2
#2 #2#2#1#2#3#3
#3#3#2#3#4#4
#5#6#5#4#2
#5#6#5#4#2
#5#6#5#4#1#1#1#1(#6)#1#2#2
#6#5#4#2
#5#6#5#4#2#2#2#5#4
#1 #4 #5
#5#6#6#6#6#6
#6#5#5#5#5#5
#5#4#4#4#4#4
#4#1#1#1
#1 #4 #5
#5#6#6#6#6#6 #6[#1]
#6#6#5
#5#5#4#5#6#6
#1 #4 #5
#5#6#6#6#6#6
#6#5#5#5#5#5
#5#4#4#4#4#4
#4#1#1#1
#1 #4 #5
#5#6#6#6#6#6 #6[#1]</description>
            <content type="html"><![CDATA[<p>这个数字谱是根据 <a href="http://www.acgmo.cn/view/2/" target="_blank">acgmo</a> 上的谱子和网上找到的一个五线谱自己整改的，不一定很准确，不过感觉比较好吹。</p>

<blockquote>
<p>#1 #4 #5<br />
#5#6#6#6#6#6<br />
#6#5#5#5#5#5<br />
#5#4#4#4#4#4<br />
#4#1#1#1</p>

<p>#1 #4 #5<br />
#5#6#6#6#6#6 #6[#1]<br />
#6#6#6#6#6#5#4#5#6#6</p>

<p>#5#6#5#4#4<br />
#5#6#5#4#4</p>

<p>#4#4#4#4#4#4#4#4<br />
#4#4#3#1</p>

<p>#1#4#4#4#4#4#4#4#4<br />
#4#4#3#1</p>

<p>#1#4#4#4#4#4#4#4#4<br />
#5#1#1<br />
#1#1(#6)#1#2#2</p>

<p>#4#4#4#4#4#4#4#4<br />
#4#4#3#1</p>

<p>#1#4#4#4#4#4#4#4#4<br />
#4#4#3#1</p>

<p>#1#4#4#4#4#4#4#4#4<br />
#5#1#1<br />
#1#1(#6)#1#2#2</p>

<p>#2 #2#2#1#2#3#3<br />
#3#3#2#3#4#4<br />
#1#1(#6)#1#2#2</p>

<p>#2 #2#2#1#2#3#3<br />
#3#3#2#3#4#4</p>

<p>#5#6#5#4#2<br />
#5#6#5#4#2<br />
#5#6#5#4#1#1#1#1(#6)#1#2#2</p>

<p>#6#5#4#2<br />
#5#6#5#4#2#2#2#5#4</p>

<p>#1 #4 #5<br />
#5#6#6#6#6#6<br />
#6#5#5#5#5#5<br />
#5#4#4#4#4#4<br />
#4#1#1#1</p>

<p>#1 #4 #5<br />
#5#6#6#6#6#6 #6[#1]</p>

<p>#6#6#5<br />
#5#5#4#5#6#6</p>

<p>#1 #4 #5<br />
#5#6#6#6#6#6<br />
#6#5#5#5#5#5<br />
#5#4#4#4#4#4<br />
#4#1#1#1</p>

<p>#1 #4 #5<br />
#5#6#6#6#6#6 #6[#1]<br />
#6#6#5 #5#5#4#5#6#6</p>

<p>#5#6#5#4#4<br />
#5#6#5#4#4</p>

<p>#2 #2#2#1#2#3#3<br />
#3#3#2#3#4#4<br />
#1#1(#6)#1#2#2</p>

<p>#2 #2#2#1#2#3#3<br />
#3#3#2 #3#4#4</p>

<p>#5#6#5#4#2<br />
#5#6#5#4#2</p>

<p>#5#6#5#4<br />
#1#1#1#1(#6)#1#2#2</p>

<p>#6#5#4#2<br />
#5#6#5#4#2#2#2#5#4</p>

<p>#1 #4 #5<br />
#5#6#6#6#6#6<br />
#6#5#5#5#5#5</p>

<p>#5#4#4#4#4#4<br />
#4#1#1#1</p>

<p>#1 #4 #5<br />
#5#6#6#6#6#6 #6[#1]<br />
#6#6#6#6#6#5#4#5#6#6</p>

<p>#5#6#5#4#4<br />
#5#6#5#4#4</p>

<p>#5#4#3#2#1<br />
#2#2#3#3#4<br />
#5#4#3#2#3#1</p>

<p>#1#1#2#2#2<br />
#2 #2#2#1#2#3#3<br />
#3#3#2 #3#4#4</p>

<p>#6#5#4#5#6#6<br />
#6#5#4#2<br />
#5#6#5#4#2#2#2#5#4</p>

<p>#1 #4 #5<br />
#5#6#6#6#6#6<br />
#6#5#5#5#5#5<br />
#5#4#4#4#4#4<br />
#4#1#1#1</p>

<p>#1 #4 #5<br />
#5#6#6#6#6#6 #6[#1]<br />
#6#6#6#6#6#5#4#5#6#6</p>

<p>#1 #4 #5<br />
#5#6#6#6#6#6<br />
#6#5#5#5#5#5<br />
#5#4#4#4#4#4<br />
#4#1#1#1</p>

<p>#1 #4 #5<br />
#5#6#6#6#6#6 #6[#1]<br />
#6#6#6#6#6#5#4#5#6#6</p>

<p>#1 #4 #5<br />
#5#6#6#6#6#6<br />
#6#5#5#5#5#5<br />
#5#4#4#4#4#4<br />
#4#1#1#1</p>

<p>#1 #4 #5<br />
#5#6#6#6#6#6 #6[#1]<br />
#6#6#6#6#5#4#5#6#6</p>

<p>#1 #4 #5<br />
#5#6#6#6#6#6<br />
#6#5#5#5#5#5<br />
#5#4#4#4#4#4<br />
#4#1#1#1</p>

<p>#1 #4 #5<br />
#5#6#6#6#6#6 #6[#1]<br />
#6#6#6#6#6#5#4#5#6#6</p>

<p>#5#6#5#4#4<br />
#5#6#5#4#4<br />
#5#6#5#4#4<br />
#5#6#5#4#4</p>
</blockquote>
]]></content>
        </item>
        
        <item>
            <title>现在租住的酒店式公寓优缺点总结</title>
            <link>https://qxzzf.com/posts/%E7%8E%B0%E5%9C%A8%E7%A7%9F%E4%BD%8F%E7%9A%84%E9%85%92%E5%BA%97%E5%BC%8F%E5%85%AC%E5%AF%93%E4%BC%98%E7%BC%BA%E7%82%B9%E6%80%BB%E7%BB%93/</link>
            <pubDate>Fri, 06 May 2016 19:39:33 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E7%8E%B0%E5%9C%A8%E7%A7%9F%E4%BD%8F%E7%9A%84%E9%85%92%E5%BA%97%E5%BC%8F%E5%85%AC%E5%AF%93%E4%BC%98%E7%BC%BA%E7%82%B9%E6%80%BB%E7%BB%93/</guid>
            <description> 张江这边去年年底开始大力整治群租房，之前租住的实体墙隔出来的一室户也在整治之列，不得已搬了出来。由于时间紧急，也没来得及好好找房子，后来便租了这间酒店式公寓。
说起来其实这间房子的缺点也蛮多的，不过现在搬也很麻烦，便先住着。先说说缺点：
贵 头一条就是贵，每个月基本房租3000，水电都是商用水电，感觉8M还不到的小水管网络也得70一个月。
吵 除了贵之外最让我挂怀的就是吵了，由于酒店式公寓的公共空间很大（一条走廊上十几二十个房间），而房间内又只有一室一卫，所以和公共空间相隔仅仅是一道木门。这里合租的人也特别多，甚至还有民工宿舍，再加上整个公寓区刚建成，部分地方还在装修，所以吵也是理所当然的了。这里推荐3M的耳塞，多亏了它我才能每天安然入睡。
收纳空间小 这间公寓的建筑面积合同上写的是四十多，不过实用面积自我感觉也就三十出头的样子，不过一个人住空间倒是够了，只是家具很少，也很小，所以收纳空间完全不够。为了收纳，我另买了落地式衣架、鞋架、置物架、桌面置物架、厨房卫生间置物架等等。
家具小了也很不方便，桌子上放个笔记本就没办法放键盘了，想练练写字也麻烦。过道里作为厨房的一个小台面也是，放个锅就显得很挤了。
布局不太好 关于布局有很多可以说的，其中一部分可以归咎于是酒店式公寓这种建筑形式本身。
 进门入口处没有合适的放鞋架的地方，要换鞋必须进入房间腹地，这样房间里被外出鞋带进来的脏东西会很多，必须经常打扫，不然看起来就很脏。
 卫生间相对于整体的面积来说有点大，卫生间面积太大不仅浪费，而且冬天的时候暖气不容易吹暖整个卫生间。另外卫生间没有窗户，通风全靠排气扇，这一点也很坑。
 没有十分合适的摆放床的位置，这个床也是个麻烦，无论放在哪儿，要不就回挡住插座，要不就是离桌子太近，没有足够的活动空间，要么就是无法在床上关灯= =！……
  </description>
            <content type="html"><![CDATA[

<p>张江这边去年年底开始大力整治群租房，之前租住的实体墙隔出来的一室户也在整治之列，不得已搬了出来。由于时间紧急，也没来得及好好找房子，后来便租了这间酒店式公寓。</p>

<p>说起来其实这间房子的缺点也蛮多的，不过现在搬也很麻烦，便先住着。先说说缺点：</p>

<h2 id="贵">贵</h2>

<p>头一条就是贵，每个月基本房租3000，水电都是商用水电，感觉8M还不到的小水管网络也得70一个月。</p>

<h2 id="吵">吵</h2>

<p>除了贵之外最让我挂怀的就是吵了，由于酒店式公寓的公共空间很大（一条走廊上十几二十个房间），而房间内又只有一室一卫，所以和公共空间相隔仅仅是一道木门。这里合租的人也特别多，甚至还有民工宿舍，再加上整个公寓区刚建成，部分地方还在装修，所以吵也是理所当然的了。这里推荐3M的耳塞，多亏了它我才能每天安然入睡。</p>

<h2 id="收纳空间小">收纳空间小</h2>

<p>这间公寓的建筑面积合同上写的是四十多，不过实用面积自我感觉也就三十出头的样子，不过一个人住空间倒是够了，只是家具很少，也很小，所以收纳空间完全不够。为了收纳，我另买了落地式衣架、鞋架、置物架、桌面置物架、厨房卫生间置物架等等。</p>

<p>家具小了也很不方便，桌子上放个笔记本就没办法放键盘了，想练练写字也麻烦。过道里作为厨房的一个小台面也是，放个锅就显得很挤了。</p>

<h2 id="布局不太好">布局不太好</h2>

<p>关于布局有很多可以说的，其中一部分可以归咎于是酒店式公寓这种建筑形式本身。</p>

<ul>
<li><p>进门入口处没有合适的放鞋架的地方，要换鞋必须进入房间腹地，这样房间里被外出鞋带进来的脏东西会很多，必须经常打扫，不然看起来就很脏。</p></li>

<li><p>卫生间相对于整体的面积来说有点大，卫生间面积太大不仅浪费，而且冬天的时候暖气不容易吹暖整个卫生间。另外卫生间没有窗户，通风全靠排气扇，这一点也很坑。</p></li>

<li><p>没有十分合适的摆放床的位置，这个床也是个麻烦，无论放在哪儿，要不就回挡住插座，要不就是离桌子太近，没有足够的活动空间，要么就是无法在床上关灯= =！……</p></li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>php读写crx文件</title>
            <link>https://qxzzf.com/posts/php%E8%AF%BB%E5%86%99crx%E6%96%87%E4%BB%B6/</link>
            <pubDate>Wed, 04 May 2016 11:55:01 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/php%E8%AF%BB%E5%86%99crx%E6%96%87%E4%BB%B6/</guid>
            <description>chrome浏览器的扩展文件crx文件是一种包含特殊文件头的zip文件，详细格式见官方说明。
用php打包crx文件在github上已经有一些轮子实现了，比如https://github.com/vegat/PHPCrxGenerator和https://github.com/andyps/crxbuild。
用php读取crx的轮子在github上没找到，虽然也可以按照原理自己写一个，不过也搜出来一个国人的实现，详见PHP 用zip函数操作crx文件和如何获取crx文件的唯一标识crx_id。</description>
            <content type="html"><![CDATA[<p>chrome浏览器的扩展文件crx文件是一种包含特殊文件头的zip文件，详细格式见<a href="https://developer.chrome.com/extensions/crx" target="_blank">官方说明</a>。</p>

<p>用php打包crx文件在github上已经有一些轮子实现了，比如<a href="https://github.com/vegat/PHPCrxGenerator" target="_blank">https://github.com/vegat/PHPCrxGenerator</a>和<a href="https://github.com/andyps/crxbuild" target="_blank">https://github.com/andyps/crxbuild</a>。</p>

<p>用php读取crx的轮子在github上没找到，虽然也可以按照原理自己写一个，不过也搜出来一个国人的实现，详见<a href="http://blog.j135.com/?p=441" target="_blank">PHP 用zip函数操作crx文件和如何获取crx文件的唯一标识crx_id</a>。</p>
]]></content>
        </item>
        
        <item>
            <title>使用mkdocs生成项目文档静态站点</title>
            <link>https://qxzzf.com/posts/%E4%BD%BF%E7%94%A8mkdocs%E7%94%9F%E6%88%90%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3%E9%9D%99%E6%80%81%E7%AB%99%E7%82%B9/</link>
            <pubDate>Sat, 23 Apr 2016 14:54:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E4%BD%BF%E7%94%A8mkdocs%E7%94%9F%E6%88%90%E9%A1%B9%E7%9B%AE%E6%96%87%E6%A1%A3%E9%9D%99%E6%80%81%E7%AB%99%E7%82%B9/</guid>
            <description>mkdocs是一个使用python写的将markdown文档生成静态站点的工具，用mkdocs来生成项目文档是十分方便的。
这是它的中文文档。
安装mkdocs首先要安装python和pip，这里就不多说了。
pip install mkdocs mkdocs new docs-center cd docs-center mkdocs serve --dev-addr 192.168.0.0:8000  参考文章：http://www.wwjie.cn/archives/259</description>
            <content type="html"><![CDATA[<p><a href="http://www.mkdocs.org/" target="_blank">mkdocs</a>是一个使用python写的将markdown文档生成静态站点的工具，用mkdocs来生成项目文档是十分方便的。</p>

<p>这是它的<a href="http://markdown-docs-zh.readthedocs.org/zh_CN/latest/" target="_blank">中文文档</a>。</p>

<p>安装mkdocs首先要安装python和pip，这里就不多说了。</p>

<pre><code class="language-shell">pip install mkdocs

mkdocs new docs-center

cd docs-center

mkdocs serve --dev-addr 192.168.0.0:8000
</code></pre>

<p>参考文章：<a href="http://www.wwjie.cn/archives/259" target="_blank">http://www.wwjie.cn/archives/259</a></p>
]]></content>
        </item>
        
        <item>
            <title>git submodule 使用初试</title>
            <link>https://qxzzf.com/posts/git-submodule-%E4%BD%BF%E7%94%A8%E5%88%9D%E8%AF%95/</link>
            <pubDate>Fri, 22 Apr 2016 10:39:08 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/git-submodule-%E4%BD%BF%E7%94%A8%E5%88%9D%E8%AF%95/</guid>
            <description>在团队项目开发中，经常会把一些公用的模块抽取出来作为单独的项目。对于php来说，引用这些项目的方式除了手动复制之外主要有两种，一种是composer，一种是git submodule，这两种方式在自己使用下来的话，我觉得个人项目更推荐于使用composer，但是对于公司项目，在一些场景下使用submodule则可能更方便一些。
不过git submodule在使用中遇到了一些坑，详见这篇文章：http://mobile.51cto.com/aprogram-393324.htm。</description>
            <content type="html"><![CDATA[<p>在团队项目开发中，经常会把一些公用的模块抽取出来作为单独的项目。对于php来说，引用这些项目的方式除了手动复制之外主要有两种，一种是composer，一种是git submodule，这两种方式在自己使用下来的话，我觉得个人项目更推荐于使用composer，但是对于公司项目，在一些场景下使用submodule则可能更方便一些。</p>

<p>不过git submodule在使用中遇到了一些坑，详见这篇文章：<a href="http://mobile.51cto.com/aprogram-393324.htm" target="_blank">http://mobile.51cto.com/aprogram-393324.htm</a>。</p>
]]></content>
        </item>
        
        <item>
            <title>博客迁移至Vultr并启用https</title>
            <link>https://qxzzf.com/posts/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E8%87%B3vultr%E5%B9%B6%E5%90%AF%E7%94%A8https/</link>
            <pubDate>Sat, 02 Apr 2016 12:23:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E5%8D%9A%E5%AE%A2%E8%BF%81%E7%A7%BB%E8%87%B3vultr%E5%B9%B6%E5%90%AF%E7%94%A8https/</guid>
            <description>SAE现在开始对应用和共享型MyQL收费了，如果应用数比较多，使用SAE的性价比就很低了，于是便重新开始把自己的站点迁移到vps上。之前也试用了很多家的vps，详见http://blog.skyx.in/category/VPS/，最终还是决定使用Vultr东京节点，原因主要有几个，一个是vultr最低价套餐的内存较大一些，一个是vultr东京通过微林中转速度不错（cn3、cn4、hk1的节点都可以），一个是vultr现在有免费的快照，备份方便。
站点的迁移本身没什么好说的，为了方便部署，我自己写了一个简单的基于git@osc的webhook的部署脚本。
迁移至vps后终于可以开启https了，我用的是let&amp;rsquo;s encrypt的免费证书，使用的脚本为https://github.com/Neilpang/le，这个脚本十分傻瓜化，可以非常简单地完成证书的申请和更新。
cdn我使用的是又拍云，加入又拍云联盟，也即在自己的网站上放上又拍云的图标和链接，就可以享受每月15G流量的免费额度，个人博客足够使用了，使用过程详见http://blog.skyx.in/archives/202/。
唯一有点遗憾的是原本使用的评论系统畅言因为不支持https不能使用了，多说被收购后半死不活的，而disqus在国内的大环境也并不十分好用，于是换回了typecho的原生评论。
最终效果参见本博客和https://skyx.in/。</description>
            <content type="html"><![CDATA[<p>SAE现在开始对应用和共享型MyQL收费了，如果应用数比较多，使用SAE的性价比就很低了，于是便重新开始把自己的站点迁移到vps上。之前也试用了很多家的vps，详见<a href="http://blog.skyx.in/category/VPS/" target="_blank">http://blog.skyx.in/category/VPS/</a>，最终还是决定使用<a href="http://www.vultr.com/?ref=6875759" target="_blank">Vultr</a>东京节点，原因主要有几个，一个是vultr最低价套餐的内存较大一些，一个是vultr东京通过<a href="https://vnet.link/?rc=17569" target="_blank">微林</a>中转速度不错（cn3、cn4、hk1的节点都可以），一个是vultr现在有免费的快照，备份方便。</p>

<p>站点的迁移本身没什么好说的，为了方便部署，我自己写了一个简单的基于git@osc的webhook的<a href="http://blog.skyx.in/archives/158/" target="_blank">部署脚本</a>。</p>

<p>迁移至vps后终于可以开启https了，我用的是let&rsquo;s encrypt的免费证书，使用的脚本为<a href="https://github.com/Neilpang/le" target="_blank">https://github.com/Neilpang/le</a>，这个脚本十分傻瓜化，可以非常简单地完成证书的申请和更新。</p>

<p>cdn我使用的是<a href="https://www.upyun.com/" target="_blank">又拍云</a>，加入<a href="https://www.upyun.com/zh/league.html" target="_blank">又拍云联盟</a>，也即在自己的网站上放上又拍云的图标和链接，就可以享受每月15G流量的免费额度，个人博客足够使用了，使用过程详见<a href="http://blog.skyx.in/archives/202/" target="_blank">http://blog.skyx.in/archives/202/</a>。</p>

<p>唯一有点遗憾的是原本使用的评论系统畅言因为不支持https不能使用了，多说被收购后半死不活的，而disqus在国内的大环境也并不十分好用，于是换回了typecho的原生评论。</p>

<p>最终效果参见本博客和<a href="https://skyx.in/" target="_blank">https://skyx.in/</a>。</p>
]]></content>
        </item>
        
        <item>
            <title>通过git@osc的push钩子实现自动部署</title>
            <link>https://qxzzf.com/posts/%E9%80%9A%E8%BF%87gitosc%E7%9A%84push%E9%92%A9%E5%AD%90%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</link>
            <pubDate>Fri, 01 Apr 2016 19:59:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E9%80%9A%E8%BF%87gitosc%E7%9A%84push%E9%92%A9%E5%AD%90%E5%AE%9E%E7%8E%B0%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</guid>
            <description>Git@OSC可以称得上是国内的github了，在国内网络情势严峻的情况下，使用Git@OSC也是一个不错的选择。
最近想要把博客和自己的一个小站Mugen千寻平台从sae迁移到vps上，总的来说就是两个字——折腾。为了解决自动部署问题，查询了一些解决方案后，为了稳定最终决定使用Git@OSC来实现该需求。
Git@OSC的push钩子的详细说明参见HOOK钩子，钩子会post过去的数据格式如下
{ password: &amp;quot;password&amp;quot;, push_data: { before: &amp;quot;fc85635faaf34c6f5104874bce9856c03be9b311&amp;quot;, after: &amp;quot;40dea1b0efb0a3d3f71e8c302d642fe3588c254c&amp;quot;, ref: &amp;quot;refs/heads/master&amp;quot;, user_id: 用户id, user_name: &amp;quot;用户名&amp;quot;, repository: { name: &amp;quot;Test&amp;quot;, url: &amp;quot;git@git.oschina.net:takashiki/Test.git&amp;quot;, description: &amp;quot;描述&amp;quot;, homepage: &amp;quot;http://git.oschina.net/takashiki/Test&amp;quot; }, commits: [ { id: &amp;quot;40dea1b0efb0a3d3f71e8c302d642fe3588c254c&amp;quot;, message: &amp;quot;test&amp;quot;, timestamp: &amp;quot;2015-07-21T16:38:58+08:00&amp;quot;, url: &amp;quot;http://git.oschina.net/takashiki/Test/commit/40dea1b0efb0a3d3f71e8c302d642fe3588c254c&amp;quot;, author: { name: &amp;quot;username&amp;quot;, email: &amp;quot;username@xxx.com&amp;quot; } } ], total_commits_count: 1 } }  每次push时，钩子都会访问我们设定的地址，这样只要我们写一个自动pull代码的脚本就可以实现自动发布了。
&amp;lt;?php header(&amp;quot;Content-type: text/html; charset=utf-8&amp;quot;); if (! isset($_REQUEST[&#39;hook&#39;])) die (&#39;非法请求&#39;); $config = require(&#39;config.php&#39;); //hook内容详见http://git.oschina.net/oschina/git-osc/wikis/HOOK%E9%92%A9%E5%AD%90 $hook = json_decode($_REQUEST[&amp;quot;hook&amp;quot;], true); //$hook = json_decode(file_get_contents(&#39;request.</description>
            <content type="html"><![CDATA[<p><a href="http://git.oschina.net/" target="_blank">Git@OSC</a>可以称得上是国内的github了，在国内网络情势严峻的情况下，使用Git@OSC也是一个不错的选择。</p>

<p>最近想要把博客和自己的一个小站<a href="http://takashiki.sinaapp.com" target="_blank">Mugen千寻平台</a>从sae迁移到vps上，总的来说就是两个字——折腾。为了解决自动部署问题，查询了一些解决方案后，为了稳定最终决定使用Git@OSC来实现该需求。</p>

<p>Git@OSC的push钩子的详细说明参见<a href="http://git.oschina.net/oschina/git-osc/wikis/HOOK%E9%92%A9%E5%AD%90" target="_blank">HOOK钩子</a>，钩子会post过去的数据格式如下</p>

<pre><code>{
    password: &quot;password&quot;,
    push_data: {
        before: &quot;fc85635faaf34c6f5104874bce9856c03be9b311&quot;,
        after: &quot;40dea1b0efb0a3d3f71e8c302d642fe3588c254c&quot;,
        ref: &quot;refs/heads/master&quot;,
        user_id: 用户id,
        user_name: &quot;用户名&quot;,
        repository: {
            name: &quot;Test&quot;,
            url: &quot;git@git.oschina.net:takashiki/Test.git&quot;,
            description: &quot;描述&quot;,
            homepage: &quot;http://git.oschina.net/takashiki/Test&quot;
        },
        commits: [
            {
                id: &quot;40dea1b0efb0a3d3f71e8c302d642fe3588c254c&quot;,
                message: &quot;test&quot;,
                timestamp: &quot;2015-07-21T16:38:58+08:00&quot;,
                url: &quot;http://git.oschina.net/takashiki/Test/commit/40dea1b0efb0a3d3f71e8c302d642fe3588c254c&quot;,
                author: {
                    name: &quot;username&quot;,
                    email: &quot;username@xxx.com&quot;
                }
            }
        ],
        total_commits_count: 1
    }
}
</code></pre>

<p>每次push时，钩子都会访问我们设定的地址，这样只要我们写一个自动pull代码的脚本就可以实现自动发布了。</p>

<pre><code class="language-php">&lt;?php
header(&quot;Content-type: text/html; charset=utf-8&quot;);

if (! isset($_REQUEST['hook'])) die ('非法请求');

$config = require('config.php');
//hook内容详见http://git.oschina.net/oschina/git-osc/wikis/HOOK%E9%92%A9%E5%AD%90
$hook = json_decode($_REQUEST[&quot;hook&quot;], true);
//$hook = json_decode(file_get_contents('request.json'), true);
$project = $hook['push_data']['repository']['name'];

//判断密码
if ($hook['password'] != $config['projects'][$project]['password']) die (&quot;密码错误&quot;);
//判断branch
if (trim(strrchr($hook['push_data']['ref'], '/'), '/') != $config['projects'][$project]['branch']) die (&quot;非自动部署分支&quot;);

$shell = &lt;&lt;&lt;EOF
WEB_PATH='{$config['projects'][$hook['push_data']['repository']['name']]['web_path']}'
WEB_USER='{$config['web_user']}'
WEB_GROUP='{$config['web_group']}'

echo &quot;Start deployment&quot;
cd \$WEB_PATH
echo &quot;pulling source code...&quot;
git reset --hard origin/master
git clean -f
git pull
git checkout master
echo &quot;changing permissions...&quot;
chown -R \$WEB_USER:\$WEB_GROUP \$WEB_PATH
echo &quot;Finished.&quot;
EOF;

file_put_contents('deploy.sh', $shell);
$res = shell_exec(&quot;bash deploy.sh&quot;);

$log_file = &quot;{$project}.log&quot;;
foreach ($hook['push_data']['commits'] as $commit) {
    file_put_contents($log_file, 
        &quot;※&quot; . date('Y-m-d H:i:s') . &quot;\t&quot; . 
        $hook['push_data']['repository']['name'] . &quot;\t&quot; . 
        $commit['message'] . &quot;\t&quot; . 
        $commit['author']['name'] . PHP_EOL, 
        FILE_APPEND
    );
}
file_put_contents($log_file, $res . PHP_EOL, FILE_APPEND);

</code></pre>

<pre><code class="language-php">&lt;?php
return [
    'web_user' =&gt; 'www',
    'web_group' =&gt; 'www',
    'projects' =&gt; [
        'project' =&gt; [
            'password' =&gt; 'password',
            'web_path' =&gt; '/home/wwwroot/default/project',
        ],
    ]
];

</code></pre>

<p>将这两个文件放在可以被访问的地方，需要注意的是，web用户需要有该文件夹的读写权限，而且web用户需要有自己的home目录，且home目录内有.ssh文件夹，文件夹内的公钥已添加到Git@OSC上，这样脚本的git pull才能正常使用。</p>

<p>最近写了另一个版本的部署代码，这个版本不需要web用户使用ssh方式访问git，而是直接在url中加上了用户名和密码，我自己是建了一个小号专门用于部署的，这样更方便但不够安全，仅供参考，详见 <a href="https://github.com/takashiki/tool-scripts/blob/master/deploy.php" target="_blank">https://github.com/takashiki/tool-scripts/blob/master/deploy.php</a>。</p>
]]></content>
        </item>
        
        <item>
            <title>修改debian/ubuntu的ssh登录信息</title>
            <link>https://qxzzf.com/posts/%E4%BF%AE%E6%94%B9debianubuntu%E7%9A%84ssh%E7%99%BB%E5%BD%95%E4%BF%A1%E6%81%AF/</link>
            <pubDate>Wed, 23 Mar 2016 10:10:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E4%BF%AE%E6%94%B9debianubuntu%E7%9A%84ssh%E7%99%BB%E5%BD%95%E4%BF%A1%E6%81%AF/</guid>
            <description>https://nickcharlton.net/posts/debian-ubuntu-dynamic-motd.html
修改/etc/update-motd.d/内的文件，详见上述教程，修改后记得需要将该文件夹内的所有文件赋可执行权限，然后执行即可看到效果：
chmod +x /etc/update-motd.d/ -R run-parts /etc/update-motd.d/  还有一个注意点就是，要将 /etc/motd 文件软链接到 /var/run/motd，要不然每次登陆时都不会有登录信息。</description>
            <content type="html"><![CDATA[<p><a href="https://nickcharlton.net/posts/debian-ubuntu-dynamic-motd.html" target="_blank">https://nickcharlton.net/posts/debian-ubuntu-dynamic-motd.html</a></p>

<p>修改<code>/etc/update-motd.d/</code>内的文件，详见上述教程，修改后记得需要将该文件夹内的所有文件赋可执行权限，然后执行即可看到效果：</p>

<pre><code class="language-shell">chmod +x /etc/update-motd.d/ -R
run-parts /etc/update-motd.d/
</code></pre>

<p>还有一个注意点就是，要将 <code>/etc/motd</code> 文件软链接到 <code>/var/run/motd</code>，要不然每次登陆时都不会有登录信息。</p>
]]></content>
        </item>
        
        <item>
            <title>枫叶主机香港沙田vps简单评测</title>
            <link>https://qxzzf.com/posts/%E6%9E%AB%E5%8F%B6%E4%B8%BB%E6%9C%BA%E9%A6%99%E6%B8%AF%E6%B2%99%E7%94%B0vps%E7%AE%80%E5%8D%95%E8%AF%84%E6%B5%8B/</link>
            <pubDate>Tue, 22 Mar 2016 20:17:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E6%9E%AB%E5%8F%B6%E4%B8%BB%E6%9C%BA%E9%A6%99%E6%B8%AF%E6%B2%99%E7%94%B0vps%E7%AE%80%E5%8D%95%E8%AF%84%E6%B5%8B/</guid>
            <description> 注册地址：https://www.fyzhuji.com/aff.php?aff=1222
枫叶主机香港沙田cn2的主机一个月60元，双核1G内存、5M端口，性价比算十分高了，使用优惠码：DEN-VPSMM还能永久八折。
ping 上海电信 UnixBench 单核 双核 </description>
            <content type="html"><![CDATA[

<p>注册地址：<a href="https://www.fyzhuji.com/aff.php?aff=1222" target="_blank">https://www.fyzhuji.com/aff.php?aff=1222</a></p>

<p>枫叶主机香港沙田cn2的主机一个月60元，双核1G内存、5M端口，性价比算十分高了，使用优惠码：<code>DEN-VPSMM</code>还能永久八折。</p>

<h3 id="ping">ping</h3>

<p>上海电信
<img src="https://ooo.0o0.ooo/2016/03/22/56f137ca1610b.jpg" alt="QQ截图20160322201347.jpg" /></p>

<h3 id="unixbench">UnixBench</h3>

<p>单核
<img src="https://ooo.0o0.ooo/2016/03/22/56f137e6e406b.jpg" alt="QQ截图20160322201204.jpg" /></p>

<p>双核
<img src="https://ooo.0o0.ooo/2016/03/22/56f137d51dc5a.jpg" alt="QQ截图20160322201251.jpg" /></p>
]]></content>
        </item>
        
        <item>
            <title>Conoha东京简单评测</title>
            <link>https://qxzzf.com/posts/conoha%E4%B8%9C%E4%BA%AC%E7%AE%80%E5%8D%95%E8%AF%84%E6%B5%8B/</link>
            <pubDate>Sat, 19 Mar 2016 11:47:13 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/conoha%E4%B8%9C%E4%BA%AC%E7%AE%80%E5%8D%95%E8%AF%84%E6%B5%8B/</guid>
            <description> 注册地址：https://www.conoha.jp/referral/?token=9IRSAkzxcuii.Pf4WTXRpgI8NQVVMHatRKWTMT9._F2anbDm7iI-GHK
ping 上海电信 UnixBench 单核： 双核： </description>
            <content type="html"><![CDATA[

<p>注册地址：<a href="https://www.conoha.jp/referral/?token=9IRSAkzxcuii.Pf4WTXRpgI8NQVVMHatRKWTMT9._F2anbDm7iI-GHK" target="_blank">https://www.conoha.jp/referral/?token=9IRSAkzxcuii.Pf4WTXRpgI8NQVVMHatRKWTMT9._F2anbDm7iI-GHK</a></p>

<h2 id="ping">ping</h2>

<p>上海电信
<img src="https://ooo.0o0.ooo/2016/03/18/56eccf1c55b11.jpg" alt="QQ截图20160319094932.jpg" /></p>

<h2 id="unixbench">UnixBench</h2>

<p>单核：
<img src="https://ooo.0o0.ooo/2016/03/18/56eccf3681fed.jpg" alt="QQ截图20160319105811.jpg" /></p>

<p>双核：
<img src="https://ooo.0o0.ooo/2016/03/18/56eccf453e7e3.jpg" alt="QQ截图20160319105820.jpg" /></p>
]]></content>
        </item>
        
        <item>
            <title>Linode Ubuntu在apt-get时卡住的解决方案</title>
            <link>https://qxzzf.com/posts/linode-ubuntu%E5%9C%A8apt-get%E6%97%B6%E5%8D%A1%E4%BD%8F%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link>
            <pubDate>Fri, 18 Mar 2016 16:00:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/linode-ubuntu%E5%9C%A8apt-get%E6%97%B6%E5%8D%A1%E4%BD%8F%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid>
            <description>在使用linode时用apt-get经常会出现卡住的问题，看起来像是因为linode默认使用了ipv6的问题，于是使用以下命令试了一下ipv4会不会卡住：
apt-get -o Acquire::ForceIPv4=true update  试过后发现果然不会出现卡住的问题了，于是编辑/etc/apt/apt.conf.d/99force-ipv4文件，内容如下：
Acquire::ForceIPv4 &amp;quot;true&amp;quot;;  这样apt-get就会强制使用ipv4了。
参考链接： https://www.vultr.com/docs/force-apt-get-to-ipv4-or-ipv6-on-ubuntu-or-debian</description>
            <content type="html"><![CDATA[<p>在使用linode时用apt-get经常会出现卡住的问题，看起来像是因为linode默认使用了ipv6的问题，于是使用以下命令试了一下ipv4会不会卡住：</p>

<pre><code class="language-shell">apt-get -o Acquire::ForceIPv4=true update
</code></pre>

<p>试过后发现果然不会出现卡住的问题了，于是编辑<code>/etc/apt/apt.conf.d/99force-ipv4</code>文件，内容如下：</p>

<pre><code class="language-shell">Acquire::ForceIPv4 &quot;true&quot;;
</code></pre>

<p>这样apt-get就会强制使用ipv4了。</p>

<p>参考链接： <a href="https://www.vultr.com/docs/force-apt-get-to-ipv4-or-ipv6-on-ubuntu-or-debian" target="_blank">https://www.vultr.com/docs/force-apt-get-to-ipv4-or-ipv6-on-ubuntu-or-debian</a></p>
]]></content>
        </item>
        
        <item>
            <title>使用GoodSync实现文件双向实时同步</title>
            <link>https://qxzzf.com/posts/%E4%BD%BF%E7%94%A8goodsync%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%8F%8C%E5%90%91%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5/</link>
            <pubDate>Wed, 16 Mar 2016 09:16:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E4%BD%BF%E7%94%A8goodsync%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E5%8F%8C%E5%90%91%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5/</guid>
            <description>前情：http://blog.skyx.in/archives/233/。
本来在windows上进行开发使用vagrant会是一种比较好的解决方案，但是vagrant只能在一台客户端机器上，如果有多台开发机并且经常切换，还是使用Cloud9这样的WebIDE或者vps比较方便。不过毕竟WebIDE没有phpStorm这样的IDE强大，所以我最后还是选择了使用vps。虽然phpStorm能自动将本地代码同步到服务器，但却不能将服务器上的文件变化同步回来，这就得借用第三方工具了。
上篇文章中我是使用rsync来实现这个需求的，不过后来发现了更加方便使用的GoodSync。Window上的安装就不说了，Linux上只需下载可执行文件即可使用，下载地址：http://www.goodsync.com/for-linux。
下载并解压后，我们将goodsync的几个可执行文件复制到/usr/bin中方便使用：
cp gs-server /usr/bin/gs-server cp gscp /usr/bin/gscp cp gsync /usr/bin/gsync  然后我们执行增加用户的命令，注意替换其中的用户名密码，之后直接执行gs-server就可以启动了：
gs-server /set-admin=&amp;quot;gs-userid:gs-password:system-userid&amp;quot; gs-server  然后使用 supervisor 设置开机启动，编辑/etc/supervisor/conf.d/goodsync.conf内容如下：
[program:gs-server] command=/usr/bin/gs-server autostart=true autorestart=true user=root environment=HOME=&#39;/root&#39;  重启supervisor并查看任务运行状态：
service supervisor restart supervisorctl status  之后Windows客户端上的设置参考这篇教程即可，http://jingyan.baidu.com/article/a3761b2bbbef2f1577f9aa43.html。</description>
            <content type="html"><![CDATA[<p>前情：<a href="http://blog.skyx.in/archives/233/" target="_blank">http://blog.skyx.in/archives/233/</a>。</p>

<p>本来在windows上进行开发使用vagrant会是一种比较好的解决方案，但是vagrant只能在一台客户端机器上，如果有多台开发机并且经常切换，还是使用<a href="https://c9.io/" target="_blank">Cloud9</a>这样的WebIDE或者vps比较方便。不过毕竟WebIDE没有phpStorm这样的IDE强大，所以我最后还是选择了使用vps。虽然phpStorm能自动将本地代码同步到服务器，但却不能将服务器上的文件变化同步回来，这就得借用第三方工具了。</p>

<p>上篇文章中我是使用rsync来实现这个需求的，不过后来发现了更加方便使用的<a href="http://www.goodsync.com/" target="_blank">GoodSync</a>。Window上的安装就不说了，Linux上只需下载可执行文件即可使用，下载地址：<a href="http://www.goodsync.com/for-linux" target="_blank">http://www.goodsync.com/for-linux</a>。</p>

<p>下载并解压后，我们将goodsync的几个可执行文件复制到<code>/usr/bin</code>中方便使用：</p>

<pre><code class="language-shell">cp gs-server /usr/bin/gs-server
cp gscp /usr/bin/gscp
cp gsync /usr/bin/gsync
</code></pre>

<p>然后我们执行增加用户的命令，注意替换其中的用户名密码，之后直接执行gs-server就可以启动了：</p>

<pre><code class="language-shell">gs-server /set-admin=&quot;gs-userid:gs-password:system-userid&quot;
gs-server
</code></pre>

<p>然后使用 supervisor 设置开机启动，编辑<code>/etc/supervisor/conf.d/goodsync.conf</code>内容如下：</p>

<pre><code class="language-shell">[program:gs-server]
command=/usr/bin/gs-server
autostart=true
autorestart=true
user=root
environment=HOME='/root'
</code></pre>

<p>重启supervisor并查看任务运行状态：</p>

<pre><code class="language-shell">service supervisor restart
supervisorctl status
</code></pre>

<p>之后Windows客户端上的设置参考这篇教程即可，<a href="http://jingyan.baidu.com/article/a3761b2bbbef2f1577f9aa43.html" target="_blank">http://jingyan.baidu.com/article/a3761b2bbbef2f1577f9aa43.html</a>。</p>
]]></content>
        </item>
        
        <item>
            <title>ubuntu防火墙iptables操作学习</title>
            <link>https://qxzzf.com/posts/ubuntu%E9%98%B2%E7%81%AB%E5%A2%99iptables%E6%93%8D%E4%BD%9C%E5%AD%A6%E4%B9%A0/</link>
            <pubDate>Tue, 15 Mar 2016 20:50:02 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/ubuntu%E9%98%B2%E7%81%AB%E5%A2%99iptables%E6%93%8D%E4%BD%9C%E5%AD%A6%E4%B9%A0/</guid>
            <description>官方文档地址https://help.ubuntu.com/community/IptablesHowTo
ubuntu 15.10 修改配置文件后使之生效：
iptables-apply /etc/iptables.up.rules  </description>
            <content type="html"><![CDATA[<p>官方文档地址<a href="https://help.ubuntu.com/community/IptablesHowTo" target="_blank">https://help.ubuntu.com/community/IptablesHowTo</a></p>

<p>ubuntu 15.10 修改配置文件后使之生效：</p>

<pre><code class="language-shell">iptables-apply /etc/iptables.up.rules
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>在Windows上使用cwRsync同步Linux文件</title>
            <link>https://qxzzf.com/posts/%E5%9C%A8windows%E4%B8%8A%E4%BD%BF%E7%94%A8cwrsync%E5%90%8C%E6%AD%A5linux%E6%96%87%E4%BB%B6/</link>
            <pubDate>Tue, 15 Mar 2016 16:12:43 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E5%9C%A8windows%E4%B8%8A%E4%BD%BF%E7%94%A8cwrsync%E5%90%8C%E6%AD%A5linux%E6%96%87%E4%BB%B6/</guid>
            <description>现在我平时日常使用的电脑操作系统为Windows，但Windows用于开发会有很多的坑，于是便搞了一个vps在上面进行开发，然而phpStorm的Deployment只能支持自动同步本地文件至远程服务器，而服务器上文件有改动时却无法自动同步至本地，这在经常需要在服务器上进行composer和npm操作的情况下十分不便。
我最初想要解决这个问题的方法是找phpStorm有没有这方面的插件，然而并没有找到。后来又想将vps上的目录通过Samba或者类似NetDrive这种软件挂载成一个驱动器，这样就能直接用phpStorm打开远程的项目了，然而卡到飞起，已然不是能够使用的状态了，遂打消了这方面的念头，决定使用rsync来实现。
cwRsync免费版下载地址：https://www.itefix.net/content/cwrsync-free-edition，免费版的cwRsync已经能满足需求，下载下来的是压缩包，直接解压就可以使用了。
服务器端安装可以直接使用包管理器安装，就不多说了。安装好后编辑/etc/rsyncd.conf，内容如下：
#全局配置 uid = root #用户名，也即为执行rsync操作的用户，若该用户没有足够的权限操作需备份的文件夹则备份时会报错 gid = root #用户组名 use chroot = no read only = yes #访问权限控制 #hosts allow=172.16.0.0/255.255.0.0 192.168.1.0/255.255.255.0 10.0.1.0/255.255.255.0 #hosts deny=* max connections = 5 pid file = /var/run/rsyncd.pid secrets file = /etc/rsyncd/rsyncd.secrets #lock file = /var/run/rsync.lock #motd file = /etc/rsyncd/rsyncd.motd #log file = /var/log/rsync.log #This will log every file transferred - up to 85,000+ per user, per sync transfer logging = yes log format = %t %a %m %f %b syslog facility = local3 timeout = 300 #模块配置 [webapp] path = /data/wwwroot/ #服务器上需要同步的路径，如不存在的话同步时会报错 list=yes ignore errors auth users = rsync #配置在rsyncd.</description>
            <content type="html"><![CDATA[<p>现在我平时日常使用的电脑操作系统为Windows，但Windows用于开发会有很多的坑，于是便搞了一个vps在上面进行开发，然而phpStorm的Deployment只能支持自动同步本地文件至远程服务器，而服务器上文件有改动时却无法自动同步至本地，这在经常需要在服务器上进行composer和npm操作的情况下十分不便。</p>

<p>我最初想要解决这个问题的方法是找phpStorm有没有这方面的插件，然而并没有找到。后来又想将vps上的目录通过Samba或者类似NetDrive这种软件挂载成一个驱动器，这样就能直接用phpStorm打开远程的项目了，然而卡到飞起，已然不是能够使用的状态了，遂打消了这方面的念头，决定使用rsync来实现。</p>

<p>cwRsync免费版下载地址：<a href="https://www.itefix.net/content/cwrsync-free-edition" target="_blank">https://www.itefix.net/content/cwrsync-free-edition</a>，免费版的cwRsync已经能满足需求，下载下来的是压缩包，直接解压就可以使用了。</p>

<p>服务器端安装可以直接使用包管理器安装，就不多说了。安装好后编辑<code>/etc/rsyncd.conf</code>，内容如下：</p>

<pre><code class="language-shell">#全局配置
uid = root #用户名，也即为执行rsync操作的用户，若该用户没有足够的权限操作需备份的文件夹则备份时会报错
gid = root #用户组名
use chroot = no
read only = yes

#访问权限控制
#hosts allow=172.16.0.0/255.255.0.0 192.168.1.0/255.255.255.0 10.0.1.0/255.255.255.0
#hosts deny=*                                

max connections = 5
pid file = /var/run/rsyncd.pid
secrets file = /etc/rsyncd/rsyncd.secrets
#lock file = /var/run/rsync.lock           
#motd file = /etc/rsyncd/rsyncd.motd        

#log file = /var/log/rsync.log               
#This will log every file transferred - up to 85,000+ per user, per sync
transfer logging = yes
log format = %t %a %m %f %b
syslog facility = local3

timeout = 300

#模块配置
[webapp]
path = /data/wwwroot/ #服务器上需要同步的路径，如不存在的话同步时会报错
list=yes
ignore errors
auth users = rsync #配置在rsyncd.secrets中的用户名
</code></pre>

<p>然后新建<code>/etc/rsyncd/rsyncd.secrets</code>文件，内容即为<code>用户名：密码</code>对，一行一个：</p>

<pre><code class="language-shell">rsync:rsync
</code></pre>

<p>文件都配置好后使用如下命令启动rsync服务端：</p>

<pre><code class="language-shell">rsync --daemon --config /etc/rsyncd.conf
</code></pre>

<p>rsync默认使用端口为873，需要在防火墙里开放873端口的tcp链接。</p>

<p>这样服务器端就配置好了，在Windows客户端中进入cwRsync的bin目录，创建<code>rsyncd.secrets</code>文件，内容即为刚才服务端<code>/etc/rsyncd/rsyncd.secrets</code>文件中的密码部分（不需要用户名），然后执行以下命令即可开始同步：</p>

<pre><code class="language-shell">rsync -vzrtopg --progress --delete -
-password-file=rsyncd.secrets rsync@118.193.255.211::webapp local_sync_dir
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Git提交文件时肉眼看不出变化的文件状态却为被修改的可能原因</title>
            <link>https://qxzzf.com/posts/git%E6%8F%90%E4%BA%A4%E6%96%87%E4%BB%B6%E6%97%B6%E8%82%89%E7%9C%BC%E7%9C%8B%E4%B8%8D%E5%87%BA%E5%8F%98%E5%8C%96%E7%9A%84%E6%96%87%E4%BB%B6%E7%8A%B6%E6%80%81%E5%8D%B4%E4%B8%BA%E8%A2%AB%E4%BF%AE%E6%94%B9%E7%9A%84%E5%8F%AF%E8%83%BD%E5%8E%9F%E5%9B%A0/</link>
            <pubDate>Tue, 15 Mar 2016 09:44:47 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/git%E6%8F%90%E4%BA%A4%E6%96%87%E4%BB%B6%E6%97%B6%E8%82%89%E7%9C%BC%E7%9C%8B%E4%B8%8D%E5%87%BA%E5%8F%98%E5%8C%96%E7%9A%84%E6%96%87%E4%BB%B6%E7%8A%B6%E6%80%81%E5%8D%B4%E4%B8%BA%E8%A2%AB%E4%BF%AE%E6%94%B9%E7%9A%84%E5%8F%AF%E8%83%BD%E5%8E%9F%E5%9B%A0/</guid>
            <description>文件的换行符改变 在Windows上最容易出现这种问题，由于*nix系统的换行符为LF(\n)，而Windows的换行符为CRLF(\r\n)，所以在Windows上的默认配置的Git会在git pull时将LF换行符换为CRLF，而git push时会再将换行符换回去。然而，当文件中含有中文时Git的这个功能会出现问题，pull时能正常转换，push时却无法正常执行，这时就会出现文件比对时整个文件内容都改变了，但肉眼却无法看出。
解决方法很简单，直接执行以下命令进行全局配置就可以了：
git config --global core.autocrlf false  更详细的内容可以看这篇博客：http://blog.jobbole.com/46200/。
文件模式的改变 有的时候我们可能会对项目文件进行chmod操作或者在转移项目文件的过程中无意地改变了文件的模式，这时候文件状态也会变成被修改，但diff也没什么不同的地方。</description>
            <content type="html"><![CDATA[

<h3 id="文件的换行符改变">文件的换行符改变</h3>

<p>在Windows上最容易出现这种问题，由于*nix系统的换行符为<code>LF(\n)</code>，而Windows的换行符为<code>CRLF(\r\n)</code>，所以在Windows上的默认配置的Git会在<code>git pull</code>时将<code>LF</code>换行符换为<code>CRLF</code>，而<code>git push</code>时会再将换行符换回去。然而，当文件中含有中文时Git的这个功能会出现问题，pull时能正常转换，push时却无法正常执行，这时就会出现文件比对时整个文件内容都改变了，但肉眼却无法看出。</p>

<p>解决方法很简单，直接执行以下命令进行全局配置就可以了：</p>

<pre><code class="language-shell">git config --global core.autocrlf false
</code></pre>

<p>更详细的内容可以看这篇博客：<a href="http://blog.jobbole.com/46200/" target="_blank">http://blog.jobbole.com/46200/</a>。</p>

<h3 id="文件模式的改变">文件模式的改变</h3>

<p>有的时候我们可能会对项目文件进行chmod操作或者在转移项目文件的过程中无意地改变了文件的模式，这时候文件状态也会变成被修改，但diff也没什么不同的地方。</p>
]]></content>
        </item>
        
        <item>
            <title>Vultr东京简单评测</title>
            <link>https://qxzzf.com/posts/vultr%E4%B8%9C%E4%BA%AC%E7%AE%80%E5%8D%95%E8%AF%84%E6%B5%8B/</link>
            <pubDate>Fri, 11 Mar 2016 16:09:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/vultr%E4%B8%9C%E4%BA%AC%E7%AE%80%E5%8D%95%E8%AF%84%E6%B5%8B/</guid>
            <description>注册地址：http://www.vultr.com/?ref=6875759
ping 上海电信 speedtest地址：https://www.vultr.com/faq/#downloadspeedtests
UnixBench 官方评测页：https://www.vultr.com/benchmarks/</description>
            <content type="html"><![CDATA[

<p>注册地址：<a href="http://www.vultr.com/?ref=6875759" target="_blank">http://www.vultr.com/?ref=6875759</a></p>

<h2 id="ping">ping</h2>

<p>上海电信
<img src="https://ooo.0o0.ooo/2016/03/11/56e27e6d9680d.png" alt="QQ截图20160311160821.png" /></p>

<p>speedtest地址：<a href="https://www.vultr.com/faq/#downloadspeedtests" target="_blank">https://www.vultr.com/faq/#downloadspeedtests</a></p>

<h2 id="unixbench">UnixBench</h2>

<p><img src="https://ooo.0o0.ooo/2016/03/11/56e2876e6a37a.png" alt="QQ截图20160311165000.png" />
官方评测页：<a href="https://www.vultr.com/benchmarks/" target="_blank">https://www.vultr.com/benchmarks/</a></p>
]]></content>
        </item>
        
        <item>
            <title>微林vxTrans使用小记</title>
            <link>https://qxzzf.com/posts/%E5%BE%AE%E6%9E%97vxtrans%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%B0/</link>
            <pubDate>Fri, 11 Mar 2016 15:41:40 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E5%BE%AE%E6%9E%97vxtrans%E4%BD%BF%E7%94%A8%E5%B0%8F%E8%AE%B0/</guid>
            <description>微林是一款付费的流量转发服务，简单来说就相当于起到跳板机的作用，我们在国内访问国外的vps时速度往往会很慢，在终端里敲命令也是一种折磨，这时候就是一种非常适合使用vxTrans的场景。注册地址：https://vnet.link/?rc=17569
微林注册好后需要购买流量点券，支持支付宝和Paypal，平均差不多1G流量1元左右，用来做ssh的流量转发成本是十分低的，如果用来转发shadowsocks也可以，不过显得性价比稍低。
目前微林创建连接点时需要先验证目标主机，详见https://vnet.link/service/vxtrans/index，也就是说我们只需要在主机里执行这句命令就可以了：
创建链接点时名称可以起一个自己能分辨的，入口地址选择“中国 - China Telecom Enterprise”也就是cn2，或者根据自身需要选择一个节点，入口端口可以自己填，不填则随机分配，目的地址是你的主机IP，目的地端口就是SSH的端口，一般是22。填好后点击“建立连接点”，等几分钟（小于10分钟），就会看到状态变成“已连通”。
此时即可通过微林的入口地址和入口端口连接到你的服务器了。</description>
            <content type="html"><![CDATA[<p>微林是一款付费的流量转发服务，简单来说就相当于起到跳板机的作用，我们在国内访问国外的vps时速度往往会很慢，在终端里敲命令也是一种折磨，这时候就是一种非常适合使用vxTrans的场景。注册地址：<a href="https://vnet.link/?rc=17569" target="_blank">https://vnet.link/?rc=17569</a></p>

<p>微林注册好后需要购买流量点券，支持支付宝和Paypal，平均差不多1G流量1元左右，用来做ssh的流量转发成本是十分低的，如果用来转发shadowsocks也可以，不过显得性价比稍低。</p>

<p>目前微林创建连接点时需要先验证目标主机，详见<a href="https://vnet.link/service/vxtrans/index" target="_blank">https://vnet.link/service/vxtrans/index</a>，也就是说我们只需要在主机里执行这句命令就可以了：</p>

<p><img src="https://ooo.0o0.ooo/2016/03/11/56e279a0eca57.png" alt="QQ截图20160311155124.png" /></p>

<p>创建链接点时名称可以起一个自己能分辨的，入口地址选择“中国 - China Telecom Enterprise”也就是cn2，或者根据自身需要选择一个节点，入口端口可以自己填，不填则随机分配，目的地址是你的主机IP，目的地端口就是SSH的端口，一般是22。填好后点击“建立连接点”，等几分钟（小于10分钟），就会看到状态变成“已连通”。</p>

<p>此时即可通过微林的入口地址和入口端口连接到你的服务器了。</p>
]]></content>
        </item>
        
        <item>
            <title>linode新加坡简单评测</title>
            <link>https://qxzzf.com/posts/linode%E6%96%B0%E5%8A%A0%E5%9D%A1%E7%AE%80%E5%8D%95%E8%AF%84%E6%B5%8B/</link>
            <pubDate>Thu, 10 Mar 2016 15:35:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/linode%E6%96%B0%E5%8A%A0%E5%9D%A1%E7%AE%80%E5%8D%95%E8%AF%84%E6%B5%8B/</guid>
            <description>注册地址：https://www.linode.com/?r=57aeb1b451f6f0ae9548e85a471003a460b563a9
ping 测速地址：https://www.linode.com/speedtest
上海电信 UnixBench apt-get卡住问题解决方案</description>
            <content type="html"><![CDATA[

<p>注册地址：<a href="https://www.linode.com/?r=57aeb1b451f6f0ae9548e85a471003a460b563a9" target="_blank">https://www.linode.com/?r=57aeb1b451f6f0ae9548e85a471003a460b563a9</a></p>

<h2 id="ping">ping</h2>

<p>测速地址：<a href="https://www.linode.com/speedtest" target="_blank">https://www.linode.com/speedtest</a></p>

<p>上海电信
<img src="https://ooo.0o0.ooo/2016/03/10/56e120913aead.png" alt="QQ截图20160310151913.png" /></p>

<h2 id="unixbench">UnixBench</h2>

<p><img src="https://ooo.0o0.ooo/2016/03/18/56ebbed3143c0.png" alt="QQ截图20160318163113.png" /></p>

<p><a href="http://blog.skyx.in/archives/239/" target="_blank">apt-get卡住问题解决方案</a></p>
]]></content>
        </item>
        
        <item>
            <title>DigitalOcean San Francisco简单评测</title>
            <link>https://qxzzf.com/posts/digitalocean-san-francisco%E7%AE%80%E5%8D%95%E8%AF%84%E6%B5%8B/</link>
            <pubDate>Thu, 10 Mar 2016 14:31:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/digitalocean-san-francisco%E7%AE%80%E5%8D%95%E8%AF%84%E6%B5%8B/</guid>
            <description> 注册链接：https://m.do.co/c/7ae5f717f43f
ping 测速地址：http://speedtest-sfo1.digitalocean.com/
上海电信 UnixBench wget https://teddysun.com/wp-content/uploads/unixbench.sh &amp;amp;&amp;amp; \ chmod +x unixbench.sh &amp;amp;&amp;amp; \ ./unixbench.sh  </description>
            <content type="html"><![CDATA[

<p>注册链接：<a href="https://m.do.co/c/7ae5f717f43f" target="_blank">https://m.do.co/c/7ae5f717f43f</a></p>

<h2 id="ping">ping</h2>

<p>测速地址：<a href="http://speedtest-sfo1.digitalocean.com/" target="_blank">http://speedtest-sfo1.digitalocean.com/</a></p>

<p>上海电信
<img src="https://ooo.0o0.ooo/2016/03/10/56e1156e04a9a.png" alt="ping.png" /></p>

<h2 id="unixbench">UnixBench</h2>

<pre><code class="language-shell">wget https://teddysun.com/wp-content/uploads/unixbench.sh &amp;&amp; \
chmod +x unixbench.sh &amp;&amp; \
./unixbench.sh
</code></pre>

<p><img src="https://ooo.0o0.ooo/2016/03/10/56e11e422998b.png" alt="UnixBench" /></p>
]]></content>
        </item>
        
        <item>
            <title>ss-panel及shadowsocks-manyuser部署</title>
            <link>https://qxzzf.com/posts/ss-panel%E5%8F%8Ashadowsocks-manyuser%E9%83%A8%E7%BD%B2/</link>
            <pubDate>Mon, 07 Mar 2016 11:52:39 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/ss-panel%E5%8F%8Ashadowsocks-manyuser%E9%83%A8%E7%BD%B2/</guid>
            <description>https://prinzeugen.net/build-shadowsocks-sharing-site-with-ss-panel/</description>
            <content type="html"><![CDATA[<p><a href="https://prinzeugen.net/build-shadowsocks-sharing-site-with-ss-panel/" target="_blank">https://prinzeugen.net/build-shadowsocks-sharing-site-with-ss-panel/</a></p>
]]></content>
        </item>
        
        <item>
            <title>Sublime Text3安装Package Control和常用插件</title>
            <link>https://qxzzf.com/posts/sublime-text3%E5%AE%89%E8%A3%85package-control%E5%92%8C%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/</link>
            <pubDate>Fri, 04 Mar 2016 20:32:58 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/sublime-text3%E5%AE%89%E8%A3%85package-control%E5%92%8C%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6/</guid>
            <description>Sublime Text3 是文本编辑器中比较优秀的一款，安装第三方插件比较推荐使用包管理器 Package Control，使用快捷键Ctrl +或点击View &amp;gt; Show Console`可以打开命令行，然后在命令行输入如下命令即可安装：
import urllib.request,os,hashlib; h = &#39;2915d1851351e5ee549c20394736b442&#39; + &#39;8bc59f460fa1548d1514676163dafc88&#39;; pf = &#39;Package Control.sublime-package&#39;; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( &#39;http://packagecontrol.io/&#39; + pf.replace(&#39; &#39;, &#39;%20&#39;)).read(); dh = hashlib.sha256(by).hexdigest(); print(&#39;Error validating download (got %s instead of %s), please try manual install&#39; % (dh, h)) if dh != h else open(os.path.join( ipp, pf), &#39;wb&#39; ).write(by)  安装完成后重启Sublime，使用快捷键Ctrl + Shift + P呼出快捷面板，然后输入install package后回车，此时搜索你需要的插件后回车即可安装。</description>
            <content type="html"><![CDATA[<p>Sublime Text3 是文本编辑器中比较优秀的一款，安装第三方插件比较推荐使用包管理器 Package Control，使用快捷键<code>Ctrl +</code><code>或点击</code>View &gt; Show Console`可以打开命令行，然后在命令行输入如下命令即可安装：</p>

<pre><code class="language-python">import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)
</code></pre>

<p>安装完成后重启Sublime，使用快捷键<code>Ctrl + Shift + P</code>呼出快捷面板，然后输入<code>install package</code>后回车，此时搜索你需要的插件后回车即可安装。</p>
]]></content>
        </item>
        
        <item>
            <title>Windows上实用软件整理</title>
            <link>https://qxzzf.com/posts/windows%E4%B8%8A%E5%AE%9E%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%95%B4%E7%90%86/</link>
            <pubDate>Fri, 04 Mar 2016 11:33:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/windows%E4%B8%8A%E5%AE%9E%E7%94%A8%E8%BD%AF%E4%BB%B6%E6%95%B4%E7%90%86/</guid>
            <description> 微软自家  Visual Studio VS Code  浏览器  Chrome（MyChrome） Firefox  开发工具  git phpStudy（这个貌似有后门，虽然功能十分强大https://www.v2ex.com/t/258852） jetbrains全家桶 notepad++ sublime text  服务器相关  xshell + xftp GoodSync  应用工具  everything SwitchHosts cow clover DnsJumper  其他  爱壁纸 shadowsocks Photoshop TeamViewer  </description>
            <content type="html"><![CDATA[

<h3 id="微软自家">微软自家</h3>

<ul>
<li>Visual Studio</li>
<li>VS Code</li>
</ul>

<h3 id="浏览器">浏览器</h3>

<ul>
<li>Chrome（<a href="http://code.taobao.org/p/mychrome/src/trunk/release/" target="_blank">MyChrome</a>）</li>
<li>Firefox</li>
</ul>

<h3 id="开发工具">开发工具</h3>

<ul>
<li>git</li>
<li>phpStudy（这个貌似有后门，虽然功能十分强大<a href="https://www.v2ex.com/t/258852" target="_blank">https://www.v2ex.com/t/258852</a>）</li>
<li>jetbrains全家桶</li>
<li>notepad++</li>
<li>sublime text</li>
</ul>

<h3 id="服务器相关">服务器相关</h3>

<ul>
<li>xshell + xftp</li>
<li>GoodSync</li>
</ul>

<h3 id="应用工具">应用工具</h3>

<ul>
<li>everything</li>
<li>SwitchHosts</li>
<li>cow</li>
<li>clover</li>
<li>DnsJumper</li>
</ul>

<h3 id="其他">其他</h3>

<ul>
<li>爱壁纸</li>
<li>shadowsocks</li>
<li>Photoshop</li>
<li>TeamViewer</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>使用dpkg安装ubuntu内核</title>
            <link>https://qxzzf.com/posts/%E4%BD%BF%E7%94%A8dpkg%E5%AE%89%E8%A3%85ubuntu%E5%86%85%E6%A0%B8/</link>
            <pubDate>Wed, 02 Mar 2016 10:08:43 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E4%BD%BF%E7%94%A8dpkg%E5%AE%89%E8%A3%85ubuntu%E5%86%85%E6%A0%B8/</guid>
            <description>以64位ubuntu15.10、4.4版本内核为例，ubuntu官方构建的内核安装包地址为http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.4-wily/。
需下载的文件有三个，分别为对应的headers、image和headers-all。
然后执行以下命令进行安装：
dpkg -i \ linux-headers-4.4.3-040403_4.4.3-040403.201602251634_all.deb \ linux-headers-4.4.3-040403-generic_4.4.3-040403.201602251634_amd64.deb \ linux-image-4.4.3-040403-generic_4.4.3-040403.201602251634_amd64.deb  </description>
            <content type="html"><![CDATA[<p>以64位ubuntu15.10、4.4版本内核为例，ubuntu官方构建的内核安装包地址为<a href="http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.4-wily/" target="_blank">http://kernel.ubuntu.com/~kernel-ppa/mainline/v4.4-wily/</a>。</p>

<p>需下载的文件有三个，分别为对应的headers、image和headers-all。</p>

<p>然后执行以下命令进行安装：</p>

<pre><code class="language-shell">dpkg -i \
linux-headers-4.4.3-040403_4.4.3-040403.201602251634_all.deb \
linux-headers-4.4.3-040403-generic_4.4.3-040403.201602251634_amd64.deb \
linux-image-4.4.3-040403-generic_4.4.3-040403.201602251634_amd64.deb
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>locvps香港沙田机房vps评测</title>
            <link>https://qxzzf.com/posts/locvps%E9%A6%99%E6%B8%AF%E6%B2%99%E7%94%B0%E6%9C%BA%E6%88%BFvps%E8%AF%84%E6%B5%8B/</link>
            <pubDate>Tue, 01 Mar 2016 16:16:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/locvps%E9%A6%99%E6%B8%AF%E6%B2%99%E7%94%B0%E6%9C%BA%E6%88%BFvps%E8%AF%84%E6%B5%8B/</guid>
            <description> http://my.locvps.com/page.aspx?c=referral&amp;amp;u=22801
ping 上海电信 UnixBench </description>
            <content type="html"><![CDATA[

<p><a href="http://my.locvps.com/page.aspx?c=referral&amp;u=22801" target="_blank">http://my.locvps.com/page.aspx?c=referral&amp;u=22801</a></p>

<h2 id="ping">ping</h2>

<p>上海电信
<img src="https://ooo.0o0.ooo/2016/03/01/56d5509db1ab7.png" alt="ping" /></p>

<h2 id="unixbench">UnixBench</h2>

<p><img src="https://ooo.0o0.ooo/2016/03/01/56d55031cb41d.png" alt="unixbench" /></p>
]]></content>
        </item>
        
        <item>
            <title>购买vps比较需要关注的几点</title>
            <link>https://qxzzf.com/posts/%E8%B4%AD%E4%B9%B0vps%E6%AF%94%E8%BE%83%E9%9C%80%E8%A6%81%E5%85%B3%E6%B3%A8%E7%9A%84%E5%87%A0%E7%82%B9/</link>
            <pubDate>Tue, 01 Mar 2016 14:32:01 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E8%B4%AD%E4%B9%B0vps%E6%AF%94%E8%BE%83%E9%9C%80%E8%A6%81%E5%85%B3%E6%B3%A8%E7%9A%84%E5%87%A0%E7%82%B9/</guid>
            <description> ping值 cpu性能（unixbench） 网络带宽和流量 磁盘IO和大小 客户服务  </description>
            <content type="html"><![CDATA[<ul>
<li>ping值</li>
<li>cpu性能（unixbench）</li>
<li>网络带宽和流量</li>
<li>磁盘IO和大小</li>
<li>客户服务</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>ubuntu命令行下版本升级方法</title>
            <link>https://qxzzf.com/posts/ubuntu%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7%E6%96%B9%E6%B3%95/</link>
            <pubDate>Sun, 28 Feb 2016 19:39:03 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/ubuntu%E5%91%BD%E4%BB%A4%E8%A1%8C%E4%B8%8B%E7%89%88%E6%9C%AC%E5%8D%87%E7%BA%A7%E6%96%B9%E6%B3%95/</guid>
            <description>ubuntu在命令行下的版本升级，官方比较推荐的方式是使用do-release-upgrade，也即按顺序执行以下命令即可：
apt-get update apt-get upgrade apt-get install update-manager-core do-release-upgrade  如果这种方式遇到如下报错：
Error authenticating some packages It was not possible to authenticate some packages. This may be a transient network problem. You may want to try again later. See below for a list of unauthenticated packages  网上有一种解决办法是创建/etc/update-manager/release-upgrades.d/unauth.cfg文件，内容如下：
[Distro] AllowUnauthenticated=yes  然后再执行do-release-upgrade。
不过我使用该方法后仍然失败，最后只好采用debian的升级方法来进行升级，步骤如下：
修改/etc/apt/source.list文件，修改其中的版本号，比如14.04修改到15.10即将trusty替换为wily，若使用vim可以批量替换:%s/trusty/wily/g。
然后依次执行以下命令即可：
apt-get update apt-get upgrade apt-get dist-upgrade  查看ubuntu版本命令如下:lsb_release -a。</description>
            <content type="html"><![CDATA[<p>ubuntu在命令行下的版本升级，官方比较推荐的方式是使用<code>do-release-upgrade</code>，也即按顺序执行以下命令即可：</p>

<pre><code class="language-shell">apt-get update
apt-get upgrade
apt-get install update-manager-core
do-release-upgrade
</code></pre>

<p>如果这种方式遇到如下报错：</p>

<pre><code class="language-shell">Error authenticating some packages

It was not possible to authenticate some packages. This may be a transient network problem. You may want to try again later. See below for a list of unauthenticated packages
</code></pre>

<p>网上有一种解决办法是创建<code>/etc/update-manager/release-upgrades.d/unauth.cfg</code>文件，内容如下：</p>

<pre><code class="language-shell">[Distro]
AllowUnauthenticated=yes
</code></pre>

<p>然后再执行<code>do-release-upgrade</code>。</p>

<p>不过我使用该方法后仍然失败，最后只好采用debian的升级方法来进行升级，步骤如下：</p>

<p>修改<code>/etc/apt/source.list</code>文件，修改其中的版本号，比如<code>14.04</code>修改到<code>15.10</code>即将<code>trusty</code>替换为<code>wily</code>，若使用vim可以批量替换<code>:%s/trusty/wily/g</code>。</p>

<p>然后依次执行以下命令即可：</p>

<pre><code class="language-shell">apt-get update
apt-get upgrade
apt-get dist-upgrade
</code></pre>

<p>查看ubuntu版本命令如下:<code>lsb_release -a</code>。</p>
]]></content>
        </item>
        
        <item>
            <title>新linux服务器需安装软件包整理</title>
            <link>https://qxzzf.com/posts/%E6%96%B0linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9C%80%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6%E5%8C%85%E6%95%B4%E7%90%86/</link>
            <pubDate>Sat, 27 Feb 2016 08:51:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E6%96%B0linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%9C%80%E5%AE%89%E8%A3%85%E8%BD%AF%E4%BB%B6%E5%8C%85%E6%95%B4%E7%90%86/</guid>
            <description>  git lnmp一键安装包 oh-my-zsh spf13-vim curl https://j.mp/spf13-vim3 -L &amp;gt; spf13-vim.sh &amp;amp;&amp;amp; sh spf13-vim.sh shadowsocks 一键安装包 GoodSync  nodejs  nodejs
 npm install -g gulp
 npm install -g bower
  php  composer
 echo PATH=&amp;quot;$PATH:$HOME/.composer/vendor/bin&amp;quot; &amp;gt;&amp;gt; .bashrc
 composer global require hirak/prestissimo
 composer global require friendsofphp/php-cs-fixer
 composer global require phpunit/phpunit
  ruby  Backup  ptyhon rust curl -sSf https://static.rust-lang.org/rustup.sh | sh  </description>
            <content type="html"><![CDATA[

<ul>
<li>git</li>
<li><a href="https://github.com/lj2007331/lnmp" target="_blank">lnmp一键安装包</a></li>
<li><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank">oh-my-zsh</a></li>
<li>spf13-vim <code>curl https://j.mp/spf13-vim3 -L &gt; spf13-vim.sh &amp;&amp; sh spf13-vim.sh</code></li>
<li>shadowsocks <a href="https://teddysun.com/358.html" target="_blank">一键安装包</a></li>
<li><a href="http://blog.skyx.in/archives/235/" target="_blank">GoodSync</a></li>
</ul>

<h3 id="nodejs">nodejs</h3>

<ul>
<li><p><a href="https://nodejs.org/en/" target="_blank">nodejs</a></p></li>

<li><p><code>npm install -g gulp</code></p></li>

<li><p><code>npm install -g bower</code></p></li>
</ul>

<h3 id="php">php</h3>

<ul>
<li><p><a href="https://getcomposer.org/" target="_blank">composer</a></p></li>

<li><p><code>echo PATH=&quot;$PATH:$HOME/.composer/vendor/bin&quot; &gt;&gt; .bashrc</code></p></li>

<li><p><code>composer global require hirak/prestissimo</code></p></li>

<li><p><code>composer global require friendsofphp/php-cs-fixer</code></p></li>

<li><p><code>composer global require phpunit/phpunit</code></p></li>
</ul>

<h3 id="ruby">ruby</h3>

<ul>
<li><a href="http://blog.skyx.in/archives/201/" target="_blank">Backup</a></li>
</ul>

<h3 id="ptyhon">ptyhon</h3>

<h3 id="rust">rust</h3>

<pre><code class="language-shell">curl -sSf https://static.rust-lang.org/rustup.sh | sh
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>PHPStorm中使用php-cs-fixer进行自动代码格式化</title>
            <link>https://qxzzf.com/posts/phpstorm%E4%B8%AD%E4%BD%BF%E7%94%A8php-cs-fixer%E8%BF%9B%E8%A1%8C%E8%87%AA%E5%8A%A8%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96/</link>
            <pubDate>Mon, 22 Feb 2016 15:32:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/phpstorm%E4%B8%AD%E4%BD%BF%E7%94%A8php-cs-fixer%E8%BF%9B%E8%A1%8C%E8%87%AA%E5%8A%A8%E4%BB%A3%E7%A0%81%E6%A0%BC%E5%BC%8F%E5%8C%96/</guid>
            <description>参考文档：https://hackernoon.com/how-to-configure-phpstorm-to-use-php-cs-fixer-1844991e521f
PHP-CS-Fixer是一款对php代码进行风格检查和自动格式化的工具，支持psr和symfony编码规范。
安装
composer global require fabpot/php-cs-fixer  在phpstorm的File &amp;gt; Settings &amp;gt; Tools &amp;gt; External Tools菜单内进行php-cs-fixer的配置：
name和description可自行填写
program需要填写php-cs-fixer的可执行文件地址，Windows上是用户目录\Roaming\Composer\composer\vendor\bin\php-cs-fixer.bat，linux和mac上是~/.composer/vendor/bin/php-cs-fixer
parameters填--rules=@Symfony --verbose fix &amp;quot;$FileDir$/$FileName$&amp;quot;，其中 rules 字段具体可以查看 php-cs-fixer 的官方文档，但是由于 Windows 的 cmd 有诸多限制，所以只能传入一些简单的规则，如果需要配置复杂规则建议使用配置文件来完成。
working directory填$ProjectFileDir$
插件配置好后，到 File &amp;gt; Settings &amp;gt; Keymap 设置快捷键，快捷键设置好后就可以找个文件试一试了。</description>
            <content type="html"><![CDATA[<p>参考文档：<a href="https://hackernoon.com/how-to-configure-phpstorm-to-use-php-cs-fixer-1844991e521f" target="_blank">https://hackernoon.com/how-to-configure-phpstorm-to-use-php-cs-fixer-1844991e521f</a></p>

<p><a href="https://github.com/FriendsOfPHP/PHP-CS-Fixer" target="_blank">PHP-CS-Fixer</a>是一款对php代码进行风格检查和自动格式化的工具，支持psr和symfony编码规范。</p>

<p>安装</p>

<pre><code class="language-shell">composer global require fabpot/php-cs-fixer
</code></pre>

<p>在phpstorm的<code>File &gt; Settings &gt; Tools &gt; External Tools</code>菜单内进行php-cs-fixer的配置：</p>

<p><img src="https://ooo.0o0.ooo/2015/12/25/567e0f1881501.jpg" alt="QQ截图20151226115156.jpg" /></p>

<p><code>name</code>和<code>description</code>可自行填写</p>

<p><code>program</code>需要填写php-cs-fixer的可执行文件地址，Windows上是<code>用户目录\Roaming\Composer\composer\vendor\bin\php-cs-fixer.bat</code>，linux和mac上是<code>~/.composer/vendor/bin/php-cs-fixer</code></p>

<p><code>parameters</code>填<code>--rules=@Symfony --verbose fix &quot;$FileDir$/$FileName$&quot;</code>，其中 <code>rules</code> 字段具体可以查看 php-cs-fixer 的官方文档，但是由于 Windows 的 cmd 有诸多限制，所以只能传入一些简单的规则，如果需要配置复杂规则建议使用配置文件来完成。</p>

<p><code>working directory</code>填<code>$ProjectFileDir$</code></p>

<p>插件配置好后，到 <code>File &gt; Settings &gt; Keymap</code> 设置快捷键，快捷键设置好后就可以找个文件试一试了。</p>
]]></content>
        </item>
        
        <item>
            <title>安装node和npm并切换淘宝npm镜像源</title>
            <link>https://qxzzf.com/posts/%E5%AE%89%E8%A3%85node%E5%92%8Cnpm%E5%B9%B6%E5%88%87%E6%8D%A2%E6%B7%98%E5%AE%9Dnpm%E9%95%9C%E5%83%8F%E6%BA%90/</link>
            <pubDate>Mon, 22 Feb 2016 15:12:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E5%AE%89%E8%A3%85node%E5%92%8Cnpm%E5%B9%B6%E5%88%87%E6%8D%A2%E6%B7%98%E5%AE%9Dnpm%E9%95%9C%E5%83%8F%E6%BA%90/</guid>
            <description>目前在大多数linux发行版内使用默认的包管理器和源安装node的时候，所安装上的node和npm的版本都会比较低，不能符合很多新项目的需求，所以我们只有到node的官网下载所需版本的node源码进行编译安装。
编译安装完成之后执行以下命令将node和npm加入/usr/bin：
ln -s /usr/local/bin/node /usr/bin/node ln -s /usr/local/lib/node_modules/npm/bin/npm-cli.js /usr/bin/npm  此时通过以下命令查看版本，判断是否已正确安装：
node --version npm --version  npm官方源由于不可避免的原因比较慢，而淘宝对npm做了镜像，我们可以使用这个镜像来替换官方源。使用这个源的方式有很多，不过需要注意的是，直接npm全局安装cnpm的话是会出现问题的，这可能是因为淘宝的cnpm的版本和当前npm的版本相比落后较多造成的。
如果直接替换npm的源可以使用如下命令：
npm config set registry https://registry.npm.taobao.org  如果想使用cnpm，而不是直接替换npm的源，比较推荐的方式有两种，一种是在.bashrc结尾添加alias，退出后重新进入或source .bashrc后生效
alias cnpm=&amp;quot;npm --registry=https://registry.npm.taobao.org \ --cache=$HOME/.npm/.cache/cnpm \ --disturl=https://npm.taobao.org/dist \ --userconfig=$HOME/.cnpmrc&amp;quot;  另外一种是编辑.npmrc文件，在其中添加
registry =https://registry.npm.taobao.org  2018.03.14 更新：
现在可以通过 nrm 这个包来切换镜像，十分方便。
npm i -g nrm #全局安装 nrm nrm ls #查看可以使用的镜像列表 nrm use taobao #使用淘宝镜像源  </description>
            <content type="html"><![CDATA[<p>目前在大多数linux发行版内使用默认的包管理器和源安装node的时候，所安装上的node和npm的版本都会比较低，不能符合很多新项目的需求，所以我们只有到node的官网下载所需版本的node源码进行编译安装。</p>

<p>编译安装完成之后执行以下命令将node和npm加入/usr/bin：</p>

<pre><code class="language-shell">ln -s /usr/local/bin/node /usr/bin/node
ln -s /usr/local/lib/node_modules/npm/bin/npm-cli.js /usr/bin/npm
</code></pre>

<p>此时通过以下命令查看版本，判断是否已正确安装：</p>

<pre><code class="language-shell">node --version
npm --version
</code></pre>

<p>npm官方源由于不可避免的原因比较慢，而淘宝对npm做了镜像，我们可以使用这个镜像来替换官方源。使用这个源的方式有很多，不过需要注意的是，直接npm全局安装cnpm的话是会出现问题的，这可能是因为淘宝的cnpm的版本和当前npm的版本相比落后较多造成的。</p>

<p>如果直接替换npm的源可以使用如下命令：</p>

<pre><code class="language-shell">npm config set registry https://registry.npm.taobao.org
</code></pre>

<p>如果想使用cnpm，而不是直接替换npm的源，比较推荐的方式有两种，一种是在.bashrc结尾添加alias，退出后重新进入或<code>source .bashrc</code>后生效</p>

<pre><code class="language-shell">alias cnpm=&quot;npm --registry=https://registry.npm.taobao.org \
  --cache=$HOME/.npm/.cache/cnpm \
  --disturl=https://npm.taobao.org/dist \
  --userconfig=$HOME/.cnpmrc&quot;
</code></pre>

<p>另外一种是编辑.npmrc文件，在其中添加</p>

<pre><code class="language-shell">registry =https://registry.npm.taobao.org
</code></pre>

<hr />

<p>2018.03.14 更新：</p>

<p>现在可以通过 <code>nrm</code> 这个包来切换镜像，十分方便。</p>

<pre><code class="language-shell">npm i -g nrm #全局安装 nrm
nrm ls #查看可以使用的镜像列表
nrm use taobao #使用淘宝镜像源
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>语言决定世界观的一些感悟（待续）</title>
            <link>https://qxzzf.com/posts/%E8%AF%AD%E8%A8%80%E5%86%B3%E5%AE%9A%E4%B8%96%E7%95%8C%E8%A7%82%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%82%9F%E5%BE%85%E7%BB%AD/</link>
            <pubDate>Wed, 17 Feb 2016 11:48:22 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E8%AF%AD%E8%A8%80%E5%86%B3%E5%AE%9A%E4%B8%96%E7%95%8C%E8%A7%82%E7%9A%84%E4%B8%80%E4%BA%9B%E6%84%9F%E6%82%9F%E5%BE%85%E7%BB%AD/</guid>
            <description>平时的工作和业余项目中主要使用的语言都是php，这也就使得我产生了一些错误的认识。
比如json其实是无序的，但是在php中使用json将php中的数据结构与json格式字符串进行转换时，从来都是有序的，所以我一直以为json是有序的。
比如在html的表单中将input元素命名为name[]的形式，在服务端用php获取到的就是一个数组，但是实际上除了php之外，其他很少有语言能够正常获取到这种传值。</description>
            <content type="html"><![CDATA[<p>平时的工作和业余项目中主要使用的语言都是php，这也就使得我产生了一些错误的认识。</p>

<p>比如json其实是无序的，但是在php中使用json将php中的数据结构与json格式字符串进行转换时，从来都是有序的，所以我一直以为json是有序的。</p>

<p>比如在html的表单中将input元素命名为<code>name[]</code>的形式，在服务端用php获取到的就是一个数组，但是实际上除了php之外，其他很少有语言能够正常获取到这种传值。</p>
]]></content>
        </item>
        
        <item>
            <title>jsonp接口xss防范</title>
            <link>https://qxzzf.com/posts/jsonp%E6%8E%A5%E5%8F%A3xss%E9%98%B2%E8%8C%83/</link>
            <pubDate>Wed, 17 Feb 2016 11:44:37 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/jsonp%E6%8E%A5%E5%8F%A3xss%E9%98%B2%E8%8C%83/</guid>
            <description>之前编写jsonp接口的时候并未注意xss的问题，最近经同事提醒才注意到这一点。
防范方式也很简单，只要在header里输出类型设置为javascript即可：
header(&#39;Content-type: text/javascript;charset=utf-8&#39;);  </description>
            <content type="html"><![CDATA[<p>之前编写jsonp接口的时候并未注意xss的问题，最近经同事提醒才注意到这一点。</p>

<p>防范方式也很简单，只要在header里输出类型设置为javascript即可：</p>

<pre><code class="language-php">header('Content-type: text/javascript;charset=utf-8');
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>又拍云cdn域名绑定、开启https、配合七牛融合云使用过程记录</title>
            <link>https://qxzzf.com/posts/%E5%8F%88%E6%8B%8D%E4%BA%91cdn%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A%E5%BC%80%E5%90%AFhttps%E9%85%8D%E5%90%88%E4%B8%83%E7%89%9B%E8%9E%8D%E5%90%88%E4%BA%91%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</link>
            <pubDate>Tue, 16 Feb 2016 20:27:23 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E5%8F%88%E6%8B%8D%E4%BA%91cdn%E5%9F%9F%E5%90%8D%E7%BB%91%E5%AE%9A%E5%BC%80%E5%90%AFhttps%E9%85%8D%E5%90%88%E4%B8%83%E7%89%9B%E8%9E%8D%E5%90%88%E4%BA%91%E4%BD%BF%E7%94%A8%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</guid>
            <description>目前支持https的cdn又有免费额度的貌似就又拍云cdn了，又拍云cdn本身素质也不错，加入又拍云联盟即可获取67元代金券，相当于10G的存储空间和每月15G流量。
首先在又拍云上创建一个服务，根据自己的需要选择配置就行。在服务的功能配置的加速域名里有域名绑定按钮，直接填写备案过的域名即可，一般很快就会审核成功。
若要开启https，则要在将绑定域名之前，先获取该域名的ssl证书，如果已经有泛域名ssl证书则可直接使用，我这里使用的是letsencrypt的证书，具体过程参见http://blog.skyx.in/archives/197/。
获取到证书后在又拍云的工具箱里的ssl工具菜单内可以添加ssl证书，需要将证书和私钥提供给又拍云，添加好后即可给绑定的域名开启https访问。
在又拍云的工具箱里的融合云存储菜单里，我们可以设置融合云存储，这样我们可以用又拍云回源七牛或者阿里云，七牛也是有免费额度的，这样可以进一步减少我们的开支，另外存储内容放在七牛管理起来也比较方便。</description>
            <content type="html"><![CDATA[<p>目前支持https的cdn又有免费额度的貌似就又拍云cdn了，又拍云cdn本身素质也不错，加入<a href="https://www.upyun.com/zh/league.html" target="_blank">又拍云联盟</a>即可获取67元代金券，相当于10G的存储空间和每月15G流量。</p>

<p>首先在又拍云上创建一个服务，根据自己的需要选择配置就行。在服务的功能配置的加速域名里有域名绑定按钮，直接填写备案过的域名即可，一般很快就会审核成功。</p>

<p>若要开启https，则要在将绑定域名之前，先获取该域名的ssl证书，如果已经有泛域名ssl证书则可直接使用，我这里使用的是letsencrypt的证书，具体过程参见<a href="http://blog.skyx.in/archives/197/" target="_blank">http://blog.skyx.in/archives/197/</a>。</p>

<p>获取到证书后在又拍云的工具箱里的ssl工具菜单内可以添加ssl证书，需要将证书和私钥提供给又拍云，添加好后即可给绑定的域名开启https访问。</p>

<p>在又拍云的工具箱里的融合云存储菜单里，我们可以设置融合云存储，这样我们可以用又拍云回源七牛或者阿里云，七牛也是有免费额度的，这样可以进一步减少我们的开支，另外存储内容放在七牛管理起来也比较方便。</p>
]]></content>
        </item>
        
        <item>
            <title>使用Backup进行站点数据备份</title>
            <link>https://qxzzf.com/posts/%E4%BD%BF%E7%94%A8backup%E8%BF%9B%E8%A1%8C%E7%AB%99%E7%82%B9%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/</link>
            <pubDate>Thu, 28 Jan 2016 20:38:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E4%BD%BF%E7%94%A8backup%E8%BF%9B%E8%A1%8C%E7%AB%99%E7%82%B9%E6%95%B0%E6%8D%AE%E5%A4%87%E4%BB%BD/</guid>
            <description>Backup是一个使用ruby编写的多功能备份工具，加上一个支持七牛的扩展backup2qiniu，我们就可以很方便地将站点数据备份到七牛上。
首先系统上需要安装ruby，ubuntu上可以
apt-get install ruby ruby-dev  在centos上则是：
yum install ruby ruby-devel  然后安装backup和其扩展backup2qiniu：
gem install backup gem install backup2qiniu  安装完成后创建配置文件：
backup generate:config backup generate:model --trigger=backup2qiniu  修改 ~/Backup/models/backup2qiniu.rb 内容如下，注意修改其中的配置项：
require &#39;rubygems&#39; gem &#39;backup2qiniu&#39; require &#39;backup2qiniu&#39; Backup::Model.new(:backup2qiniu, &#39;backup vps data to qiniu&#39;) do database MySQL do |db| db.name = &#39;xxx&#39; db.username = &#39;root&#39; db.password = &#39;xxx&#39; db.host = &#39;localhost&#39; db.port = 3306 db.socket = &#39;/tmp/mysql.sock&#39; end archive :web do |archive| archive.</description>
            <content type="html"><![CDATA[<p><a href="https://github.com/backup/backup" target="_blank">Backup</a>是一个使用ruby编写的多功能备份工具，加上一个支持七牛的扩展<a href="https://github.com/lidaobing/backup2qiniu" target="_blank">backup2qiniu</a>，我们就可以很方便地将站点数据备份到七牛上。</p>

<p>首先系统上需要安装ruby，ubuntu上可以</p>

<pre><code class="language-shell">apt-get install ruby ruby-dev
</code></pre>

<p>在centos上则是：</p>

<pre><code class="language-shell">yum install ruby ruby-devel
</code></pre>

<p>然后安装backup和其扩展backup2qiniu：</p>

<pre><code class="language-shell">gem install backup
gem install backup2qiniu
</code></pre>

<p>安装完成后创建配置文件：</p>

<pre><code class="language-shell">backup generate:config
backup generate:model --trigger=backup2qiniu
</code></pre>

<p>修改 ~/Backup/models/backup2qiniu.rb 内容如下，注意修改其中的配置项：</p>

<pre><code class="language-ruby">require 'rubygems'
gem 'backup2qiniu'
require 'backup2qiniu'

Backup::Model.new(:backup2qiniu, 'backup vps data to qiniu') do
  database MySQL do |db|
    db.name = 'xxx'
    db.username = 'root'
    db.password = 'xxx'
    db.host = 'localhost'
    db.port = 3306
    db.socket = '/tmp/mysql.sock'
  end

  archive :web do |archive|
    archive.use_sudo
    archive.root '/data'
    archive.add 'wwwroot/web'
    archive.exclude 'wwwroot/web/vendor'
  end

  compress_with Gzip

  store_with Qiniu do |q|
    q.keep = 7
    q.access_key = 'xxx'
    q.access_secret = 'xxx'
    q.bucket = 'xxx'
    q.path = 'xxx'
  end
end
</code></pre>

<p>使用如下命令即可触发备份</p>

<pre><code class="language-shell">backup perform -t backup2qiniu
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>vim中^M的出现原因和解决办法</title>
            <link>https://qxzzf.com/posts/vim%E4%B8%ADm%E7%9A%84%E5%87%BA%E7%8E%B0%E5%8E%9F%E5%9B%A0%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</link>
            <pubDate>Wed, 27 Jan 2016 10:57:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/vim%E4%B8%ADm%E7%9A%84%E5%87%BA%E7%8E%B0%E5%8E%9F%E5%9B%A0%E5%92%8C%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/</guid>
            <description>vim中会出现^M是因为，在Windows中文件的换行符是\r\n（CRLF，回车换行），而linux中是\n（LF，换行），所以Windows下编辑的文件到了linux中每行都会多出一个\r。
解决的方法也很简单，就是批量替换，:%s/\r//g。
或者直接使用dos2unix工具，该工具在常见的linux发行版上都可以通过包管理工具安装。</description>
            <content type="html"><![CDATA[<p>vim中会出现^M是因为，在Windows中文件的换行符是\r\n（CRLF，回车换行），而linux中是\n（LF，换行），所以Windows下编辑的文件到了linux中每行都会多出一个\r。</p>

<p>解决的方法也很简单，就是批量替换，<code>:%s/\r//g</code>。</p>

<p>或者直接使用<code>dos2unix</code>工具，该工具在常见的linux发行版上都可以通过包管理工具安装。</p>
]]></content>
        </item>
        
        <item>
            <title>ssl站点启用Certificate Transparency功能记录</title>
            <link>https://qxzzf.com/posts/ssl%E7%AB%99%E7%82%B9%E5%90%AF%E7%94%A8certificate-transparency%E5%8A%9F%E8%83%BD%E8%AE%B0%E5%BD%95/</link>
            <pubDate>Sun, 24 Jan 2016 18:03:14 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/ssl%E7%AB%99%E7%82%B9%E5%90%AF%E7%94%A8certificate-transparency%E5%8A%9F%E8%83%BD%E8%AE%B0%E5%BD%95/</guid>
            <description>主要流程参考http://blog.eqoe.cn/posts/enable-certificate-transparency-for-nginx.html。
需要注意的是如果之前安装了nginx但没有添加nginx-ct模块的需要重新编译安装nginx，另外配置项中ssl ct on应为ssl_ct on。</description>
            <content type="html"><![CDATA[<p>主要流程参考<a href="http://blog.eqoe.cn/posts/enable-certificate-transparency-for-nginx.html" target="_blank">http://blog.eqoe.cn/posts/enable-certificate-transparency-for-nginx.html</a>。</p>

<p>需要注意的是如果之前安装了nginx但没有添加nginx-ct模块的需要重新编译安装nginx，另外配置项中<code>ssl ct on</code>应为<code>ssl_ct on</code>。</p>
]]></content>
        </item>
        
        <item>
            <title>FinalSpeed使用感受</title>
            <link>https://qxzzf.com/posts/finalspeed%E4%BD%BF%E7%94%A8%E6%84%9F%E5%8F%97/</link>
            <pubDate>Sat, 23 Jan 2016 20:28:26 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/finalspeed%E4%BD%BF%E7%94%A8%E6%84%9F%E5%8F%97/</guid>
            <description>在FinalSpeed出现之前，给服务器加速的方案常见的有锐速和net-speeder等，但锐速对系统内核版本有要求，openvz的vps是用不了的，非openvz的也得是特定内核的少数linux发行版才可以支持。两者的优化效果我之前都有体验过，但都没有finalspeed这么惊艳。
一开始让我使用FinalSpeed我是拒绝的，因为finalspeed需要客户端支持。然而今天折腾了一下发现效果真的是杠杠的，美国的vps在shell里敲命令再也不卡了，就是偶尔连接会断掉，但不是什么大问题。而且finalspeed的客户端端口映射还带来一个隐藏的好处就是服务器ip变化时只需要改下finalspeed里的服务器ip就好了，再也不用一个一个地改本地的ss、navicat、xshell里的服务器地址了，简直棒呆。</description>
            <content type="html"><![CDATA[<p>在FinalSpeed出现之前，给服务器加速的方案常见的有<a href="http://www.serverspeeder.com/" target="_blank">锐速</a>和<a href="https://github.com/snooda/net-speeder" target="_blank">net-speeder</a>等，但锐速对系统内核版本有要求，openvz的vps是用不了的，非openvz的也得是特定内核的少数linux发行版才可以支持。两者的优化效果我之前都有体验过，但都没有<a href="https://github.com/d1sm/finalspeed" target="_blank">finalspeed</a>这么惊艳。</p>

<p>一开始让我使用FinalSpeed我是拒绝的，因为finalspeed需要客户端支持。然而今天折腾了一下发现效果真的是杠杠的，美国的vps在shell里敲命令再也不卡了，就是偶尔连接会断掉，但不是什么大问题。而且finalspeed的客户端端口映射还带来一个隐藏的好处就是服务器ip变化时只需要改下finalspeed里的服务器ip就好了，再也不用一个一个地改本地的ss、navicat、xshell里的服务器地址了，简直棒呆。</p>
]]></content>
        </item>
        
        <item>
            <title>免费SSL证书Let’s Encrypt安装使用记录</title>
            <link>https://qxzzf.com/posts/%E5%85%8D%E8%B4%B9ssl%E8%AF%81%E4%B9%A6lets-encrypt%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</link>
            <pubDate>Sat, 23 Jan 2016 20:19:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E5%85%8D%E8%B4%B9ssl%E8%AF%81%E4%B9%A6lets-encrypt%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</guid>
            <description>目前我包括博客在内的几个小站都在sae上，由于sae上的限制还是比较多的，所以有迁移到vps上的计划。
今天在vps上折腾了一下配置ssl证书，发现这方面很多前人已经提供了不少经验和工具，可以很方便地给自己的站点用上https。
首先申请Let’s Encrypt的证书我是用了https://www.v2ex.com/t/241819这个帖子里给出的一个shell脚本，全程只要修改下配置文件，就会全自动获取证书，也可以自动给证书续期，十分方便。
下载脚本：
wget https://raw.githubusercontent.com/xdtianyu/scripts/master/lets-encrypt/letsencrypt.conf wget https://raw.githubusercontent.com/xdtianyu/scripts/master/lets-encrypt/letsencrypt.sh chmod +x letsencrypt.sh  修改配置文件：
ACCOUNT_KEY=&amp;quot;letsencrypt-account.key&amp;quot; DOMAIN_KEY=&amp;quot;example.com.key&amp;quot; DOMAIN_DIR=&amp;quot;/var/www/example.com&amp;quot; DOMAINS=&amp;quot;DNS:example.com,DNS:whatever.example.com&amp;quot;  里面的key脚本都会自动帮我们生成，只要配置正确即可。
./letsencrypt.sh letsencrypt.conf  执行上述命令即可完成整个证书签发过程，需要注意的有：
 签发的域名必须已经解析，并且项目路径要填写对，在证书签发过程中，脚本会在项目根目录写一个文件，然后通过http方式来访问该文件，必须保证该文件能被正常下载才能通过验证。
 服务器python版本必须大于等于2.7，2.6及以下会出现各种问题，不确定3.x是否可以。
  获得证书后，如果是使用nginx作为服务器的话，只要在配置文件里加上类似如下的配置：
server { listen 443; ssl on; ssl_certificate /usr/local/nginx/conf/server.crt; ssl_certificate_key /usr/local/nginx/conf/server_nopwd.key; }  然后重启nginx服务即可。</description>
            <content type="html"><![CDATA[<p>目前我包括博客在内的几个小站都在sae上，由于sae上的限制还是比较多的，所以有迁移到vps上的计划。</p>

<p>今天在vps上折腾了一下配置ssl证书，发现这方面很多前人已经提供了不少经验和工具，可以很方便地给自己的站点用上https。</p>

<p>首先申请Let’s Encrypt的证书我是用了<a href="https://www.v2ex.com/t/241819" target="_blank">https://www.v2ex.com/t/241819</a>这个帖子里给出的一个shell脚本，全程只要修改下配置文件，就会全自动获取证书，也可以自动给证书续期，十分方便。</p>

<p>下载脚本：</p>

<pre><code class="language-shell">wget https://raw.githubusercontent.com/xdtianyu/scripts/master/lets-encrypt/letsencrypt.conf
wget https://raw.githubusercontent.com/xdtianyu/scripts/master/lets-encrypt/letsencrypt.sh
chmod +x letsencrypt.sh
</code></pre>

<p>修改配置文件：</p>

<pre><code class="language-shell">ACCOUNT_KEY=&quot;letsencrypt-account.key&quot;
DOMAIN_KEY=&quot;example.com.key&quot;
DOMAIN_DIR=&quot;/var/www/example.com&quot;
DOMAINS=&quot;DNS:example.com,DNS:whatever.example.com&quot;
</code></pre>

<p>里面的key脚本都会自动帮我们生成，只要配置正确即可。</p>

<pre><code class="language-shell">./letsencrypt.sh letsencrypt.conf
</code></pre>

<p>执行上述命令即可完成整个证书签发过程，需要注意的有：</p>

<ul>
<li><p>签发的域名必须已经解析，并且项目路径要填写对，在证书签发过程中，脚本会在项目根目录写一个文件，然后通过http方式来访问该文件，必须保证该文件能被正常下载才能通过验证。</p></li>

<li><p>服务器python版本必须大于等于2.7，2.6及以下会出现各种问题，不确定3.x是否可以。</p></li>
</ul>

<p>获得证书后，如果是使用nginx作为服务器的话，只要在配置文件里加上类似如下的配置：</p>

<pre><code>server {
    listen 443;
    ssl on;
    ssl_certificate  /usr/local/nginx/conf/server.crt;
    ssl_certificate_key  /usr/local/nginx/conf/server_nopwd.key;
}
</code></pre>

<p>然后重启nginx服务即可。</p>
]]></content>
        </item>
        
        <item>
            <title>Windows下git commit时设置不自动将LF转换为CRLF</title>
            <link>https://qxzzf.com/posts/windows%E4%B8%8Bgit-commit%E6%97%B6%E8%AE%BE%E7%BD%AE%E4%B8%8D%E8%87%AA%E5%8A%A8%E5%B0%86lf%E8%BD%AC%E6%8D%A2%E4%B8%BAcrlf/</link>
            <pubDate>Fri, 22 Jan 2016 16:39:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/windows%E4%B8%8Bgit-commit%E6%97%B6%E8%AE%BE%E7%BD%AE%E4%B8%8D%E8%87%AA%E5%8A%A8%E5%B0%86lf%E8%BD%AC%E6%8D%A2%E4%B8%BAcrlf/</guid>
            <description>在php的psr规范中规定了文件中的换行符必须为LF（linefeed - 换行）而不能是CRLF（carriage return - 回车，linefeed - 换行），在phpstorm中我们可以在 File &amp;gt; Settings &amp;gt; Editor &amp;gt; Code Style 中设置换行符（Line Separator）为LF。
但是在git提交代码时会报如下警告信息：
LF will be replaced by CRLF  也即window上git会自动将LF替换为CRLF解决方法为：
git config --global core.autocrlf false  </description>
            <content type="html"><![CDATA[<p>在php的psr规范中规定了文件中的换行符必须为LF（linefeed - 换行）而不能是CRLF（carriage return - 回车，linefeed - 换行），在phpstorm中我们可以在 File &gt; Settings &gt; Editor &gt; Code Style 中设置换行符（Line Separator）为LF。</p>

<p>但是在git提交代码时会报如下警告信息：</p>

<pre><code>LF will be replaced by CRLF
</code></pre>

<p>也即window上git会自动将LF替换为CRLF解决方法为：</p>

<pre><code>git config --global core.autocrlf false
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Ubuntu/Debian安装Nodejs 4.x/5.x版本</title>
            <link>https://qxzzf.com/posts/ubuntudebian%E5%AE%89%E8%A3%85nodejs-4.x5.x%E7%89%88%E6%9C%AC/</link>
            <pubDate>Mon, 18 Jan 2016 18:08:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/ubuntudebian%E5%AE%89%E8%A3%85nodejs-4.x5.x%E7%89%88%E6%9C%AC/</guid>
            <description>Ubuntu自带源安装的node版本较老，已经不能适应很多新项目的需求了。
https://github.com/nodesource/distributions这个项目提供了node 4.x和5.x版本的源。</description>
            <content type="html"><![CDATA[<p>Ubuntu自带源安装的node版本较老，已经不能适应很多新项目的需求了。</p>

<p><a href="https://github.com/nodesource/distributions" target="_blank">https://github.com/nodesource/distributions</a>这个项目提供了node 4.x和5.x版本的源。</p>
]]></content>
        </item>
        
        <item>
            <title>Vultr忘记root密码重置方法及多备份安装脚本报unzip不存在解决方法</title>
            <link>https://qxzzf.com/posts/vultr%E5%BF%98%E8%AE%B0root%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE%E6%96%B9%E6%B3%95%E5%8F%8A%E5%A4%9A%E5%A4%87%E4%BB%BD%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E6%8A%A5unzip%E4%B8%8D%E5%AD%98%E5%9C%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link>
            <pubDate>Mon, 18 Jan 2016 13:48:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/vultr%E5%BF%98%E8%AE%B0root%E5%AF%86%E7%A0%81%E9%87%8D%E7%BD%AE%E6%96%B9%E6%B3%95%E5%8F%8A%E5%A4%9A%E5%A4%87%E4%BB%BD%E5%AE%89%E8%A3%85%E8%84%9A%E6%9C%AC%E6%8A%A5unzip%E4%B8%8D%E5%AD%98%E5%9C%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid>
            <description>Vultr如果忘记了root密码，可以通过进入单用户模式重置密码，这是官方的教程链接： https://www.vultr.com/docs/boot-into-single-user-mode-reset-root-password。
对于Ubuntu流程如下：
 点击View Console然后发送CTRL+ALT+DEL重启服务器， 重启时点击ESC键进入GRUB启动选项， 按e键来编辑第一个启动选项， 在以&amp;rdquo;linux /boot/&amp;ldquo;开通的那一行结尾加上init=&amp;quot;/bin/bash&amp;quot; 按F10或CTRL-X启动 输入mount -rw -o remount /后使用passwd重置root密码，然后再重启就好了  在使用多备份的时候，遇到一个蛋疼的问题，就是明明安装了unzip，但是却报unzip未安装，这时候只要直接去掉下载下来的sh文件里的这一段验证脚本就行了。</description>
            <content type="html"><![CDATA[<p>Vultr如果忘记了root密码，可以通过进入单用户模式重置密码，这是官方的教程链接： <a href="https://www.vultr.com/docs/boot-into-single-user-mode-reset-root-password" target="_blank">https://www.vultr.com/docs/boot-into-single-user-mode-reset-root-password</a>。</p>

<p>对于Ubuntu流程如下：</p>

<ol>
<li>点击<code>View Console</code>然后发送<code>CTRL+ALT+DEL</code>重启服务器，</li>
<li>重启时点击<code>ESC</code>键进入GRUB启动选项，</li>
<li>按<code>e</code>键来编辑第一个启动选项，</li>
<li>在以&rdquo;linux /boot/&ldquo;开通的那一行结尾加上<code>init=&quot;/bin/bash&quot;</code></li>
<li>按<code>F10</code>或<code>CTRL-X</code>启动</li>
<li>输入<code>mount -rw -o remount /</code>后使用passwd重置root密码，然后再重启就好了</li>
</ol>

<p>在使用多备份的时候，遇到一个蛋疼的问题，就是明明安装了unzip，但是却报unzip未安装，这时候只要直接去掉下载下来的sh文件里的这一段验证脚本就行了。</p>
]]></content>
        </item>
        
        <item>
            <title>将cow的stat文件自动转为pac文件</title>
            <link>https://qxzzf.com/posts/%E5%B0%86cow%E7%9A%84stat%E6%96%87%E4%BB%B6%E8%87%AA%E5%8A%A8%E8%BD%AC%E4%B8%BApac%E6%96%87%E4%BB%B6/</link>
            <pubDate>Fri, 09 Oct 2015 22:01:16 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E5%B0%86cow%E7%9A%84stat%E6%96%87%E4%BB%B6%E8%87%AA%E5%8A%A8%E8%BD%AC%E4%B8%BApac%E6%96%87%E4%BB%B6/</guid>
            <description>cow是一个简化穿墙的 HTTP 代理服务器。它能自动检测被墙网站，它的检测结果会保存在stat文件中。该文件为一个json文件，里面记录了特定的网址直接访问和被block的次数，通过分析该文件即可创建一个包含黑白名单的pac文件，使用黑白名单加cow的本地代理方案是比较省心省流量的。
以下代码可以自动将stat文件转为pac文件：
&amp;lt;?php $src = &#39;R:\stat.txt&#39;; $dest = &#39;R:\my.pac&#39;; $common = &amp;lt;&amp;lt;&amp;lt;EOF var proxy = &#39;PROXY 127.0.0.1:7777; DIRECT&#39;; var direct = &#39;DIRECT&#39;; var IsMatch = function(host, domain) { return host.indexOf(domain, host.length - domain.length) !== -1 &amp;amp;&amp;amp; (domain.length === host.length || host.indexOf(&amp;quot;.&amp;quot; + domain, host.length - (&amp;quot;.&amp;quot; + domain).length) !== -1); } function FindProxyForURL(url, host) { host = host.toLowerCase(); for (i = 0; i &amp;lt; blackList.length; i++) { if (IsMatch(host, blackList[i])) { return proxy; } } for (i = 0; i &amp;lt; whiteList.</description>
            <content type="html"><![CDATA[<p><a href="https://github.com/cyfdecyf/cow" target="_blank">cow</a>是一个简化穿墙的 HTTP 代理服务器。它能自动检测被墙网站，它的检测结果会保存在stat文件中。该文件为一个json文件，里面记录了特定的网址直接访问和被block的次数，通过分析该文件即可创建一个包含黑白名单的pac文件，使用黑白名单加cow的本地代理方案是比较省心省流量的。</p>

<p>以下代码可以自动将stat文件转为pac文件：</p>

<pre><code class="language-php">&lt;?php
$src = 'R:\stat.txt';
$dest = 'R:\my.pac';
$common = &lt;&lt;&lt;EOF
var proxy = 'PROXY 127.0.0.1:7777; DIRECT';

var direct = 'DIRECT';

var IsMatch = function(host, domain) {
    return host.indexOf(domain, host.length - domain.length) !== -1 &amp;&amp; 
    (domain.length === host.length || host.indexOf(&quot;.&quot; + domain, host.length - (&quot;.&quot; + domain).length) !== -1);
}

function FindProxyForURL(url, host) {
    host = host.toLowerCase();

    for (i = 0; i &lt; blackList.length; i++) {
        if (IsMatch(host, blackList[i])) {
            return proxy;
        }
    }

    for (i = 0; i &lt; whiteList.length; i++) {
        if (IsMatch(host, whiteList[i])) {
            return direct;
        }
    }
    
    return proxy;
}
EOF;

$stat = file_get_contents($src);
$sites = json_decode($stat, true)['site_info'];
$black = [];
$white = [];
foreach ($sites as $url =&gt; $stat) {
    if (filter_var($url, FILTER_VALIDATE_IP)) continue;
    preg_match('/(?:.+\.)?(\w+\.\w+)/', $url, $matches);
    if (! isset($matches[1])) continue;
    if ($stat['block'] &gt; 0) {
        $black[$matches[1]] = '&quot;' . $matches[1] . '&quot;';
    } else {
        $white[$matches[1]] = '&quot;' . $matches[1] . '&quot;';
    }
}
var_dump($black);
var_dump($white);
$blackList = 'var blackList = [' . PHP_EOL . '    ' . implode(',' . PHP_EOL . '    ', $black) . PHP_EOL . '];';
$whiteList = 'var whiteList = [' . PHP_EOL . '    ' . implode(',' . PHP_EOL . '    ', $white) . PHP_EOL . '];';
file_put_contents($dest, $blackList . PHP_EOL . PHP_EOL . $whiteList . PHP_EOL . PHP_EOL . $common);
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>通过curl每天自动在coding上创建task和push代码</title>
            <link>https://qxzzf.com/posts/%E9%80%9A%E8%BF%87curl%E6%AF%8F%E5%A4%A9%E8%87%AA%E5%8A%A8%E5%9C%A8coding%E4%B8%8A%E5%88%9B%E5%BB%BAtask%E5%92%8Cpush%E4%BB%A3%E7%A0%81/</link>
            <pubDate>Sat, 03 Oct 2015 21:10:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E9%80%9A%E8%BF%87curl%E6%AF%8F%E5%A4%A9%E8%87%AA%E5%8A%A8%E5%9C%A8coding%E4%B8%8A%E5%88%9B%E5%BB%BAtask%E5%92%8Cpush%E4%BB%A3%E7%A0%81/</guid>
            <description>Coding.net每天可以通过push代码和创建task赚取码币，码币可以用来换实物或coding的开发版服务。码币现在虽然汇率一直没有变过，但是获取码币是越来越难了，趁着还能每天获取保底0.03码币可多屯一点。
首先是创建task：
&amp;lt;?php $url = &#39;xxx&#39;; $referer = &#39;xxx&#39;; $cookie = &#39;xxx&#39;; $userAgent = &#39;xxx&#39;; $data = [ &#39;priority&#39; =&amp;gt; 1, &#39;content&#39; =&amp;gt; &#39;xxx&#39;, &#39;owner_id&#39; =&amp;gt; xxx, &#39;deadline&#39; =&amp;gt; &#39;&#39;, &#39;description&#39; =&amp;gt; &#39;&#39;, ]; $ch = curl_init($url); curl_setopt($ch, CURLOPT_TIMEOUT, 50); curl_setopt($ch, CURLOPT_REFERER, $referer); curl_setopt($ch, CURLOPT_USERAGENT, $userAgent); curl_setopt($ch, CURLOPT_COOKIE, $cookie); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLOPT_POST, 1); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false); curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data)); var_dump(curl_exec($ch)); var_dump(curl_error($ch)); curl_close($ch);  ，代码内的xxx都换为各自的数据就行了，在手动创建task时在chrome的开发者工具的network下可以看到，或者用其他抓包工具也可获取。
然后是自动push代码的：</description>
            <content type="html"><![CDATA[<p>Coding.net每天可以通过push代码和创建task赚取码币，码币可以用来换实物或coding的开发版服务。码币现在虽然汇率一直没有变过，但是获取码币是越来越难了，趁着还能每天获取保底0.03码币可多屯一点。</p>

<p>首先是创建task：</p>

<pre><code class="language-php">&lt;?php
$url = 'xxx';
$referer = 'xxx';
$cookie = 'xxx';
$userAgent = 'xxx';
$data = [
    'priority' =&gt; 1,
    'content' =&gt; 'xxx',
    'owner_id' =&gt; xxx,
    'deadline' =&gt; '',
    'description' =&gt; '',
]; 

$ch = curl_init($url);
curl_setopt($ch, CURLOPT_TIMEOUT, 50);
curl_setopt($ch, CURLOPT_REFERER, $referer);
curl_setopt($ch, CURLOPT_USERAGENT, $userAgent);
curl_setopt($ch, CURLOPT_COOKIE, $cookie);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
curl_setopt($ch, CURLOPT_POST, 1);
curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
curl_setopt($ch, CURLOPT_POSTFIELDS, http_build_query($data));
var_dump(curl_exec($ch));
var_dump(curl_error($ch));
curl_close($ch);
</code></pre>

<p>，代码内的xxx都换为各自的数据就行了，在手动创建task时在chrome的开发者工具的network下可以看到，或者用其他抓包工具也可获取。</p>

<p>然后是自动push代码的：</p>

<pre><code class="language-php">&lt;?php
require 'Curl.php';

use Curl\Curl;

$url = [
    'create' =&gt; 'https://ide.coding.net/backend/ws/create',
    'write' =&gt; 'https://ide.coding.net/backend/ws/xxx/write',
    'status' =&gt; 'https://ide.coding.net/backend/git/xxx/status?__t=',
    'commit' =&gt; 'https://ide.coding.net/backend/git/xxx/commit',
    'push' =&gt; 'https://ide.coding.net/backend/git/xxx/push',
];
$referrer = 'https://ide.coding.net/ws/xxx';
$cookie = 'xxx';
$userAgent = 'xxx';
$data = [
    'create' =&gt; [
        'ownerName' =&gt; '',
        'projectName' =&gt; '',
        'host' =&gt; '',
        'spaceKey' =&gt; 'xxx',
    ],
    'write' =&gt; [
        'path' =&gt; '/README.md',
        'content' =&gt; 'xxx',
    ],
    'commit' =&gt; [
        'files[]' =&gt; 'README.md',
        'message' =&gt; 'xxx',
    ],
    'push' =&gt; [],
]; 

$get = getCurl($userAgent, $referrer);
$post = getCurl($userAgent, $referrer);
$put = getCurl($userAgent, $referrer);

var_dump($post-&gt;post($url['create'], $data['create']));
var_dump($put-&gt;put($url['write'], $data['write']));
var_dump($get-&gt;get($url['status'] . substr(str_replace('.', '', microtime(true)), 0, 13)));
var_dump($post-&gt;post($url['commit'], $data['commit']));
var_dump($post-&gt;post($url['push'], $data['push']));

function getCurl($userAgent, $referrer)
{
    $curl = new Curl();
    $curl-&gt;setUserAgent($userAgent);
    $curl-&gt;setReferrer($referrer);
    $curl-&gt;setCookie('sid', 'xxx');
    $curl-&gt;setCookie('_gat', 1);
    $curl-&gt;setCookie('_ga', 'xxx');
    $curl-&gt;setCookie('JSESSIONID', 'xxx');
    $curl-&gt;setHeader('X-Requested-With', 'XMLHttpRequest');
    $curl-&gt;setOpt(CURLOPT_SSL_VERIFYPEER, false);
    return $curl;
}
</code></pre>

<p>这段代码中用到了一个开源项目：<a href="https://github.com/php-curl-class/php-curl-class/blob/master/src/Curl/Curl.php" target="_blank">php-curl-class</a>，原因是我自己构造的curl请求不知道为什么会获得401的返回。同样的代码内的所有xxx都要替换为各自对应的数据，其中create、write、commit、push四个步骤是必须的，status是为了观察执行情况。</p>

<p>至于如何实现定时执行计划任务，有条件的自然是在服务器上使用crontab，如果没有自己的服务器的，我比较推荐使用第三方的cron服务，比如sae和ace就有提供cron服务，sae目前有一定免费配额，虽然很少，不过用作执行计划任务绰绰有余，个人十分推荐。</p>
]]></content>
        </item>
        
        <item>
            <title>开源一个简单的短网址程序Ourls</title>
            <link>https://qxzzf.com/posts/%E5%BC%80%E6%BA%90%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%9F%AD%E7%BD%91%E5%9D%80%E7%A8%8B%E5%BA%8Fourls/</link>
            <pubDate>Sun, 20 Sep 2015 17:07:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E5%BC%80%E6%BA%90%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E7%9F%AD%E7%BD%91%E5%9D%80%E7%A8%8B%E5%BA%8Fourls/</guid>
            <description>一直想要自己搭一个短网址服务，奈何github上找过几圈，都没有找到十分符合心意的，于是就趁周末自己写了一个。
Ourls的灵感来源于知乎上关于短址生成算法的一个问题下的讨论，http://www.zhihu.com/question/29270034，详细的关于短址生成的各种设计原理的利弊可见该问题下的几个回答。综合考虑后，我决定采用如下方案：使用sha1来判断url在数据库中是否已存在，若不存在则给该url发一个号（即数据库中的自增id），然后使用hashids对该id进行hash，最终得出该连接的短址。
该项目需要PHP版本5.4以上，在5.5.24下测试通过。项目所使用后端框架为flight，前端使用了amazeui。
sae上的rewrite规则如下
- rewrite: if ( in_header[&amp;quot;host&amp;quot;] == &amp;quot;yoursiteurl&amp;quot; &amp;amp;&amp;amp; path ~ &amp;quot;^(?!public/)(.*)&amp;quot; ) goto &amp;quot;public/$1&amp;quot; - rewrite: if ( ! is_dir() &amp;amp;&amp;amp; ! is_file() ) goto &amp;quot;public/index.php?%{QUERY_STRING}&amp;quot;  在线演示地址：http://skyx.in/。
github地址：https://github.com/takashiki/Ourls。
osc地址：http://git.oschina.net/takashiki/Ourls。</description>
            <content type="html"><![CDATA[<p>一直想要自己搭一个短网址服务，奈何github上找过几圈，都没有找到十分符合心意的，于是就趁周末自己写了一个。</p>

<p>Ourls的灵感来源于知乎上关于短址生成算法的一个问题下的讨论，<a href="http://www.zhihu.com/question/29270034" target="_blank">http://www.zhihu.com/question/29270034</a>，详细的关于短址生成的各种设计原理的利弊可见该问题下的几个回答。综合考虑后，我决定采用如下方案：使用sha1来判断url在数据库中是否已存在，若不存在则给该url发一个号（即数据库中的自增id），然后使用hashids对该id进行hash，最终得出该连接的短址。</p>

<p>该项目需要PHP版本5.4以上，在5.5.24下测试通过。项目所使用后端框架为flight，前端使用了amazeui。</p>

<p>sae上的rewrite规则如下</p>

<pre><code>- rewrite: if ( in_header[&quot;host&quot;] == &quot;yoursiteurl&quot; &amp;&amp; path ~ &quot;^(?!public/)(.*)&quot; ) goto &quot;public/$1&quot;
- rewrite: if ( ! is_dir() &amp;&amp; ! is_file() ) goto &quot;public/index.php?%{QUERY_STRING}&quot;
</code></pre>

<p>在线演示地址：<a href="http://skyx.in/" target="_blank">http://skyx.in/</a>。</p>

<p>github地址：<a href="https://github.com/takashiki/Ourls" target="_blank">https://github.com/takashiki/Ourls</a>。</p>

<p>osc地址：<a href="http://git.oschina.net/takashiki/Ourls" target="_blank">http://git.oschina.net/takashiki/Ourls</a>。</p>
]]></content>
        </item>
        
        <item>
            <title>VMWare11安装Mac OS 10.10(Yosemite)过程记录</title>
            <link>https://qxzzf.com/posts/vmware11%E5%AE%89%E8%A3%85mac-os-10.10yosemite%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</link>
            <pubDate>Sat, 05 Sep 2015 20:51:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/vmware11%E5%AE%89%E8%A3%85mac-os-10.10yosemite%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</guid>
            <description>最近想玩玩苹果的系统，不过没有mac的机器，只能在我船上安虚拟机玩玩了，下面记录一下vmware11安装yosemite的过程。
vmware的安装就不多说了，要在vmware上装mac的操作系统，需要打一下vmware unblocker补丁。vmware11系列需要用vmware unblocker 2.x的版本，而vmware10及以下版本则要使用vmware unblocker 1.x的版本，这里分享一下我所使用的2.06版：http://pan.baidu.com/s/1sj20CFF 密码: s6dh。
windows上使用管理员身份运行win-install.cmd即可，运行前最好在任务管理器里把所有vmware相关的服务和进程都关掉，否则有可能破解失败。如果运行后出现“unblocker.exe 已停止运行”的提示则是破解失败，这一般是因为有vmware的进程或服务没有停止，停止后手工运行unblocker.exe或unblocker.py则能完成破解。成功打完补丁后应该就能在新建虚拟机时选择客户机操作系统为 Apple Mac Os X 了。
接下来下载Yosemite的镜像，这个网上有很多，最好选择一个完整包，免得遇到些其他问题，或者找一些懒人版本也不错，需要注意的是dmg文件无法直接使用，得找个cdr版本的。这是我用的完整包：http://pan.baidu.com/s/1sj4ri5R 密码: y86w。
安装时如果遇到以下问题，只要找到并打开安装目录下的 XXXX.vmx 文件，使用文本编辑器打开后，在 smc.present = &amp;ldquo;TRUE&amp;rdquo; 后添加“smc.version = 0”后即可解决。
接下来就可以开启虚拟机安装了，安装时注意在选择安装位置时要进入磁盘工具，然后选择创建的硬盘，进行抹掉操作，这样该硬盘才能被系统识别。</description>
            <content type="html"><![CDATA[<p>最近想玩玩苹果的系统，不过没有mac的机器，只能在我船上安虚拟机玩玩了，下面记录一下vmware11安装yosemite的过程。</p>

<p>vmware的安装就不多说了，要在vmware上装mac的操作系统，需要打一下vmware unblocker补丁。vmware11系列需要用vmware unblocker 2.x的版本，而vmware10及以下版本则要使用vmware unblocker 1.x的版本，这里分享一下我所使用的2.06版：<a href="http://pan.baidu.com/s/1sj20CFF" target="_blank">http://pan.baidu.com/s/1sj20CFF</a> 密码: s6dh。</p>

<p>windows上使用管理员身份运行win-install.cmd即可，运行前最好在任务管理器里把所有vmware相关的服务和进程都关掉，否则有可能破解失败。如果运行后出现“unblocker.exe 已停止运行”的提示则是破解失败，这一般是因为有vmware的进程或服务没有停止，停止后手工运行unblocker.exe或unblocker.py则能完成破解。成功打完补丁后应该就能在新建虚拟机时选择客户机操作系统为 Apple Mac Os X 了。</p>

<p>接下来下载Yosemite的镜像，这个网上有很多，最好选择一个完整包，免得遇到些其他问题，或者找一些懒人版本也不错，需要注意的是dmg文件无法直接使用，得找个cdr版本的。这是我用的完整包：<a href="http://pan.baidu.com/s/1sj4ri5R" target="_blank">http://pan.baidu.com/s/1sj4ri5R</a> 密码: y86w。</p>

<p>安装时如果遇到以下问题，只要找到并打开安装目录下的 XXXX.vmx 文件，使用文本编辑器打开后，在 smc.present = &ldquo;TRUE&rdquo; 后添加“smc.version = 0”后即可解决。</p>

<p>接下来就可以开启虚拟机安装了，安装时注意在选择安装位置时要进入磁盘工具，然后选择创建的硬盘，进行抹掉操作，这样该硬盘才能被系统识别。</p>
]]></content>
        </item>
        
        <item>
            <title>心水物件记录</title>
            <link>https://qxzzf.com/posts/%E5%BF%83%E6%B0%B4%E7%89%A9%E4%BB%B6%E8%AE%B0%E5%BD%95/</link>
            <pubDate>Sat, 05 Sep 2015 15:25:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E5%BF%83%E6%B0%B4%E7%89%A9%E4%BB%B6%E8%AE%B0%E5%BD%95/</guid>
            <description> 水杯 memobottle 方形纸张杯 nalgene、骆驼 户外水壶
食物垃圾处理器 游戏手柄 无线吸尘器 扫地机器人 </description>
            <content type="html"><![CDATA[

<h3 id="水杯">水杯</h3>

<p>memobottle 方形纸张杯
nalgene、骆驼 户外水壶</p>

<h3 id="食物垃圾处理器">食物垃圾处理器</h3>

<h3 id="游戏手柄">游戏手柄</h3>

<h3 id="无线吸尘器">无线吸尘器</h3>

<h3 id="扫地机器人">扫地机器人</h3>
]]></content>
        </item>
        
        <item>
            <title>Windows下80端口被占用导致Apache无法启动解决方法</title>
            <link>https://qxzzf.com/posts/windows%E4%B8%8B80%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8%E5%AF%BC%E8%87%B4apache%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</link>
            <pubDate>Wed, 26 Aug 2015 15:13:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/windows%E4%B8%8B80%E7%AB%AF%E5%8F%A3%E8%A2%AB%E5%8D%A0%E7%94%A8%E5%AF%BC%E8%87%B4apache%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8%E8%A7%A3%E5%86%B3%E6%96%B9%E6%B3%95/</guid>
            <description>本来公司开发机用的是Win7，自家用的机器升级Win10一段时间了，感觉还不错，就把公司开发机也升级到了Win10，后来用到本地的Apache服务时发现启动不了了，netstat -ano | grep 80之后发现80端口被pid为4的系统进程占用了，就查了一下解决方法。
使用管理员身份运行cmd执行以下命令即可：
net stop http sc config http start=disabled  </description>
            <content type="html"><![CDATA[<p>本来公司开发机用的是Win7，自家用的机器升级Win10一段时间了，感觉还不错，就把公司开发机也升级到了Win10，后来用到本地的Apache服务时发现启动不了了，<code>netstat -ano | grep 80</code>之后发现80端口被pid为4的系统进程占用了，就查了一下解决方法。</p>

<p>使用管理员身份运行cmd执行以下命令即可：</p>

<pre><code class="language-shell">net stop http

sc config http start=disabled
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>phpize编译php扩展版本问题</title>
            <link>https://qxzzf.com/posts/phpize%E7%BC%96%E8%AF%91php%E6%89%A9%E5%B1%95%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98/</link>
            <pubDate>Mon, 24 Aug 2015 15:17:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/phpize%E7%BC%96%E8%AF%91php%E6%89%A9%E5%B1%95%E7%89%88%E6%9C%AC%E9%97%AE%E9%A2%98/</guid>
            <description>今天在编译php的amqp扩展时遇到一个问题，就是加载扩展时php-fpm报出如下错误：
NOTICE: PHP message: PHP Warning: PHP Startup: amqp: Unable to initialize module Module compiled with module API=20121212 PHP compiled with module API=20131226 These options need to match in Unknown on line 0  之前也遇到过类似的问题，原因是ubuntu自带了低版本的php，而我平时使用的php版本则为高版本的。
遇到这个情况也比较好解决，只要在编译命令里带上高版本phpize目录及php-config文件目录即可，对于我的情况即将命令改为类似以下形式：
/usr/local/php/bin/phpize &amp;amp;&amp;amp; ./configure --with-amqp --with-php-config=/usr/local/php/bin/php-config &amp;amp;&amp;amp; make &amp;amp;&amp;amp; make install  注意编译之前需要删除上一次编译时make生成的文件，可能还要执行phpize -clean命令，否则即使修改了命令行中的路径也不会有效果。</description>
            <content type="html"><![CDATA[<p>今天在编译php的amqp扩展时遇到一个问题，就是加载扩展时php-fpm报出如下错误：</p>

<pre><code class="language-shell">NOTICE: PHP message: PHP Warning:  PHP Startup: amqp: Unable to initialize module
Module compiled with module API=20121212
PHP    compiled with module API=20131226
These options need to match
 in Unknown on line 0

</code></pre>

<p>之前也遇到过类似的问题，原因是ubuntu自带了低版本的php，而我平时使用的php版本则为高版本的。</p>

<p>遇到这个情况也比较好解决，只要在编译命令里带上高版本phpize目录及php-config文件目录即可，对于我的情况即将命令改为类似以下形式：</p>

<pre><code class="language-shell">/usr/local/php/bin/phpize &amp;&amp; ./configure --with-amqp --with-php-config=/usr/local/php/bin/php-config &amp;&amp; make &amp;&amp; make install
</code></pre>

<p>注意编译之前需要删除上一次编译时make生成的文件，可能还要执行<code>phpize -clean</code>命令，否则即使修改了命令行中的路径也不会有效果。</p>
]]></content>
        </item>
        
        <item>
            <title>使用Navicat管理Sae共享型Mysql数据库</title>
            <link>https://qxzzf.com/posts/%E4%BD%BF%E7%94%A8navicat%E7%AE%A1%E7%90%86sae%E5%85%B1%E4%BA%AB%E5%9E%8Bmysql%E6%95%B0%E6%8D%AE%E5%BA%93/</link>
            <pubDate>Sun, 23 Aug 2015 22:10:18 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E4%BD%BF%E7%94%A8navicat%E7%AE%A1%E7%90%86sae%E5%85%B1%E4%BA%AB%E5%9E%8Bmysql%E6%95%B0%E6%8D%AE%E5%BA%93/</guid>
            <description>Sae在国内PaaS方面可以说一直是处于领军地位的，虽然现在不像之前通过开发者认证就每月都有免费云豆领了，不过如果想用PaaS平台，Sae依旧是不错的选择。
Sae自带的phpmyadmin版本比较老了，估计很多人都希望能有个更好的工具来进行数据库管理，最近研究了一下用Navicat的http tunnel来连接sae的数据库，最终捣鼓成功了，在这里分享给大家。
首先安装Navicat，在安装根目录找到ntunnel_mysql.php文件，将该文件放到自己的项目中，可以自由重命名。
然后对该文件的以下内容进行修改，大约在193行左右：
$hs = $_POST[&amp;quot;host&amp;quot;]; if( $_POST[&amp;quot;port&amp;quot;] ) $hs .= &amp;quot;:&amp;quot;.$_POST[&amp;quot;port&amp;quot;]; $conn = mysql_connect($hs, $_POST[&amp;quot;login&amp;quot;], $_POST[&amp;quot;password&amp;quot;]); $errno_c = mysql_errno(); if(($errno_c &amp;lt;= 0) &amp;amp;&amp;amp; ( $_POST[&amp;quot;db&amp;quot;] != &amp;quot;&amp;quot; )) { $res = mysql_select_db( $_POST[&amp;quot;db&amp;quot;], $conn); $errno_c = mysql_errno(); }  修改为：
$username = &#39;yourusername&#39;; $password = &#39;yourpassword&#39;; if ($_POST[&amp;quot;login&amp;quot;] == $username &amp;amp;&amp;amp; $_POST[&amp;quot;password&amp;quot;] == $password) { $hs = SAE_MYSQL_HOST_M . &#39;:&#39; . SAE_MYSQL_PORT; $conn = mysql_connect($hs, SAE_MYSQL_USER, SAE_MYSQL_PASS); $errno_c = mysql_errno(); if(($errno_c &amp;lt;= 0)) { $res = mysql_select_db(SAE_MYSQL_DB, $conn); $errno_c = mysql_errno(); } } else { EchoHeader(401); echo GetBlock(&amp;quot;Authentication failed&amp;quot;); exit(); }  注意将上面代码中的$username和$password定义成你自己想要设置的用户名和密码，这个只是做校验用，下面Navicat连接时会用到。修改好后就将文件上传至sae，注意该文件要能被访问。</description>
            <content type="html"><![CDATA[<p><a href="http://sae.sina.com.cn/" target="_blank">Sae</a>在国内PaaS方面可以说一直是处于领军地位的，虽然现在不像之前通过开发者认证就每月都有免费云豆领了，不过如果想用PaaS平台，Sae依旧是不错的选择。</p>

<p>Sae自带的phpmyadmin版本比较老了，估计很多人都希望能有个更好的工具来进行数据库管理，最近研究了一下用Navicat的http tunnel来连接sae的数据库，最终捣鼓成功了，在这里分享给大家。</p>

<p>首先安装Navicat，在安装根目录找到ntunnel_mysql.php文件，将该文件放到自己的项目中，可以自由重命名。</p>

<p>然后对该文件的以下内容进行修改，大约在193行左右：</p>

<pre><code class="language-php">$hs = $_POST[&quot;host&quot;];
if( $_POST[&quot;port&quot;] ) $hs .= &quot;:&quot;.$_POST[&quot;port&quot;];
$conn = mysql_connect($hs, $_POST[&quot;login&quot;], $_POST[&quot;password&quot;]);
$errno_c = mysql_errno();
if(($errno_c &lt;= 0) &amp;&amp; ( $_POST[&quot;db&quot;] != &quot;&quot; )) {
    $res = mysql_select_db( $_POST[&quot;db&quot;], $conn);
    $errno_c = mysql_errno();
}
</code></pre>

<p>修改为：</p>

<pre><code class="language-php">$username = 'yourusername';
$password = 'yourpassword';
if ($_POST[&quot;login&quot;] == $username &amp;&amp; $_POST[&quot;password&quot;] == $password) {
    $hs = SAE_MYSQL_HOST_M . ':' . SAE_MYSQL_PORT;
    $conn = mysql_connect($hs, SAE_MYSQL_USER, SAE_MYSQL_PASS);
    $errno_c = mysql_errno();
    if(($errno_c &lt;= 0)) {
        $res = mysql_select_db(SAE_MYSQL_DB, $conn);
        $errno_c = mysql_errno();
    }
} else {
    EchoHeader(401);
    echo GetBlock(&quot;Authentication failed&quot;);
    exit();
}
</code></pre>

<p>注意将上面代码中的$username和$password定义成你自己想要设置的用户名和密码，这个只是做校验用，下面Navicat连接时会用到。修改好后就将文件上传至sae，注意该文件要能被访问。</p>

<p>接下来就可以到Navicat里新增链接了，主机名和端口随便填即可，但不能为空，用户名和密码即为上一步的$username和$password，注意修改为自己设置的。</p>

<p><img src="https://ooo.0o0.ooo/2015/08/23/55d9d8de75b61.jpg" alt="QQ截图20150823222243.jpg" title="QQ截图20150823222243.jpg" /></p>

<p>接下来在高级标签里选择使用高级连接，点击添加数据库，数据库名即为下图中红框标出来的部分，可以在sae自带的phpmyadmin的界面中看到。</p>

<p><img src="https://ooo.0o0.ooo/2015/08/23/55d9d8de969d1.jpg" alt="QQ截图20150823222800.jpg" title="QQ截图20150823222800.jpg" /></p>

<p><img src="https://ooo.0o0.ooo/2015/08/23/55d9d8de9d2c1.jpg" alt="QQ截图20150823222539.jpg" title="QQ截图20150823222539.jpg" /></p>

<p>在http标签中选择使用http通道，通道地址即为你项目中该ntunnel_mysql.php文件的路径。</p>

<p><img src="https://ooo.0o0.ooo/2015/08/23/55d9d8dede8b9.jpg" alt="QQ截图20150823222849.jpg" title="QQ截图20150823222849.jpg" /></p>

<p>最后点击连接测试，不出意外此时就能使用Navicat来管理sae数据库了。</p>
]]></content>
        </item>
        
        <item>
            <title>阿里云代备案流程记录</title>
            <link>https://qxzzf.com/posts/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BB%A3%E5%A4%87%E6%A1%88%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95/</link>
            <pubDate>Fri, 21 Aug 2015 16:39:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E9%98%BF%E9%87%8C%E4%BA%91%E4%BB%A3%E5%A4%87%E6%A1%88%E6%B5%81%E7%A8%8B%E8%AE%B0%E5%BD%95/</guid>
            <description>最近感觉在国内做个站没备案真心不方便，都不能用国内的cdn节点，正好最近把魔都的居住证办下来了，就搞了一下备案。
目前国内代备案做的最好的大概就是阿里云了，不仅备案系统使用方便，而且全程不用花一分钱，如果是在魔都备案的话，整个弄下来两天也就足够了。
首先按照阿里的教程在备案系统填好相关信息，该上传的证件照片拍好上传就行。自己备案的时候遇到的两个注意点：一是个人备案也不需要填座机，我备案的时候貌似不填不让提交，如果也遇到这种情况随便填一个就行，阿里云的工作人员在电话确认时会帮忙删掉的；二是网站备案信息真实性核验单如果不方便打印出来签字再扫描或者想要方便点的话，可以ps手写体的签名上去，基本可以通过。信息都提交好后就是等阿里云工作人员的初审，通过的话会打电话确认，一般很快就会通过，效率很高。
通过初审后就是办理拍照，如果方便去核验点拍照也可以去核验点，一般都是选择邮寄幕布，免费的，杭州到魔都第二天就到了。幕布到了按照要求拍张照上传就行，然后继续等待审核，一般上传照片后也很快就会有工作人员电话联系，来确认提交信息至管局。
之后就等管局了，如果是大魔都，基本阿里云短信通知已提交信息后半小时备案就下来了，据说有概率打电话询问信息，不过我是没遇到，直接就短信通知备案号和备案密码了。
总的来说，在阿里云代备案还是十分轻松愉快的，不用阿里云ECS的申请一个万网的两年免费虚拟主机就可以在阿里云代备案了。</description>
            <content type="html"><![CDATA[<p>最近感觉在国内做个站没备案真心不方便，都不能用国内的cdn节点，正好最近把魔都的居住证办下来了，就搞了一下备案。</p>

<p>目前国内代备案做的最好的大概就是阿里云了，不仅备案系统使用方便，而且全程不用花一分钱，如果是在魔都备案的话，整个弄下来两天也就足够了。</p>

<p>首先按照阿里的教程在备案系统填好相关信息，该上传的证件照片拍好上传就行。自己备案的时候遇到的两个注意点：一是个人备案也不需要填座机，我备案的时候貌似不填不让提交，如果也遇到这种情况随便填一个就行，阿里云的工作人员在电话确认时会帮忙删掉的；二是网站备案信息真实性核验单如果不方便打印出来签字再扫描或者想要方便点的话，可以ps手写体的签名上去，基本可以通过。信息都提交好后就是等阿里云工作人员的初审，通过的话会打电话确认，一般很快就会通过，效率很高。</p>

<p>通过初审后就是办理拍照，如果方便去核验点拍照也可以去核验点，一般都是选择邮寄幕布，免费的，杭州到魔都第二天就到了。幕布到了按照要求拍张照上传就行，然后继续等待审核，一般上传照片后也很快就会有工作人员电话联系，来确认提交信息至管局。</p>

<p>之后就等管局了，如果是大魔都，基本阿里云短信通知已提交信息后半小时备案就下来了，据说有概率打电话询问信息，不过我是没遇到，直接就短信通知备案号和备案密码了。</p>

<p>总的来说，在阿里云代备案还是十分轻松愉快的，不用阿里云ECS的申请一个万网的两年免费虚拟主机就可以在阿里云代备案了。</p>
]]></content>
        </item>
        
        <item>
            <title>极简图床、sm.ms图床curl上传图片</title>
            <link>https://qxzzf.com/posts/%E6%9E%81%E7%AE%80%E5%9B%BE%E5%BA%8Asm.ms%E5%9B%BE%E5%BA%8Acurl%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</link>
            <pubDate>Tue, 18 Aug 2015 21:23:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E6%9E%81%E7%AE%80%E5%9B%BE%E5%BA%8Asm.ms%E5%9B%BE%E5%BA%8Acurl%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87/</guid>
            <description>极简图床是一个基于七牛的图床程序，使用方便、界面简洁美观，美中不足就是没有开放api，目前代码也没有开源。为了方便的在程序中上传图片至极简图床，我写了一段代码用curl来模拟上传图片，供大家参考：
&amp;lt;?php $data = base64_encode(file_get_contents(&#39;test.jpg&#39;)); $ch = curl_init(&#39;http://yotuku.cn/upload?name=&#39;); curl_setopt($ch, CURLOPT_CUSTOMREQUEST, &amp;quot;POST&amp;quot;); curl_setopt($ch, CURLOPT_POSTFIELDS, $data); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_HTTPHEADER, array( &#39;Content-Type: text/plain&#39;, &#39;Content-Length: &#39; . strlen($data)) ); $result = curl_exec($ch); echo $result;  sm.ms是vps.to、shadowsocks.com等站的站长，拥有t.tt、s.how等神域名的人建的一个图床，支持全站https，下面是curl上传图片至该站的代码：
&amp;lt;?php $url = &#39;https://sm.ms/index.php?act=upload&#39;; $image = curl_file_create(realpath(&#39;test.jpg&#39;), &#39;image/jpg&#39;, &#39;test.jpg&#39;); $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, true); curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false); curl_setopt($ch, CURLOPT_POST, true); curl_setopt($ch, CURLOPT_POSTFIELDS, [&#39;smfile&#39; =&amp;gt; $image]); $data = curl_exec($ch); curl_close($ch); echo $data;  </description>
            <content type="html"><![CDATA[<p><a href="http://yotuku.cn/" target="_blank">极简图床</a>是一个基于七牛的图床程序，使用方便、界面简洁美观，美中不足就是没有开放api，目前代码也没有开源。为了方便的在程序中上传图片至极简图床，我写了一段代码用curl来模拟上传图片，供大家参考：</p>

<pre><code class="language-php">&lt;?php
$data = base64_encode(file_get_contents('test.jpg'));

$ch = curl_init('http://yotuku.cn/upload?name=');                                                                      
curl_setopt($ch, CURLOPT_CUSTOMREQUEST, &quot;POST&quot;);                                                                     
curl_setopt($ch, CURLOPT_POSTFIELDS, $data);                                                                  
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);                                                                      
curl_setopt($ch, CURLOPT_HTTPHEADER, array(                                                                          
    'Content-Type: text/plain',                                                                                
    'Content-Length: ' . strlen($data))                                                                       
);                                                                                                                   

$result = curl_exec($ch);
echo $result;
</code></pre>

<p><a href="https://sm.ms/" target="_blank">sm.ms</a>是vps.to、shadowsocks.com等站的站长，拥有t.tt、s.how等神域名的人建的一个图床，支持全站https，下面是curl上传图片至该站的代码：</p>

<pre><code class="language-php">&lt;?php
$url = 'https://sm.ms/index.php?act=upload';
$image = curl_file_create(realpath('test.jpg'), 'image/jpg', 'test.jpg');

$ch = curl_init();
curl_setopt($ch, CURLOPT_URL, $url);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_POSTFIELDS, ['smfile' =&gt; $image]);
$data = curl_exec($ch);
curl_close($ch);
echo $data;
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Navicat通过http tunnel管理coding.net等paas平台数据库方法</title>
            <link>https://qxzzf.com/posts/navicat%E9%80%9A%E8%BF%87http-tunnel%E7%AE%A1%E7%90%86coding.net%E7%AD%89paas%E5%B9%B3%E5%8F%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%B9%E6%B3%95/</link>
            <pubDate>Wed, 12 Aug 2015 10:43:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/navicat%E9%80%9A%E8%BF%87http-tunnel%E7%AE%A1%E7%90%86coding.net%E7%AD%89paas%E5%B9%B3%E5%8F%B0%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%B9%E6%B3%95/</guid>
            <description>像coding和好雨云之类的paas平台，并没有像sae等平台一样原生提供phpmyadmin之类的数据库管理工具的支持，自己专门开一个应用来部署phpmyadmin一来比较麻烦，二来占用多余的资源，于是这两天研究了一下如何方便的管理这些平台上的数据库。
经过网友提示，我发现可以使用navicat通过http通道来进行管理，具体操作也很简单：
1.首先到navicat的安装目录下找到ntunnel_mysql.php文件
2.将上述文件传到需要管理数据库的项目里，并且进行部署
3.配置navicat链接，http通道填写你自己的项目内该文件的地址，该文件可以自己重命名，连接信息可以在平台的mysql服务连接信息里找到。
配置完成后点击连接测试，不出意外的话就成功了。</description>
            <content type="html"><![CDATA[<p>像<a href="https://coding.net" target="_blank">coding</a>和<a href="http://goodrain.com/" target="_blank">好雨云</a>之类的paas平台，并没有像sae等平台一样原生提供phpmyadmin之类的数据库管理工具的支持，自己专门开一个应用来部署phpmyadmin一来比较麻烦，二来占用多余的资源，于是这两天研究了一下如何方便的管理这些平台上的数据库。</p>

<p>经过网友提示，我发现可以使用navicat通过http通道来进行管理，具体操作也很简单：</p>

<p>1.首先到navicat的安装目录下找到ntunnel_mysql.php文件</p>

<p>2.将上述文件传到需要管理数据库的项目里，并且进行部署</p>

<p>3.配置navicat链接，http通道填写你自己的项目内该文件的地址，该文件可以自己重命名，连接信息可以在平台的mysql服务连接信息里找到。</p>

<p><img src="https://ooo.0o0.ooo/2015/08/12/55cab1f4c5638.png" alt="http通道" title="http通道" />
<img src="https://ooo.0o0.ooo/2015/08/12/55cab1f4ee263.png" alt="连接信息" title="连接信息" /></p>

<p>配置完成后点击连接测试，不出意外的话就成功了。</p>
]]></content>
        </item>
        
        <item>
            <title>自动备份coding.net数据库至vps</title>
            <link>https://qxzzf.com/posts/%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BDcoding.net%E6%95%B0%E6%8D%AE%E5%BA%93%E8%87%B3vps/</link>
            <pubDate>Mon, 10 Aug 2015 20:24:19 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BDcoding.net%E6%95%B0%E6%8D%AE%E5%BA%93%E8%87%B3vps/</guid>
            <description>coding.net上貌似本身没有自动备份数据库的功能，于是就想自己写一个来每天自动备份数据库到vps上。以下为具体代码：
&amp;lt;?php $url = &#39;xxx&#39;; $referer = &#39;xxx&#39;; $filename = &#39;xxx.sql&#39;; $cookie = &#39;xxx&#39;; $userAgent = &#39;xxx&#39;; $fp = fopen($filename, &#39;w&#39;); $ch = curl_init($url); curl_setopt($ch, CURLOPT_TIMEOUT, 50); curl_setopt($ch, CURLOPT_REFERER, $referer); curl_setopt($ch, CURLOPT_USERAGENT, $userAgent); curl_setopt($ch, CURLOPT_COOKIE, $cookie); curl_setopt($ch, CURLOPT_FILE, $fp); curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true); curl_exec($ch); curl_close($ch); fclose($fp);  其中url为点击服务管理中的msyql控制台里的备份数据按钮跳转到的链接，referer为控制台链接，filename可自定义，cookie和ua使用chrome浏览器的调试窗口就能获取到，具体就不多说了。
在vps上设置一个crontab定时跑这个脚本就可以自动备份coding上的数据库了。</description>
            <content type="html"><![CDATA[<p>coding.net上貌似本身没有自动备份数据库的功能，于是就想自己写一个来每天自动备份数据库到vps上。以下为具体代码：</p>

<pre><code class="language-php">&lt;?php
$url = 'xxx';
$referer = 'xxx';
$filename = 'xxx.sql';
$cookie = 'xxx';
$userAgent = 'xxx';

$fp = fopen($filename, 'w');
$ch = curl_init($url);
curl_setopt($ch, CURLOPT_TIMEOUT, 50);
curl_setopt($ch, CURLOPT_REFERER, $referer);
curl_setopt($ch, CURLOPT_USERAGENT, $userAgent);
curl_setopt($ch, CURLOPT_COOKIE, $cookie);
curl_setopt($ch, CURLOPT_FILE, $fp);
curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
curl_exec($ch);
curl_close($ch);
fclose($fp);

</code></pre>

<p>其中url为点击服务管理中的msyql控制台里的备份数据按钮跳转到的链接，referer为控制台链接，filename可自定义，cookie和ua使用chrome浏览器的调试窗口就能获取到，具体就不多说了。</p>

<p>在vps上设置一个crontab定时跑这个脚本就可以自动备份coding上的数据库了。</p>
]]></content>
        </item>
        
        <item>
            <title>Ubuntu安装ruby环境</title>
            <link>https://qxzzf.com/posts/ubuntu%E5%AE%89%E8%A3%85ruby%E7%8E%AF%E5%A2%83/</link>
            <pubDate>Wed, 05 Aug 2015 18:39:57 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/ubuntu%E5%AE%89%E8%A3%85ruby%E7%8E%AF%E5%A2%83/</guid>
            <description>首先安装gpg2，否则可能会报错：
apt-get install gnupg2 gpg2 --keyserver hkp://keys.gnupg.net --recv-keys D39DC0E3  安装rvm，科学上网会比较快，或者换淘宝源：
curl -L https://get.rvm.io | bash -s stable  exit后重新登录rvm会生效。
用rvm安装ruby并设置版本：
rvm install 2.0.0 rvm 2.0.0 --default  </description>
            <content type="html"><![CDATA[<p>首先安装gpg2，否则可能会报错：</p>

<pre><code class="language-shell">apt-get install gnupg2

gpg2 --keyserver hkp://keys.gnupg.net --recv-keys D39DC0E3
</code></pre>

<p>安装rvm，科学上网会比较快，或者换淘宝源：</p>

<pre><code class="language-shell">curl -L https://get.rvm.io | bash -s stable
</code></pre>

<p>exit后重新登录rvm会生效。</p>

<p>用rvm安装ruby并设置版本：</p>

<pre><code class="language-shell">rvm install 2.0.0

rvm 2.0.0 --default
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>每天自动push代码到coding.net赚码币</title>
            <link>https://qxzzf.com/posts/%E6%AF%8F%E5%A4%A9%E8%87%AA%E5%8A%A8push%E4%BB%A3%E7%A0%81%E5%88%B0coding.net%E8%B5%9A%E7%A0%81%E5%B8%81/</link>
            <pubDate>Mon, 27 Jul 2015 20:56:47 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E6%AF%8F%E5%A4%A9%E8%87%AA%E5%8A%A8push%E4%BB%A3%E7%A0%81%E5%88%B0coding.net%E8%B5%9A%E7%A0%81%E5%B8%81/</guid>
            <description>coding.net可以用作代码托管和演示，也即相当于一个paas平台。它提供的项目演示服务分为免费版、开发版和高级版，其中开发版每月49元，而每天push代码到coding.net即可获得0.03个码币，一个码币相当于50元，每天push代码的话，开发就只要花几块钱就能买一个月了。
首先我们在coding.net上创建一个专门用于自动push代码的项目，用readme.md初始化，其他随意。然后我们到自己的服务器或者vps上clone这个项目，注意一定要用SSH方式。
然后我们在项目根目录新增一个auto.sh文件，内容如下：
cd /home/wwwroot/default/log echo -e &amp;quot;\n&amp;quot; &amp;gt;&amp;gt; README.md date &amp;gt;&amp;gt; README.md git add README.md git commit -m &amp;quot;log datetime&amp;quot; git push  注意把文件中的项目路径改为自己的项目存放路径。
最后我们编辑crontab：
crontab -e  增加如下内容，即每天8点push代码，注意修改路径：
0 8 * * * /home/wwwroot/default/log/auto.sh  重启crontab
service cron restart  大功告成</description>
            <content type="html"><![CDATA[<p><a href="https://coding.net/register?key=b00cbbdb-b891-4727-b93a-edf112c136e9" target="_blank">coding.net</a>可以用作代码托管和演示，也即相当于一个paas平台。它提供的项目演示服务分为免费版、开发版和高级版，其中开发版每月49元，而每天push代码到coding.net即可获得0.03个码币，一个码币相当于50元，每天push代码的话，开发就只要花几块钱就能买一个月了。</p>

<p>首先我们在<a href="https://coding.net/register?key=b00cbbdb-b891-4727-b93a-edf112c136e9" target="_blank">coding.net</a>上创建一个专门用于自动push代码的项目，用readme.md初始化，其他随意。然后我们到自己的服务器或者vps上clone这个项目，注意一定要用SSH方式。</p>

<p>然后我们在项目根目录新增一个auto.sh文件，内容如下：</p>

<pre><code class="language-shell">cd /home/wwwroot/default/log
echo -e &quot;\n&quot; &gt;&gt; README.md
date &gt;&gt; README.md
git add README.md
git commit -m &quot;log datetime&quot;
git push 
</code></pre>

<p>注意把文件中的项目路径改为自己的项目存放路径。</p>

<p>最后我们编辑crontab：</p>

<pre><code class="language-shell">crontab -e
</code></pre>

<p>增加如下内容，即每天8点push代码，注意修改路径：</p>

<pre><code class="language-shell">0 8 * * * /home/wwwroot/default/log/auto.sh
</code></pre>

<p>重启crontab</p>

<pre><code class="language-shell">service cron restart
</code></pre>

<p>大功告成</p>
]]></content>
        </item>
        
        <item>
            <title>实用shell脚本整理（不定期更新）</title>
            <link>https://qxzzf.com/posts/%E5%AE%9E%E7%94%A8shell%E8%84%9A%E6%9C%AC%E6%95%B4%E7%90%86%E4%B8%8D%E5%AE%9A%E6%9C%9F%E6%9B%B4%E6%96%B0/</link>
            <pubDate>Fri, 24 Jul 2015 14:39:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E5%AE%9E%E7%94%A8shell%E8%84%9A%E6%9C%AC%E6%95%B4%E7%90%86%E4%B8%8D%E5%AE%9A%E6%9C%9F%E6%9B%B4%E6%96%B0/</guid>
            <description>转换时间和unix时间戳 #时间转时间戳 date -d &amp;quot;2015-07-24 12:25:00&amp;quot; +%s #时间戳转时间 date -d &amp;quot;@1437711900&amp;quot;  分析nginx日志 #查看访问地址次数排行 awk -F\&amp;quot; &#39;{print $2}&#39; blog_access.log | awk &#39;{print $2}&#39; | sort | uniq -c | sort -rn  输出当前目录下各个子目录所使用的空间 du -h --max-depth=1  文件夹下文件按大小排序 du -sh /dir/* | sort -rn (后面还可以接 head、tail 之类的命令)  查找文件内容 grep &amp;quot;search&amp;quot; filename #从文件内容查找与正则表达式匹配的行： grep –e “/pattern/” filename #查找时不区分大小写： grep –i &amp;quot;search&amp;quot; filename #查找匹配的行数： grep -c &amp;quot;search&amp;quot; filename #从文件内容查找不匹配指定字符串的行： grep –v &amp;quot;search&amp;quot; filename #结合find find .</description>
            <content type="html"><![CDATA[

<h2 id="转换时间和unix时间戳">转换时间和unix时间戳</h2>

<pre><code class="language-shell">#时间转时间戳
date -d &quot;2015-07-24 12:25:00&quot; +%s

#时间戳转时间
date -d &quot;@1437711900&quot;
</code></pre>

<h2 id="分析nginx日志">分析nginx日志</h2>

<pre><code class="language-shell">#查看访问地址次数排行
awk -F\&quot; '{print $2}' blog_access.log | awk '{print $2}' | sort | uniq -c | sort -rn
</code></pre>

<h2 id="输出当前目录下各个子目录所使用的空间">输出当前目录下各个子目录所使用的空间</h2>

<pre><code class="language-shell">du -h --max-depth=1
</code></pre>

<h2 id="文件夹下文件按大小排序">文件夹下文件按大小排序</h2>

<pre><code class="language-shell">du -sh /dir/* | sort -rn (后面还可以接 head、tail 之类的命令)
</code></pre>

<h2 id="查找文件内容">查找文件内容</h2>

<pre><code class="language-shell">grep &quot;search&quot; filename

#从文件内容查找与正则表达式匹配的行：
grep –e “/pattern/” filename

#查找时不区分大小写：
grep –i &quot;search&quot; filename

#查找匹配的行数：
grep -c &quot;search&quot; filename

#从文件内容查找不匹配指定字符串的行：
grep –v &quot;search&quot; filename

#结合find
find . -name &quot;*.php&quot; | xargs grep &quot;function&quot;
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>Conoha VPS Ubuntu安装锐速</title>
            <link>https://qxzzf.com/posts/conoha-vps-ubuntu%E5%AE%89%E8%A3%85%E9%94%90%E9%80%9F/</link>
            <pubDate>Sun, 19 Jul 2015 21:17:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/conoha-vps-ubuntu%E5%AE%89%E8%A3%85%E9%94%90%E9%80%9F/</guid>
            <description>小尾巴 通过该链接注册conoha后充值500日元以上可获得1000日元优惠券。
 对于一般站长来说还是习惯使用ubuntu系统，但是我在conoha vps ubuntu系统上安装锐速时，发现锐速暂不支持conoha自带的ubuntu14.04镜像的内核版本，于是查询了锐速支持的列表后，决定安装受支持的版本内核。
apt-cache search linux-image (搜索可下载内核) apt-get install linux-image-3.13.0-46-generic (安装指定内核) apt-get remove linux-image-3.16.0-43-generic (卸载其他版本内核)  执行完成以上步骤之后就可以正常安装锐速了。</description>
            <content type="html"><![CDATA[<blockquote>
<p><strong>小尾巴</strong> 通过<a href="https://www.conoha.jp/referral/?token=mrBOqqw4yzeJSyoPloAjAim8mQQPBp6XY5E8lx4ir2hW.K81KX4-49S" target="_blank">该链接</a>注册conoha后充值500日元以上可获得1000日元优惠券。</p>
</blockquote>

<p>对于一般站长来说还是习惯使用ubuntu系统，但是我在conoha vps ubuntu系统上安装锐速时，发现锐速暂不支持conoha自带的ubuntu14.04镜像的内核版本，于是查询了<a href="http://my.serverspeeder.com/ls.do?m=availables" target="_blank">锐速支持的列表</a>后，决定安装受支持的版本内核。</p>

<pre><code class="language-shell">apt-cache search linux-image (搜索可下载内核)
apt-get install linux-image-3.13.0-46-generic (安装指定内核)
apt-get remove linux-image-3.16.0-43-generic (卸载其他版本内核)
</code></pre>

<p>执行完成以上步骤之后就可以正常安装锐速了。</p>
]]></content>
        </item>
        
        <item>
            <title>【转载】Debian/Ubuntu系vps上一键安装net-speeder</title>
            <link>https://qxzzf.com/posts/%E8%BD%AC%E8%BD%BDdebianubuntu%E7%B3%BBvps%E4%B8%8A%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85net-speeder/</link>
            <pubDate>Fri, 17 Jul 2015 21:47:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E8%BD%AC%E8%BD%BDdebianubuntu%E7%B3%BBvps%E4%B8%8A%E4%B8%80%E9%94%AE%E5%AE%89%E8%A3%85net-speeder/</guid>
            <description>全文转载自 http://www.tennfy.com/3495.html。
小尾巴 通过该链接注册conoha后充值500日元以上可获得1000日元优惠券。
 tennfy之前在Linode debian系统下安装锐速教程一文中介绍过锐速，锐速使用效果确实非常好，可以有效的提升本地到VPS的连接速度。但是，锐速在KVM或XEN VPS中方可使用，对于众多OPENVZ vps用户来说未免有些遗憾。本文就来介绍一下锐速在OPENVZ vps环境下的替代品–net-speeder。
net-speeder介绍 net-speeder是一款与锐速类似的TCP加速程序，且具有锐速不具备的优势：可以用于OPENVZ虚拟化的vps中。但是，相对于锐速可以通过丢包判断及预测、准确估算路径带宽等方式智能发包，net-speeder采用了更为简单粗暴的方式，强制双倍发包。这样的做法有利有弊，优点在高延迟不稳定链路上（如电信到美国VPS）可以有效的降低丢包率，但是双倍发包就意味着耗费双倍流量，对于VPS流量有限的朋友来说需要慎重。
net-speeder github项目地址：https://github.com/snooda/net-speeder
net-speeder的安装及使用 net-speeder的安装 登入VPS后，下载net-speeder安装脚本
wget --no-check-certificate https://raw.githubusercontent.com/tennfy/debian_netspeeder_tennfy/master/debian_netspeeder_tennfy.sh  执行该脚本
chmod a+x debian_netspeeder_tennfy.sh bash debian_netspeeder_tennfy.sh  net-speeder的使用 脚本安装完成后，会自动运行net-speeder。可以通过如下命令查看net-speeder运行状态及停止net-speeder。
查看net-speeder是否运行
ps aux|grep net_speeder|grep -v grep  停止net-speeder
killall net_speeder  启动net-speeder（OPENVZ环境）
nohup /root/net_speeder venet0 &amp;quot;ip&amp;quot; &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;  设置net-speeder定时开关 net-speeder实际上是颇有争议的，双倍发包会导致网络拥堵，有点损人利己的感觉。因此，tennfy给出一个折中的方案，就是在晚上高峰期的时候开启net-speeder,空闲时间关闭。
1、设置时区 由于美国的VPS时区跟中国是不一致的，因此需要给VPS设置一下时区。 执行以下命令
echo &amp;quot;Asia/Shanghai&amp;quot; &amp;gt;/etc/timezone  输入date命令查看VPS上显示的时间是否与本地相同。
2、设置net-speeder定时开关 我们设定19点开启，24点关闭。执行以下命令：
echo &#39;0 19 * * * root nohup /root/net_speeder venet0 &amp;quot;ip&amp;quot; &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 &amp;amp;&#39; &amp;gt;&amp;gt;/etc/crontab echo &amp;quot;0 0 * * * root killall net_speeder&amp;quot; &amp;gt;&amp;gt;/etc/crontab /etc/init.</description>
            <content type="html"><![CDATA[

<blockquote>
<p>全文转载自 <a href="http://www.tennfy.com/3495.html" target="_blank">http://www.tennfy.com/3495.html</a>。</p>

<p><strong>小尾巴</strong> 通过<a href="https://www.conoha.jp/referral/?token=mrBOqqw4yzeJSyoPloAjAim8mQQPBp6XY5E8lx4ir2hW.K81KX4-49S" target="_blank">该链接</a>注册conoha后充值500日元以上可获得1000日元优惠券。</p>
</blockquote>

<p>tennfy之前在<a href="http://www.tennfy.com/3134.html" target="_blank">Linode debian系统下安装锐速教程</a>一文中介绍过锐速，锐速使用效果确实非常好，可以有效的提升本地到VPS的连接速度。但是，锐速在KVM或XEN VPS中方可使用，对于众多OPENVZ vps用户来说未免有些遗憾。本文就来介绍一下锐速在OPENVZ vps环境下的替代品–net-speeder。</p>

<h2 id="net-speeder介绍">net-speeder介绍</h2>

<hr />

<p>net-speeder是一款与锐速类似的TCP加速程序，且具有锐速不具备的优势：可以用于OPENVZ虚拟化的vps中。但是，相对于锐速可以通过丢包判断及预测、准确估算路径带宽等方式智能发包，net-speeder采用了更为简单粗暴的方式，强制双倍发包。这样的做法有利有弊，优点在高延迟不稳定链路上（如电信到美国VPS）可以有效的降低丢包率，但是双倍发包就意味着耗费双倍流量，对于VPS流量有限的朋友来说需要慎重。</p>

<p>net-speeder github项目地址：<a href="https://github.com/snooda/net-speeder" target="_blank">https://github.com/snooda/net-speeder</a></p>

<h2 id="net-speeder的安装及使用">net-speeder的安装及使用</h2>

<hr />

<h3 id="net-speeder的安装">net-speeder的安装</h3>

<p>登入VPS后，下载net-speeder安装脚本</p>

<pre><code class="language-shell">wget --no-check-certificate https://raw.githubusercontent.com/tennfy/debian_netspeeder_tennfy/master/debian_netspeeder_tennfy.sh
</code></pre>

<p>执行该脚本</p>

<pre><code class="language-shell">chmod a+x debian_netspeeder_tennfy.sh
bash debian_netspeeder_tennfy.sh
</code></pre>

<h3 id="net-speeder的使用">net-speeder的使用</h3>

<p>脚本安装完成后，会自动运行net-speeder。可以通过如下命令查看net-speeder运行状态及停止net-speeder。</p>

<p>查看net-speeder是否运行</p>

<pre><code class="language-shell">ps aux|grep net_speeder|grep -v grep
</code></pre>

<p>停止net-speeder</p>

<pre><code class="language-shell">killall net_speeder
</code></pre>

<p>启动net-speeder（OPENVZ环境）</p>

<pre><code class="language-shell">nohup /root/net_speeder venet0 &quot;ip&quot; &gt;/dev/null 2&gt;&amp;1 &amp;
</code></pre>

<h2 id="设置net-speeder定时开关">设置net-speeder定时开关</h2>

<hr />

<p>net-speeder实际上是颇有争议的，双倍发包会导致网络拥堵，有点损人利己的感觉。因此，tennfy给出一个折中的方案，就是在晚上高峰期的时候开启net-speeder,空闲时间关闭。</p>

<h3 id="1-设置时区">1、设置时区</h3>

<p>由于美国的VPS时区跟中国是不一致的，因此需要给VPS设置一下时区。
执行以下命令</p>

<pre><code class="language-shell">echo &quot;Asia/Shanghai&quot; &gt;/etc/timezone
</code></pre>

<p>输入date命令查看VPS上显示的时间是否与本地相同。</p>

<h3 id="2-设置net-speeder定时开关">2、设置net-speeder定时开关</h3>

<p>我们设定19点开启，24点关闭。执行以下命令：</p>

<pre><code class="language-shell">echo '0 19 * * * root nohup /root/net_speeder venet0 &quot;ip&quot; &gt;/dev/null 2&gt;&amp;1 &amp;' &gt;&gt;/etc/crontab
echo &quot;0 0 * * * root killall net_speeder&quot; &gt;&gt;/etc/crontab
/etc/init.d/cron restart
</code></pre>

<h2 id="net-speeder注意事项">net-speeder注意事项</h2>

<hr />

<p>以下几种情况不适合使用net-speeder:
1、服务器流量较小，因为使用net-speeder会消耗双倍流量。
2、主要提供网页、图片等小文件访问。net-speeder对于下载大文件、代理访问视频网站等效果比较好，而对小文件加速效果不明显。
3、需要使用pptpd等不支持双倍发包的网络软件。net-speeder会造成这些软件无法正常使用。
4、如果线路本身很好，不存在延迟较大情况，使用net-speeder效果会适得其反。</p>
]]></content>
        </item>
        
        <item>
            <title>B站港台分部被发现</title>
            <link>https://qxzzf.com/posts/b%E7%AB%99%E6%B8%AF%E5%8F%B0%E5%88%86%E9%83%A8%E8%A2%AB%E5%8F%91%E7%8E%B0/</link>
            <pubDate>Sun, 12 Jul 2015 20:31:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/b%E7%AB%99%E6%B8%AF%E5%8F%B0%E5%88%86%E9%83%A8%E8%A2%AB%E5%8F%91%E7%8E%B0/</guid>
            <description>B站新番中出现了《监狱学园》，但是无论是网页端手机端登录与否都无法观看，有B吧吧友对此事很感兴趣并且发现了B站的港台分部，详见此贴此贴。
分部地址http://www.mimi.gg/,目前只有两部番，需港台ip用户才可正常观看，方法自寻。</description>
            <content type="html"><![CDATA[<p>B站新番中出现了《监狱学园》，但是无论是网页端手机端登录与否都无法观看，有B吧吧友对此事很感兴趣并且发现了B站的港台分部，详见此贴<a href="http://tieba.baidu.com/p/3888709885" target="_blank">此贴</a>。</p>

<p>分部地址<a href="http://www.mimi.gg/" target="_blank">http://www.mimi.gg/</a>,目前只有两部番，需港台ip用户才可正常观看，方法自寻。</p>
]]></content>
        </item>
        
        <item>
            <title>配置ssh免密码登录linux机器</title>
            <link>https://qxzzf.com/posts/%E9%85%8D%E7%BD%AEssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95linux%E6%9C%BA%E5%99%A8/</link>
            <pubDate>Sun, 12 Jul 2015 20:23:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E9%85%8D%E7%BD%AEssh%E5%85%8D%E5%AF%86%E7%A0%81%E7%99%BB%E5%BD%95linux%E6%9C%BA%E5%99%A8/</guid>
            <description>首先本地机器如果是window的话，需要安装git或者其他工具以获取ssh工具。然后使用以下命令生成密钥对：
ssh-keygen -t rsa -C comment  然后进入密钥存放目录使用如下命令上传公钥置服务器端：
scp id_rsa.pub root@hostname:~/id_rsa.pub  公钥上传成功后进入服务器使用命令追加授权key：
cat ~/id_rsa.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys  修改授权文件权限：
chmod 600 ~/.ssh/authorized_keys  此时就可以免密码登录服务器了。</description>
            <content type="html"><![CDATA[<p>首先本地机器如果是window的话，需要安装git或者其他工具以获取ssh工具。然后使用以下命令生成密钥对：</p>

<pre><code class="language-shell">ssh-keygen -t rsa -C comment
</code></pre>

<p>然后进入密钥存放目录使用如下命令上传公钥置服务器端：</p>

<pre><code class="language-shell">scp id_rsa.pub root@hostname:~/id_rsa.pub
</code></pre>

<p>公钥上传成功后进入服务器使用命令追加授权key：</p>

<pre><code class="language-shell">cat ~/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys
</code></pre>

<p>修改授权文件权限：</p>

<pre><code class="language-shell">chmod 600 ~/.ssh/authorized_keys
</code></pre>

<p>此时就可以免密码登录服务器了。</p>
]]></content>
        </item>
        
        <item>
            <title>phpmyadmin配置连接多数据库及高级功能配置</title>
            <link>https://qxzzf.com/posts/phpmyadmin%E9%85%8D%E7%BD%AE%E8%BF%9E%E6%8E%A5%E5%A4%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8A%E9%AB%98%E7%BA%A7%E5%8A%9F%E8%83%BD%E9%85%8D%E7%BD%AE/</link>
            <pubDate>Fri, 03 Jul 2015 15:32:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/phpmyadmin%E9%85%8D%E7%BD%AE%E8%BF%9E%E6%8E%A5%E5%A4%9A%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8A%E9%AB%98%E7%BA%A7%E5%8A%9F%E8%83%BD%E9%85%8D%E7%BD%AE/</guid>
            <description>配置多数据库连接很简单，将phpmyadmin的config.inc.php中原本的服务器连接部分的内容修改为：
$cfg[&#39;AllowArbitraryServer&#39;] = true; $db_servers = array( 1 =&amp;gt; array( &#39;host&#39; =&amp;gt; &#39;localhost&#39;, &#39;user&#39; =&amp;gt; &#39;root&#39;, &#39;password&#39; =&amp;gt; &#39;123456&#39;, &#39;port&#39; =&amp;gt; &#39;3306&#39;, ), 2 =&amp;gt; array( &#39;host&#39; =&amp;gt; &#39;192.168.65.168&#39;, &#39;user&#39; =&amp;gt; &#39;root&#39;, &#39;password&#39; =&amp;gt; &#39;123456&#39;, &#39;port&#39; =&amp;gt; &#39;3306&#39;, ), ); for ($i = 1; $i &amp;lt;= count($db_servers); $i++) { $cfg[&#39;Servers&#39;][$i][&#39;auth_type&#39;] = &#39;cookie&#39;; $cfg[&#39;Servers&#39;][$i][&#39;user&#39;] = $db_servers[$i][&#39;user&#39;]; $cfg[&#39;Servers&#39;][$i][&#39;password&#39;] = $db_servers[$i][&#39;password&#39;]; $cfg[&#39;Servers&#39;][$i][&#39;host&#39;] = $db_servers[$i][&#39;host&#39;]; $cfg[&#39;Servers&#39;][$i][&#39;port&#39;] = $db_servers[$i][&#39;port&#39;]; $cfg[&#39;Servers&#39;][$i][&#39;connect_type&#39;] = &#39;tcp&#39;; $cfg[&#39;Servers&#39;][$i][&#39;compress&#39;] = false; $cfg[&#39;Servers&#39;][$i][&#39;AllowNoPassword&#39;] = false; }  这样就可以在登录时选择服务器了。</description>
            <content type="html"><![CDATA[<p>配置多数据库连接很简单，将phpmyadmin的config.inc.php中原本的服务器连接部分的内容修改为：</p>

<pre><code class="language-php">$cfg['AllowArbitraryServer'] = true; 

$db_servers = array(
    1 =&gt; array(
        'host' =&gt; 'localhost',
        'user' =&gt; 'root',
        'password' =&gt; '123456',
        'port' =&gt; '3306',
    ),
    2 =&gt; array(
        'host'   =&gt; '192.168.65.168',
        'user'   =&gt; 'root',
        'password' =&gt; '123456',
        'port' =&gt; '3306',
    ),
);

for ($i = 1; $i &lt;= count($db_servers); $i++) {
    $cfg['Servers'][$i]['auth_type'] = 'cookie';
    $cfg['Servers'][$i]['user'] = $db_servers[$i]['user'];
    $cfg['Servers'][$i]['password'] = $db_servers[$i]['password'];
    $cfg['Servers'][$i]['host'] = $db_servers[$i]['host'];
    $cfg['Servers'][$i]['port'] = $db_servers[$i]['port'];
    $cfg['Servers'][$i]['connect_type'] = 'tcp';
    $cfg['Servers'][$i]['compress'] = false;
    $cfg['Servers'][$i]['AllowNoPassword'] = false;
}
</code></pre>

<p>这样就可以在登录时选择服务器了。</p>

<p>登录验证方式改为cookie后，phpmyadmin会提示“phpMyAdmin 高级功能未全部设置，部分功能不可用”。高级功能虽然不是必要的，但要开启的话其实也很方便，步骤如下：</p>

<ol>
<li>在数据库中导入phpmyadmin/sql目录下的create_tables.sql文件。</li>
<li>执行以下的语句创建pma用户并赋权：</li>
</ol>

<pre><code class="language-sql">GRANT USAGE ON mysql.* TO 'pma'@'localhost' IDENTIFIED BY 'pmapass';
GRANT SELECT (
  Host, User, Select_priv, Insert_priv, Update_priv, Delete_priv,
  Create_priv, Drop_priv, Reload_priv, Shutdown_priv, Process_priv,
  File_priv, Grant_priv, References_priv, Index_priv, Alter_priv,
  Show_db_priv, Super_priv, Create_tmp_table_priv, Lock_tables_priv,
  Execute_priv, Repl_slave_priv, Repl_client_priv
  ) ON mysql.user TO 'pma'@'localhost';
GRANT SELECT (Host, Db, User, Table_name, Table_priv, Column_priv)
  ON mysql.tables_priv TO 'pma'@'localhost';
GRANT SELECT, INSERT, UPDATE, DELETE ON phpmyadmin.* TO 'pma'@'localhost';
GRANT SELECT ON mysql.db TO 'pma'@'localhost';
</code></pre>

<p>并用<code>FLUSH PRIVILEGES;</code>来使权限生效。</p>

<ol>
<li>在config.inc.php中增加以下内容：</li>
</ol>

<pre><code class="language-php">$cfg['Servers'][$i]['controluser'] = 'pma';
        $cfg['Servers'][$i]['controlpass'] = 'pmapass';
        $cfg['Servers'][$i]['pmadb'] = 'phpmyadmin';
        $cfg['Servers'][$i]['bookmarktable'] = 'pma__bookmark';
        $cfg['Servers'][$i]['relation'] = 'pma__relation';
        $cfg['Servers'][$i]['table_info'] = 'pma__table_info';
        $cfg['Servers'][$i]['pdf_pages'] = 'pma__pdf_pages';
        $cfg['Servers'][$i]['table_coords'] = 'pma__table_coords';
        $cfg['Servers'][$i]['column_info'] = 'pma__column_info';
        $cfg['Servers'][$i]['history'] = 'pma__history';
        $cfg['Servers'][$i]['recent'] = 'pma__recent';
        $cfg['Servers'][$i]['table_uiprefs'] = 'pma__table_uiprefs';
        $cfg['Servers'][$i]['users'] = 'pma__users';
        $cfg['Servers'][$i]['usergroups'] = 'pma__usergroups';
        $cfg['Servers'][$i]['navigationhiding'] = 'pma__navigationhiding';
        $cfg['Servers'][$i]['tracking'] = 'pma__tracking';
        $cfg['Servers'][$i]['userconfig'] = 'pma__userconfig';
        $cfg['Servers'][$i]['designer_coords'] = 'pma__designer_coords';
        $cfg['Servers'][$i]['favorite'] = 'pma__favorite';
        $cfg['Servers'][$i]['savedsearches'] = 'pma__savedsearches';
</code></pre>

<p>OK,大功搞成了。</p>
]]></content>
        </item>
        
        <item>
            <title>linux服务器上mysql无法远程连接的可能原因</title>
            <link>https://qxzzf.com/posts/linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8Amysql%E6%97%A0%E6%B3%95%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%8F%AF%E8%83%BD%E5%8E%9F%E5%9B%A0/</link>
            <pubDate>Fri, 03 Jul 2015 14:51:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/linux%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8Amysql%E6%97%A0%E6%B3%95%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%8F%AF%E8%83%BD%E5%8E%9F%E5%9B%A0/</guid>
            <description>如果telnet远程linux服务器的3306端口是通的话，那说明没有授予用户远程登录权限，那么就在远程服务器上登入mysql后使用如下语句授权：
grant all privileges on *.* to root@&amp;quot;%&amp;quot; identified by &amp;quot;password&amp;quot; with grant option; flush privileges;  第一行命令解释如下，*.*：第一个*代表数据库名；第二个*代表表名。root：授予用户账号。“%”：表示授权的用户IP，%代表任意的IP地址都能访问。“password”：分配账号对应的密码。第二行命令是刷新权限信息，也即是让我们所作的设置马上生效。
如果telnet不通，我们先用netstat查看3306端口是否已监听所有ip地址的请求：
netstat -an | grep 3306  如果输出为
tcp 0 0 127.0.0.1:3306 0.0.0.0:* LISTEN  则说明只监听了本地连接。解决方法：修改/etc/mysql/my.cnf文件。打开文件，找到下面内容：
# Instead of skip-networking the default is now to listen only on # localhost which is more compatible and is not less secure. bind-address = 127.0.0.1  把上面bind-address = 127.0.0.1这一行注释掉或者把127.0.0.1换成合适的IP。 重新启动mysql再用netstat检测是否为：
tcp 0 0 0.0.0.0:3306 0.0.0.0:* LISTEN  如果这样之后还是telnet不通，那基本就是防火墙的问题了，查看iptables的rules文件里是否包含</description>
            <content type="html"><![CDATA[<p>如果telnet远程linux服务器的3306端口是通的话，那说明没有授予用户远程登录权限，那么就在远程服务器上登入mysql后使用如下语句授权：</p>

<pre><code class="language-sql">grant all privileges on *.* to root@&quot;%&quot; identified by &quot;password&quot; with grant option;

flush privileges;
</code></pre>

<p>第一行命令解释如下，*.*：第一个*代表数据库名；第二个*代表表名。root：授予用户账号。“%”：表示授权的用户IP，%代表任意的IP地址都能访问。“password”：分配账号对应的密码。第二行命令是刷新权限信息，也即是让我们所作的设置马上生效。</p>

<p>如果telnet不通，我们先用netstat查看3306端口是否已监听所有ip地址的请求：</p>

<pre><code>netstat -an | grep 3306
</code></pre>

<p>如果输出为</p>

<pre><code>tcp        0      0 127.0.0.1:3306            0.0.0.0:*               LISTEN
</code></pre>

<p>则说明只监听了本地连接。解决方法：修改/etc/mysql/my.cnf文件。打开文件，找到下面内容：</p>

<pre><code># Instead of skip-networking the default is now to listen only on
# localhost which is more compatible and is not less secure.
bind-address  = 127.0.0.1
</code></pre>

<p>把上面<code>bind-address = 127.0.0.1</code>这一行注释掉或者把127.0.0.1换成合适的IP。
重新启动mysql再用netstat检测是否为：</p>

<pre><code>tcp        0      0 0.0.0.0:3306            0.0.0.0:*               LISTEN
</code></pre>

<p>如果这样之后还是telnet不通，那基本就是防火墙的问题了，查看iptables的rules文件里是否包含</p>

<pre><code>-A INPUT -p tcp -m tcp --dport 3306 -j ACCEPT
</code></pre>

<p>如果没有该规则的话加入该规则后重启iptables就可以了。</p>
]]></content>
        </item>
        
        <item>
            <title>2015年6月28日扫描可用双拼域名</title>
            <link>https://qxzzf.com/posts/2015%E5%B9%B46%E6%9C%8828%E6%97%A5%E6%89%AB%E6%8F%8F%E5%8F%AF%E7%94%A8%E5%8F%8C%E6%8B%BC%E5%9F%9F%E5%90%8D/</link>
            <pubDate>Sun, 28 Jun 2015 21:01:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/2015%E5%B9%B46%E6%9C%8828%E6%97%A5%E6%89%AB%E6%8F%8F%E5%8F%AF%E7%94%A8%E5%8F%8C%E6%8B%BC%E5%9F%9F%E5%90%8D/</guid>
            <description>前几天分享了跑未被注册双拼域名的代码，这个我自己跑了大概三天左右跑出了结果，也一起分享出来吧。
到现在还没有被注册的双拼域名果然都不太能用，不过这些里面能创造出一个有意义的也说不定。
changnue.com chaochuai.com chengchuai.com chengzhuai.com chongchuai.com chuaiceng.com chuaichan.com chuaichui.com chuaien.com chuaiga.com chuaiken.com chuailun.com chuaimie.com chuaisen.com chuaiyo.com chuanchuai.com chuanzhuai.com chuangnue.com chuinue.com chuipie.com chunzhuai.com chuoshuan.com couchuai.com cuanbin.com cuannue.com cuanpie.com cuanqia.com cunzhuai.com danchuai.com danzhuai.com diaochuai.com dienue.com dingnue.com diuchuai.com diunue.com diuzhuai.com dongchuai.com douchuai.com duanchuai.com duanzhuai.com dunnue.com dunzhuai.com fochuai.com founue.com gacuan.com gazhuai.com gannue.com gangchuai.com gaochuai.com genchuai.com gengchuai.com gengnue.com gongchuai.com guachuai.com guaichuai.com guainue.com guanchuai.com guannue.com guangchuai.com guangnue.com guangzhuai.com guichuai.com gunchuai.com gunnue.com gunzhuai.com hangchuai.com hangnue.com hangzhuai.com heichuai.</description>
            <content type="html"><![CDATA[<p>前几天分享了跑未被注册双拼域名的代码，这个我自己跑了大概三天左右跑出了结果，也一起分享出来吧。</p>

<p>到现在还没有被注册的双拼域名果然都不太能用，不过这些里面能创造出一个有意义的也说不定。</p>

<pre><code>changnue.com
chaochuai.com
chengchuai.com
chengzhuai.com
chongchuai.com
chuaiceng.com
chuaichan.com
chuaichui.com
chuaien.com
chuaiga.com
chuaiken.com
chuailun.com
chuaimie.com
chuaisen.com
chuaiyo.com
chuanchuai.com
chuanzhuai.com
chuangnue.com
chuinue.com
chuipie.com
chunzhuai.com
chuoshuan.com
couchuai.com
cuanbin.com
cuannue.com
cuanpie.com
cuanqia.com
cunzhuai.com
danchuai.com
danzhuai.com
diaochuai.com
dienue.com
dingnue.com
diuchuai.com
diunue.com
diuzhuai.com
dongchuai.com
douchuai.com
duanchuai.com
duanzhuai.com
dunnue.com
dunzhuai.com
fochuai.com
founue.com
gacuan.com
gazhuai.com
gannue.com
gangchuai.com
gaochuai.com
genchuai.com
gengchuai.com
gengnue.com
gongchuai.com
guachuai.com
guaichuai.com
guainue.com
guanchuai.com
guannue.com
guangchuai.com
guangnue.com
guangzhuai.com
guichuai.com
gunchuai.com
gunnue.com
gunzhuai.com
hangchuai.com
hangnue.com
hangzhuai.com
heichuai.com
hengchuai.com
hengzhuai.com
hongzhuai.com
houchuai.com
huainue.com
huaipie.com
huanchuai.com
huanzhuai.com
huanglia.com
huangnue.com
huangpie.com
huangzhuai.com
hunzhuai.com
huozhuai.com
jianchuai.com
jianzhuai.com
jiangnue.com
jiangpie.com
jiaonue.com
jingnue.com
jingzhuai.com
jiongchuai.com
jiongnue.com
jiongpie.com
jiongreng.com
jiongshuan.com
jiongzhuai.com
juannue.com
juanzhuai.com
juechuai.com
junchuai.com
junnue.com
kachuai.com
kangzhuai.com
kenchuai.com
kennue.com
kenzhuai.com
kengchuai.com
kengnue.com
kengreng.com
kengshuan.com
kongchuai.com
konglia.com
kouchuai.com
kouzhuai.com
kuachuai.com
kuanue.com
kuanchuai.com
kuannue.com
kuanshuan.com
kuanzhuai.com
kuichuai.com
kuilia.com
kuinue.com
kuizhuai.com
kunchuai.com
kuochuai.com
kuolia.com
kuonue.com
kuozhuai.com
leichuai.com
lengchuai.com
lenglia.com
liachuai.com
liadiao.com
liahuai.com
lialeng.com
lianue.com
liazhuai.com
lianchuai.com
liangchuai.com
liaochuai.com
liaonue.com
liaozhuai.com
liechuai.com
liezhuai.com
liuchuai.com
luanchuai.com
luanlia.com
luechuai.com
lunchuai.com
lunzhuai.com
luozhuai.com
mangchuai.com
mangnue.com
mangzhuai.com
mechuai.com
mecuan.com
mezhuai.com
menchuai.com
mianzhuai.com
miechuai.com
mieshuan.com
miezhuai.com
minchuai.com
miuchuai.com
miushuai.com
miuzhuai.com
mouchuai.com
mouzhuai.com
naichuai.com
nanzhuai.com
nangdiu.com
nangheng.com
nanghuang.com
nanglia.com
nangniang.com
nangnin.com
nangnuan.com
nangreng.com
nangshua.com
nangshuai.com
nangshuan.com
nangshun.com
nangweng.com
nangza.com
nangzhua.com
nangzhuai.com
nangzhun.com
naochuai.com
naozhuai.com
nechuai.com
necuan.com
neichuai.com
neinue.com
nenchuai.com
nenzhuai.com
nengchuai.com
nengzhuai.com
nianchuai.com
niannue.com
nianzhuai.com
niangcuan.com
niangdiu.com
niangmie.com
niangnue.com
niangpie.com
niangran.com
niangreng.com
niangzhuai.com
niaochuai.com
niaonue.com
niechuai.com
nienue.com
nieshuan.com
ninchuai.com
nincuan.com
ningchuai.com
ningcuan.com
ningzhuai.com
nongchuai.com
nongnue.com
nongzhuai.com
nuanchuai.com
nuanzhuai.com
nuebeng.com
nuebiao.com
nuebin.com
nuecang.com
nueceng.com
nuechai.com
nuechao.com
nuechen.com
nuechuai.com
nuechuan.com
nuechuang.com
nuechui.com
nuecong.com
nuecuan.com
nuecui.com
nuecuo.com
nuedang.com
nuedeng.com
nuedie.com
nueding.com
nuediu.com
nuedong.com
nueduan.com
nuedui.com
nuedun.com
nuegai.com
nuegeng.com
nueguan.com
nueguang.com
nuegun.com
nuehang.com
nueheng.com
nuehong.com
nuejiang.com
nuejiong.com
nuejun.com
nuekong.com
nuekuai.com
nuekuo.com
nuelai.com
nueliang.com
nueliu.com
nuelou.com
nuemang.com
nuemian.com
nuemiao.com
nuemie.com
nuemou.com
nuenang.com
nuenei.com
nueneng.com
nueniang.com
nuenin.com
nuening.com
nuenong.com
nuepang.com
nuepen.com
nuepeng.com
nuepie.com
nueqia.com
nueqiang.com
nueqiao.com
nueqiong.com
nueran.com
nuerang.com
nuerao.com
nuereng.com
nueruan.com
nuerui.com
nuerun.com
nueruo.com
nuesang.com
nueseng.com
nueshai.com
nueshan.com
nueshao.com
nuesheng.com
nueshua.com
nueshuai.com
nueshuan.com
nueshun.com
nueshuo.com
nuesong.com
nuesuan.com
nuetang.com
nuetiao.com
nuetie.com
nuetuo.com
nueweng.com
nuexuan.com
nueyong.com
nuezeng.com
nuezhong.com
nuezhua.com
nuezhuai.com
nuezhuan.com
nuezhun.com
nuezhuo.com
nuezuan.com
nuochuai.com
nuozhuai.com
pangchuai.com
pangcuan.com
paochuai.com
peichuai.com
penchuai.com
pencuan.com
pengchuai.com
pengnue.com
pengzhuai.com
pianchuai.com
pianreng.com
pianzhuai.com
piaonue.com
pieceng.com
piechuai.com
pienue.com
pierao.com
piezhua.com
piezhuai.com
pingchuai.com
qiangchuai.com
qiaochuai.com
qiaonue.com
qiaozhuai.com
qienue.com
qingchuai.com
qiongchuai.com
qiongnue.com
quanchuai.com
quechuai.com
quezhuai.com
rangchuai.com
rangnang.com
rangnue.com
rangshuan.com
rangzhuai.com
raochuai.com
renchuai.com
rengchuai.com
rengcuan.com
rengnue.com
rouchuai.com
ruanchuai.com
ruannue.com
ruanpie.com
ruanzhuai.com
ruichuai.com
ruinue.com
ruizhuai.com
runzhuai.com
ruochuai.com
ruonue.com
sachuai.com
sanchuai.com
sanzhuai.com
sangchuai.com
sanglia.com
sangnue.com
sangshuan.com
sangzhuai.com
saochuai.com
senchuai.com
senzhuai.com
sengchuai.com
sengcuan.com
sengcuo.com
senglia.com
sengnue.com
sengqiong.com
sengreng.com
sengshuai.com
sengshuan.com
sengtun.com
sengzei.com
sengzhua.com
sengzhuai.com
shachuai.com
shazhuai.com
shaichuai.com
shainue.com
shaipie.com
shaiseng.com
shanchuai.com
shanzhuai.com
shaochuai.com
shaonue.com
shengchuai.com
shuanue.com
shuapie.com
shuaichuai.com
shuainang.com
shuainue.com
shuaireng.com
shuanceng.com
shuancuan.com
shuanken.com
shuankuang.com
shuanleng.com
shuanmie.com
shuanmou.com
shuannang.com
shuannue.com
shuanrang.com
shuanreng.com
shuansuan.com
shuansun.com
shuantun.com
shuanweng.com
shuanzen.com
shuanzhang.com
shuanzhua.com
shuanzhuai.com
shuangzen.com
shuangzhuai.com
shuichuai.com
shuinue.com
shunchuai.com
shunnue.com
songzhuai.com
suanchuai.com
suannue.com
suanzhuai.com
suichuai.com
suinue.com
suizhuai.com
sunchuai.com
sunzhuai.com
suochuai.com
tanchuai.com
tanzhuai.com
tangchuai.com
tangnue.com
tangzhuai.com
tengchuai.com
tengnue.com
tengzhuai.com
tiaochuai.com
tiaonue.com
tiaozhuai.com
tiechuai.com
tiezhuai.com
tingnue.com
tongnue.com
tuinue.com
tunchuai.com
tunnue.com
tunzhuai.com
tuochuai.com
wengchuai.com
wenglia.com
wengnue.com
wengpie.com
wengzhuai.com
xingchuai.com
xingzhuai.com
xiongnue.com
xuannue.com
yanchuai.com
yanzhuai.com
yozhuai.com
yongzhuai.com
zachuai.com
zaichuai.com
zanchuai.com
zangzhuai.com
zeichuai.com
zeinin.com
zenchuai.com
zenzhuai.com
zengchuai.com
zengnue.com
zengshuan.com
zengzhuai.com
zhachuai.com
zhazhuai.com
zhainue.com
zhanzhuai.com
zhangchuai.com
zhangcuan.com
zhangpie.com
zhangzhuai.com
zhechuai.com
zhengnue.com
zhouchuai.com
zhouzhuai.com
zhuachuai.com
zhuanue.com
zhuaiang.com
zhuaiben.com
zhuaibeng.com
zhuaibie.com
zhuaibin.com
zhuaiceng.com
zhuaichai.com
zhuaichan.com
zhuaichen.com
zhuaichui.com
zhuaichun.com
zhuaicong.com
zhuaicou.com
zhuaicuan.com
zhuaicuo.com
zhuaiduan.com
zhuaien.com
zhuaiga.com
zhuaigan.com
zhuaijiong.com
zhuaiken.com
zhuaikeng.com
zhuaikui.com
zhuaikun.com
zhuaileng.com
zhuailia.com
zhuailuan.com
zhuailue.com
zhuailun.com
zhuaimie.com
zhuaimiu.com
zhuaimou.com
zhuainang.com
zhuainei.com
zhuainen.com
zhuaineng.com
zhuainie.com
zhuainin.com
zhuaining.com
zhuainuan.com
zhuaipei.com
zhuaipie.com
zhuaiqiao.com
zhuaiqin.com
zhuaiqiong.com
zhuairan.com
zhuairang.com
zhuairao.com
zhuaireng.com
zhuairuo.com
zhuaisang.com
zhuaisen.com
zhuaishai.com
zhuaishuan.com
zhuaishuang.com
zhuaishun.com
zhuaiteng.com
zhuaiwai.com
zhuaizang.com
zhuaizao.com
zhuaizei.com
zhuaizen.com
zhuaizeng.com
zhuaizha.com
zhuaizheng.com
zhuaizhong.com
zhuaizhou.com
zhuaizhua.com
zhuaizhui.com
zhuaizhun.com
zhuanchuai.com
zhuangchuai.com
zhuangnue.com
zhuichuai.com
zhuicuan.com
zhunchuai.com
zhunnue.com
zhuochuai.com
zhuozhuai.com
zongchuai.com
zongzhuai.com
zouzhuai.com
zuanchuai.com
zuanzhuai.com
zunchuai.com
zuochuai.com
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>遍历二字汉字组合拼音域名是否可注册</title>
            <link>https://qxzzf.com/posts/%E9%81%8D%E5%8E%86%E4%BA%8C%E5%AD%97%E6%B1%89%E5%AD%97%E7%BB%84%E5%90%88%E6%8B%BC%E9%9F%B3%E5%9F%9F%E5%90%8D%E6%98%AF%E5%90%A6%E5%8F%AF%E6%B3%A8%E5%86%8C/</link>
            <pubDate>Thu, 25 Jun 2015 21:35:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E9%81%8D%E5%8E%86%E4%BA%8C%E5%AD%97%E6%B1%89%E5%AD%97%E7%BB%84%E5%90%88%E6%8B%BC%E9%9F%B3%E5%9F%9F%E5%90%8D%E6%98%AF%E5%90%A6%E5%8F%AF%E6%B3%A8%E5%86%8C/</guid>
            <description>在知乎上搜索域名相关问题的时候发现“街旁”这个名字便是遍历所有双字拼音可注册的域名后被赋予其意义的。我觉得这是个很靠谱的找域名的方法于是自己写了段代码来实现该功能。
&amp;lt;?php set_time_limit(0); $interval = 1; //轮询时休息秒数，频率太快会被封 $pinyin = [&amp;quot;a&amp;quot;,&amp;quot;ai&amp;quot;,&amp;quot;an&amp;quot;,&amp;quot;ang&amp;quot;,&amp;quot;ao&amp;quot;,&amp;quot;ba&amp;quot;,&amp;quot;bai&amp;quot;,&amp;quot;ban&amp;quot;,&amp;quot;bang&amp;quot;,&amp;quot;bao&amp;quot;,&amp;quot;bei&amp;quot;,&amp;quot;ben&amp;quot;,&amp;quot;beng&amp;quot;,&amp;quot;bi&amp;quot;,&amp;quot;bian&amp;quot;,&amp;quot;biao&amp;quot;,&amp;quot;bie&amp;quot;,&amp;quot;bin&amp;quot;,&amp;quot;bing&amp;quot;,&amp;quot;bo&amp;quot;,&amp;quot;bu&amp;quot;,&amp;quot;ca&amp;quot;,&amp;quot;cai&amp;quot;,&amp;quot;can&amp;quot;,&amp;quot;cang&amp;quot;,&amp;quot;cao&amp;quot;,&amp;quot;ce&amp;quot;,&amp;quot;ceng&amp;quot;,&amp;quot;cha&amp;quot;,&amp;quot;chai&amp;quot;,&amp;quot;chan&amp;quot;,&amp;quot;chang&amp;quot;,&amp;quot;chao&amp;quot;,&amp;quot;che&amp;quot;,&amp;quot;chen&amp;quot;,&amp;quot;cheng&amp;quot;,&amp;quot;chi&amp;quot;,&amp;quot;chong&amp;quot;,&amp;quot;chou&amp;quot;,&amp;quot;chu&amp;quot;,&amp;quot;chuai&amp;quot;,&amp;quot;chuan&amp;quot;,&amp;quot;chuang&amp;quot;,&amp;quot;chui&amp;quot;,&amp;quot;chun&amp;quot;,&amp;quot;chuo&amp;quot;,&amp;quot;ci&amp;quot;,&amp;quot;cong&amp;quot;,&amp;quot;cou&amp;quot;,&amp;quot;cu&amp;quot;,&amp;quot;cuan&amp;quot;,&amp;quot;cui&amp;quot;,&amp;quot;cun&amp;quot;,&amp;quot;cuo&amp;quot;,&amp;quot;da&amp;quot;,&amp;quot;dai&amp;quot;,&amp;quot;dan&amp;quot;,&amp;quot;dang&amp;quot;,&amp;quot;dao&amp;quot;,&amp;quot;de&amp;quot;,&amp;quot;deng&amp;quot;,&amp;quot;di&amp;quot;,&amp;quot;dian&amp;quot;,&amp;quot;diao&amp;quot;,&amp;quot;die&amp;quot;,&amp;quot;ding&amp;quot;,&amp;quot;diu&amp;quot;,&amp;quot;dong&amp;quot;,&amp;quot;dou&amp;quot;,&amp;quot;du&amp;quot;,&amp;quot;duan&amp;quot;,&amp;quot;dui&amp;quot;,&amp;quot;dun&amp;quot;,&amp;quot;duo&amp;quot;,&amp;quot;e&amp;quot;,&amp;quot;en&amp;quot;,&amp;quot;er&amp;quot;,&amp;quot;fa&amp;quot;,&amp;quot;fan&amp;quot;,&amp;quot;fang&amp;quot;,&amp;quot;fei&amp;quot;,&amp;quot;fen&amp;quot;,&amp;quot;feng&amp;quot;,&amp;quot;fo&amp;quot;,&amp;quot;fou&amp;quot;,&amp;quot;fu&amp;quot;,&amp;quot;ga&amp;quot;,&amp;quot;gai&amp;quot;,&amp;quot;gan&amp;quot;,&amp;quot;gang&amp;quot;,&amp;quot;gao&amp;quot;,&amp;quot;ge&amp;quot;,&amp;quot;gei&amp;quot;,&amp;quot;gen&amp;quot;,&amp;quot;geng&amp;quot;,&amp;quot;gong&amp;quot;,&amp;quot;gou&amp;quot;,&amp;quot;gu&amp;quot;,&amp;quot;gua&amp;quot;,&amp;quot;guai&amp;quot;,&amp;quot;guan&amp;quot;,&amp;quot;guang&amp;quot;,&amp;quot;gui&amp;quot;,&amp;quot;gun&amp;quot;,&amp;quot;guo&amp;quot;,&amp;quot;ha&amp;quot;,&amp;quot;hai&amp;quot;,&amp;quot;han&amp;quot;,&amp;quot;hang&amp;quot;,&amp;quot;hao&amp;quot;,&amp;quot;he&amp;quot;,&amp;quot;hei&amp;quot;,&amp;quot;hen&amp;quot;,&amp;quot;heng&amp;quot;,&amp;quot;hong&amp;quot;,&amp;quot;hou&amp;quot;,&amp;quot;hu&amp;quot;,&amp;quot;hua&amp;quot;,&amp;quot;huai&amp;quot;,&amp;quot;huan&amp;quot;,&amp;quot;huang&amp;quot;,&amp;quot;hui&amp;quot;,&amp;quot;hun&amp;quot;,&amp;quot;huo&amp;quot;,&amp;quot;ji&amp;quot;,&amp;quot;jia&amp;quot;,&amp;quot;jian&amp;quot;,&amp;quot;jiang&amp;quot;,&amp;quot;jiao&amp;quot;,&amp;quot;jie&amp;quot;,&amp;quot;jin&amp;quot;,&amp;quot;jing&amp;quot;,&amp;quot;jiong&amp;quot;,&amp;quot;jiu&amp;quot;,&amp;quot;ju&amp;quot;,&amp;quot;juan&amp;quot;,&amp;quot;jue&amp;quot;,&amp;quot;jun&amp;quot;,&amp;quot;ka&amp;quot;,&amp;quot;kai&amp;quot;,&amp;quot;kan&amp;quot;,&amp;quot;kang&amp;quot;,&amp;quot;kao&amp;quot;,&amp;quot;ke&amp;quot;,&amp;quot;ken&amp;quot;,&amp;quot;keng&amp;quot;,&amp;quot;kong&amp;quot;,&amp;quot;kou&amp;quot;,&amp;quot;ku&amp;quot;,&amp;quot;kua&amp;quot;,&amp;quot;kuai&amp;quot;,&amp;quot;kuan&amp;quot;,&amp;quot;kuang&amp;quot;,&amp;quot;kui&amp;quot;,&amp;quot;kun&amp;quot;,&amp;quot;kuo&amp;quot;,&amp;quot;la&amp;quot;,&amp;quot;lai&amp;quot;,&amp;quot;lan&amp;quot;,&amp;quot;lang&amp;quot;,&amp;quot;lao&amp;quot;,&amp;quot;le&amp;quot;,&amp;quot;lei&amp;quot;,&amp;quot;leng&amp;quot;,&amp;quot;li&amp;quot;,&amp;quot;lia&amp;quot;,&amp;quot;lian&amp;quot;,&amp;quot;liang&amp;quot;,&amp;quot;liao&amp;quot;,&amp;quot;lie&amp;quot;,&amp;quot;lin&amp;quot;,&amp;quot;ling&amp;quot;,&amp;quot;liu&amp;quot;,&amp;quot;long&amp;quot;,&amp;quot;lou&amp;quot;,&amp;quot;lu&amp;quot;,&amp;quot;lv&amp;quot;,&amp;quot;luan&amp;quot;,&amp;quot;lue&amp;quot;,&amp;quot;lun&amp;quot;,&amp;quot;luo&amp;quot;,&amp;quot;ma&amp;quot;,&amp;quot;mai&amp;quot;,&amp;quot;man&amp;quot;,&amp;quot;mang&amp;quot;,&amp;quot;mao&amp;quot;,&amp;quot;me&amp;quot;,&amp;quot;mei&amp;quot;,&amp;quot;men&amp;quot;,&amp;quot;meng&amp;quot;,&amp;quot;mi&amp;quot;,&amp;quot;mian&amp;quot;,&amp;quot;miao&amp;quot;,&amp;quot;mie&amp;quot;,&amp;quot;min&amp;quot;,&amp;quot;ming&amp;quot;,&amp;quot;miu&amp;quot;,&amp;quot;mo&amp;quot;,&amp;quot;mou&amp;quot;,&amp;quot;mu&amp;quot;,&amp;quot;na&amp;quot;,&amp;quot;nai&amp;quot;,&amp;quot;nan&amp;quot;,&amp;quot;nang&amp;quot;,&amp;quot;nao&amp;quot;,&amp;quot;ne&amp;quot;,&amp;quot;nei&amp;quot;,&amp;quot;nen&amp;quot;,&amp;quot;neng&amp;quot;,&amp;quot;ni&amp;quot;,&amp;quot;nian&amp;quot;,&amp;quot;niang&amp;quot;,&amp;quot;niao&amp;quot;,&amp;quot;nie&amp;quot;,&amp;quot;nin&amp;quot;,&amp;quot;ning&amp;quot;,&amp;quot;niu&amp;quot;,&amp;quot;nong&amp;quot;,&amp;quot;nu&amp;quot;,&amp;quot;nv&amp;quot;,&amp;quot;nuan&amp;quot;,&amp;quot;nue&amp;quot;,&amp;quot;nuo&amp;quot;,&amp;quot;o&amp;quot;,&amp;quot;ou&amp;quot;,&amp;quot;pa&amp;quot;,&amp;quot;pai&amp;quot;,&amp;quot;pan&amp;quot;,&amp;quot;pang&amp;quot;,&amp;quot;pao&amp;quot;,&amp;quot;pei&amp;quot;,&amp;quot;pen&amp;quot;,&amp;quot;peng&amp;quot;,&amp;quot;pi&amp;quot;,&amp;quot;pian&amp;quot;,&amp;quot;piao&amp;quot;,&amp;quot;pie&amp;quot;,&amp;quot;pin&amp;quot;,&amp;quot;ping&amp;quot;,&amp;quot;po&amp;quot;,&amp;quot;pu&amp;quot;,&amp;quot;qi&amp;quot;,&amp;quot;qia&amp;quot;,&amp;quot;qian&amp;quot;,&amp;quot;qiang&amp;quot;,&amp;quot;qiao&amp;quot;,&amp;quot;qie&amp;quot;,&amp;quot;qin&amp;quot;,&amp;quot;qing&amp;quot;,&amp;quot;qiong&amp;quot;,&amp;quot;qiu&amp;quot;,&amp;quot;qu&amp;quot;,&amp;quot;quan&amp;quot;,&amp;quot;que&amp;quot;,&amp;quot;qun&amp;quot;,&amp;quot;ran&amp;quot;,&amp;quot;rang&amp;quot;,&amp;quot;rao&amp;quot;,&amp;quot;re&amp;quot;,&amp;quot;ren&amp;quot;,&amp;quot;reng&amp;quot;,&amp;quot;ri&amp;quot;,&amp;quot;rong&amp;quot;,&amp;quot;rou&amp;quot;,&amp;quot;ru&amp;quot;,&amp;quot;ruan&amp;quot;,&amp;quot;rui&amp;quot;,&amp;quot;run&amp;quot;,&amp;quot;ruo&amp;quot;,&amp;quot;sa&amp;quot;,&amp;quot;sai&amp;quot;,&amp;quot;san&amp;quot;,&amp;quot;sang&amp;quot;,&amp;quot;sao&amp;quot;,&amp;quot;se&amp;quot;,&amp;quot;sen&amp;quot;,&amp;quot;seng&amp;quot;,&amp;quot;sha&amp;quot;,&amp;quot;shai&amp;quot;,&amp;quot;shan&amp;quot;,&amp;quot;shang&amp;quot;,&amp;quot;shao&amp;quot;,&amp;quot;she&amp;quot;,&amp;quot;shen&amp;quot;,&amp;quot;sheng&amp;quot;,&amp;quot;shi&amp;quot;,&amp;quot;shou&amp;quot;,&amp;quot;shu&amp;quot;,&amp;quot;shua&amp;quot;,&amp;quot;shuai&amp;quot;,&amp;quot;shuan&amp;quot;,&amp;quot;shuang&amp;quot;,&amp;quot;shui&amp;quot;,&amp;quot;shun&amp;quot;,&amp;quot;shuo&amp;quot;,&amp;quot;si&amp;quot;,&amp;quot;song&amp;quot;,&amp;quot;sou&amp;quot;,&amp;quot;su&amp;quot;,&amp;quot;suan&amp;quot;,&amp;quot;sui&amp;quot;,&amp;quot;sun&amp;quot;,&amp;quot;suo&amp;quot;,&amp;quot;ta&amp;quot;,&amp;quot;tai&amp;quot;,&amp;quot;tan&amp;quot;,&amp;quot;tang&amp;quot;,&amp;quot;tao&amp;quot;,&amp;quot;te&amp;quot;,&amp;quot;teng&amp;quot;,&amp;quot;ti&amp;quot;,&amp;quot;tian&amp;quot;,&amp;quot;tiao&amp;quot;,&amp;quot;tie&amp;quot;,&amp;quot;ting&amp;quot;,&amp;quot;tong&amp;quot;,&amp;quot;tou&amp;quot;,&amp;quot;tu&amp;quot;,&amp;quot;tuan&amp;quot;,&amp;quot;tui&amp;quot;,&amp;quot;tun&amp;quot;,&amp;quot;tuo&amp;quot;,&amp;quot;wa&amp;quot;,&amp;quot;wai&amp;quot;,&amp;quot;wan&amp;quot;,&amp;quot;wang&amp;quot;,&amp;quot;wei&amp;quot;,&amp;quot;wen&amp;quot;,&amp;quot;weng&amp;quot;,&amp;quot;wo&amp;quot;,&amp;quot;wu&amp;quot;,&amp;quot;xi&amp;quot;,&amp;quot;xia&amp;quot;,&amp;quot;xian&amp;quot;,&amp;quot;xiang&amp;quot;,&amp;quot;xiao&amp;quot;,&amp;quot;xie&amp;quot;,&amp;quot;xin&amp;quot;,&amp;quot;xing&amp;quot;,&amp;quot;xiong&amp;quot;,&amp;quot;xiu&amp;quot;,&amp;quot;xu&amp;quot;,&amp;quot;xuan&amp;quot;,&amp;quot;xue&amp;quot;,&amp;quot;xun&amp;quot;,&amp;quot;ya&amp;quot;,&amp;quot;yan&amp;quot;,&amp;quot;yang&amp;quot;,&amp;quot;yao&amp;quot;,&amp;quot;ye&amp;quot;,&amp;quot;yi&amp;quot;,&amp;quot;yin&amp;quot;,&amp;quot;ying&amp;quot;,&amp;quot;yo&amp;quot;,&amp;quot;yong&amp;quot;,&amp;quot;you&amp;quot;,&amp;quot;yu&amp;quot;,&amp;quot;yuan&amp;quot;,&amp;quot;yue&amp;quot;,&amp;quot;yun&amp;quot;,&amp;quot;za&amp;quot;,&amp;quot;zai&amp;quot;,&amp;quot;zan&amp;quot;,&amp;quot;zang&amp;quot;,&amp;quot;zao&amp;quot;,&amp;quot;ze&amp;quot;,&amp;quot;zei&amp;quot;,&amp;quot;zen&amp;quot;,&amp;quot;zeng&amp;quot;,&amp;quot;zha&amp;quot;,&amp;quot;zhai&amp;quot;,&amp;quot;zhan&amp;quot;,&amp;quot;zhang&amp;quot;,&amp;quot;zhao&amp;quot;,&amp;quot;zhe&amp;quot;,&amp;quot;zhen&amp;quot;,&amp;quot;zheng&amp;quot;,&amp;quot;zhi&amp;quot;,&amp;quot;zhong&amp;quot;,&amp;quot;zhou&amp;quot;,&amp;quot;zhu&amp;quot;,&amp;quot;zhua&amp;quot;,&amp;quot;zhuai&amp;quot;,&amp;quot;zhuan&amp;quot;,&amp;quot;zhuang&amp;quot;,&amp;quot;zhui&amp;quot;,&amp;quot;zhun&amp;quot;,&amp;quot;zhuo&amp;quot;,&amp;quot;zi&amp;quot;,&amp;quot;zong&amp;quot;,&amp;quot;zou&amp;quot;,&amp;quot;zu&amp;quot;,&amp;quot;zuan&amp;quot;,&amp;quot;zui&amp;quot;,&amp;quot;zun&amp;quot;,&amp;quot;zuo&amp;quot;]; $suffix = [&#39;com&#39;, &#39;me&#39;, &#39;cn&#39;, &#39;net&#39;, &#39;org&#39;, &#39;io&#39;, &#39;cc&#39;, &#39;co&#39;, &#39;xyz&#39;]; $avail = []; foreach ($pinyin as $one) { foreach ($pinyin as $two) { $domain = $one . $two . &#39;.com&#39;; if (isAvail($domain, &#39;cnz&#39;)) { echo PHP_EOL . $domain . PHP_EOL; $avail[] = $domain; } else { echo &#39;x&#39;; } sleep($interval); } } function isAvail($domain, $type = &#39;net&#39;) { if ($type == &#39;net&#39;) { return isAvailNet($domain); } elseif ($type = &#39;cnz&#39;) { return isAvailCnz($domain); } } //通过万网接口查询是否可用 function isAvailNet($domain) { $api = &#39;http://panda.</description>
            <content type="html"><![CDATA[<p>在知乎上搜索域名相关问题的时候发现“街旁”这个名字便是遍历所有双字拼音可注册的域名后被赋予其意义的。我觉得这是个很靠谱的找域名的方法于是自己写了段代码来实现该功能。</p>

<pre><code class="language-php">&lt;?php
set_time_limit(0);

$interval = 1; //轮询时休息秒数，频率太快会被封
    
$pinyin = [&quot;a&quot;,&quot;ai&quot;,&quot;an&quot;,&quot;ang&quot;,&quot;ao&quot;,&quot;ba&quot;,&quot;bai&quot;,&quot;ban&quot;,&quot;bang&quot;,&quot;bao&quot;,&quot;bei&quot;,&quot;ben&quot;,&quot;beng&quot;,&quot;bi&quot;,&quot;bian&quot;,&quot;biao&quot;,&quot;bie&quot;,&quot;bin&quot;,&quot;bing&quot;,&quot;bo&quot;,&quot;bu&quot;,&quot;ca&quot;,&quot;cai&quot;,&quot;can&quot;,&quot;cang&quot;,&quot;cao&quot;,&quot;ce&quot;,&quot;ceng&quot;,&quot;cha&quot;,&quot;chai&quot;,&quot;chan&quot;,&quot;chang&quot;,&quot;chao&quot;,&quot;che&quot;,&quot;chen&quot;,&quot;cheng&quot;,&quot;chi&quot;,&quot;chong&quot;,&quot;chou&quot;,&quot;chu&quot;,&quot;chuai&quot;,&quot;chuan&quot;,&quot;chuang&quot;,&quot;chui&quot;,&quot;chun&quot;,&quot;chuo&quot;,&quot;ci&quot;,&quot;cong&quot;,&quot;cou&quot;,&quot;cu&quot;,&quot;cuan&quot;,&quot;cui&quot;,&quot;cun&quot;,&quot;cuo&quot;,&quot;da&quot;,&quot;dai&quot;,&quot;dan&quot;,&quot;dang&quot;,&quot;dao&quot;,&quot;de&quot;,&quot;deng&quot;,&quot;di&quot;,&quot;dian&quot;,&quot;diao&quot;,&quot;die&quot;,&quot;ding&quot;,&quot;diu&quot;,&quot;dong&quot;,&quot;dou&quot;,&quot;du&quot;,&quot;duan&quot;,&quot;dui&quot;,&quot;dun&quot;,&quot;duo&quot;,&quot;e&quot;,&quot;en&quot;,&quot;er&quot;,&quot;fa&quot;,&quot;fan&quot;,&quot;fang&quot;,&quot;fei&quot;,&quot;fen&quot;,&quot;feng&quot;,&quot;fo&quot;,&quot;fou&quot;,&quot;fu&quot;,&quot;ga&quot;,&quot;gai&quot;,&quot;gan&quot;,&quot;gang&quot;,&quot;gao&quot;,&quot;ge&quot;,&quot;gei&quot;,&quot;gen&quot;,&quot;geng&quot;,&quot;gong&quot;,&quot;gou&quot;,&quot;gu&quot;,&quot;gua&quot;,&quot;guai&quot;,&quot;guan&quot;,&quot;guang&quot;,&quot;gui&quot;,&quot;gun&quot;,&quot;guo&quot;,&quot;ha&quot;,&quot;hai&quot;,&quot;han&quot;,&quot;hang&quot;,&quot;hao&quot;,&quot;he&quot;,&quot;hei&quot;,&quot;hen&quot;,&quot;heng&quot;,&quot;hong&quot;,&quot;hou&quot;,&quot;hu&quot;,&quot;hua&quot;,&quot;huai&quot;,&quot;huan&quot;,&quot;huang&quot;,&quot;hui&quot;,&quot;hun&quot;,&quot;huo&quot;,&quot;ji&quot;,&quot;jia&quot;,&quot;jian&quot;,&quot;jiang&quot;,&quot;jiao&quot;,&quot;jie&quot;,&quot;jin&quot;,&quot;jing&quot;,&quot;jiong&quot;,&quot;jiu&quot;,&quot;ju&quot;,&quot;juan&quot;,&quot;jue&quot;,&quot;jun&quot;,&quot;ka&quot;,&quot;kai&quot;,&quot;kan&quot;,&quot;kang&quot;,&quot;kao&quot;,&quot;ke&quot;,&quot;ken&quot;,&quot;keng&quot;,&quot;kong&quot;,&quot;kou&quot;,&quot;ku&quot;,&quot;kua&quot;,&quot;kuai&quot;,&quot;kuan&quot;,&quot;kuang&quot;,&quot;kui&quot;,&quot;kun&quot;,&quot;kuo&quot;,&quot;la&quot;,&quot;lai&quot;,&quot;lan&quot;,&quot;lang&quot;,&quot;lao&quot;,&quot;le&quot;,&quot;lei&quot;,&quot;leng&quot;,&quot;li&quot;,&quot;lia&quot;,&quot;lian&quot;,&quot;liang&quot;,&quot;liao&quot;,&quot;lie&quot;,&quot;lin&quot;,&quot;ling&quot;,&quot;liu&quot;,&quot;long&quot;,&quot;lou&quot;,&quot;lu&quot;,&quot;lv&quot;,&quot;luan&quot;,&quot;lue&quot;,&quot;lun&quot;,&quot;luo&quot;,&quot;ma&quot;,&quot;mai&quot;,&quot;man&quot;,&quot;mang&quot;,&quot;mao&quot;,&quot;me&quot;,&quot;mei&quot;,&quot;men&quot;,&quot;meng&quot;,&quot;mi&quot;,&quot;mian&quot;,&quot;miao&quot;,&quot;mie&quot;,&quot;min&quot;,&quot;ming&quot;,&quot;miu&quot;,&quot;mo&quot;,&quot;mou&quot;,&quot;mu&quot;,&quot;na&quot;,&quot;nai&quot;,&quot;nan&quot;,&quot;nang&quot;,&quot;nao&quot;,&quot;ne&quot;,&quot;nei&quot;,&quot;nen&quot;,&quot;neng&quot;,&quot;ni&quot;,&quot;nian&quot;,&quot;niang&quot;,&quot;niao&quot;,&quot;nie&quot;,&quot;nin&quot;,&quot;ning&quot;,&quot;niu&quot;,&quot;nong&quot;,&quot;nu&quot;,&quot;nv&quot;,&quot;nuan&quot;,&quot;nue&quot;,&quot;nuo&quot;,&quot;o&quot;,&quot;ou&quot;,&quot;pa&quot;,&quot;pai&quot;,&quot;pan&quot;,&quot;pang&quot;,&quot;pao&quot;,&quot;pei&quot;,&quot;pen&quot;,&quot;peng&quot;,&quot;pi&quot;,&quot;pian&quot;,&quot;piao&quot;,&quot;pie&quot;,&quot;pin&quot;,&quot;ping&quot;,&quot;po&quot;,&quot;pu&quot;,&quot;qi&quot;,&quot;qia&quot;,&quot;qian&quot;,&quot;qiang&quot;,&quot;qiao&quot;,&quot;qie&quot;,&quot;qin&quot;,&quot;qing&quot;,&quot;qiong&quot;,&quot;qiu&quot;,&quot;qu&quot;,&quot;quan&quot;,&quot;que&quot;,&quot;qun&quot;,&quot;ran&quot;,&quot;rang&quot;,&quot;rao&quot;,&quot;re&quot;,&quot;ren&quot;,&quot;reng&quot;,&quot;ri&quot;,&quot;rong&quot;,&quot;rou&quot;,&quot;ru&quot;,&quot;ruan&quot;,&quot;rui&quot;,&quot;run&quot;,&quot;ruo&quot;,&quot;sa&quot;,&quot;sai&quot;,&quot;san&quot;,&quot;sang&quot;,&quot;sao&quot;,&quot;se&quot;,&quot;sen&quot;,&quot;seng&quot;,&quot;sha&quot;,&quot;shai&quot;,&quot;shan&quot;,&quot;shang&quot;,&quot;shao&quot;,&quot;she&quot;,&quot;shen&quot;,&quot;sheng&quot;,&quot;shi&quot;,&quot;shou&quot;,&quot;shu&quot;,&quot;shua&quot;,&quot;shuai&quot;,&quot;shuan&quot;,&quot;shuang&quot;,&quot;shui&quot;,&quot;shun&quot;,&quot;shuo&quot;,&quot;si&quot;,&quot;song&quot;,&quot;sou&quot;,&quot;su&quot;,&quot;suan&quot;,&quot;sui&quot;,&quot;sun&quot;,&quot;suo&quot;,&quot;ta&quot;,&quot;tai&quot;,&quot;tan&quot;,&quot;tang&quot;,&quot;tao&quot;,&quot;te&quot;,&quot;teng&quot;,&quot;ti&quot;,&quot;tian&quot;,&quot;tiao&quot;,&quot;tie&quot;,&quot;ting&quot;,&quot;tong&quot;,&quot;tou&quot;,&quot;tu&quot;,&quot;tuan&quot;,&quot;tui&quot;,&quot;tun&quot;,&quot;tuo&quot;,&quot;wa&quot;,&quot;wai&quot;,&quot;wan&quot;,&quot;wang&quot;,&quot;wei&quot;,&quot;wen&quot;,&quot;weng&quot;,&quot;wo&quot;,&quot;wu&quot;,&quot;xi&quot;,&quot;xia&quot;,&quot;xian&quot;,&quot;xiang&quot;,&quot;xiao&quot;,&quot;xie&quot;,&quot;xin&quot;,&quot;xing&quot;,&quot;xiong&quot;,&quot;xiu&quot;,&quot;xu&quot;,&quot;xuan&quot;,&quot;xue&quot;,&quot;xun&quot;,&quot;ya&quot;,&quot;yan&quot;,&quot;yang&quot;,&quot;yao&quot;,&quot;ye&quot;,&quot;yi&quot;,&quot;yin&quot;,&quot;ying&quot;,&quot;yo&quot;,&quot;yong&quot;,&quot;you&quot;,&quot;yu&quot;,&quot;yuan&quot;,&quot;yue&quot;,&quot;yun&quot;,&quot;za&quot;,&quot;zai&quot;,&quot;zan&quot;,&quot;zang&quot;,&quot;zao&quot;,&quot;ze&quot;,&quot;zei&quot;,&quot;zen&quot;,&quot;zeng&quot;,&quot;zha&quot;,&quot;zhai&quot;,&quot;zhan&quot;,&quot;zhang&quot;,&quot;zhao&quot;,&quot;zhe&quot;,&quot;zhen&quot;,&quot;zheng&quot;,&quot;zhi&quot;,&quot;zhong&quot;,&quot;zhou&quot;,&quot;zhu&quot;,&quot;zhua&quot;,&quot;zhuai&quot;,&quot;zhuan&quot;,&quot;zhuang&quot;,&quot;zhui&quot;,&quot;zhun&quot;,&quot;zhuo&quot;,&quot;zi&quot;,&quot;zong&quot;,&quot;zou&quot;,&quot;zu&quot;,&quot;zuan&quot;,&quot;zui&quot;,&quot;zun&quot;,&quot;zuo&quot;];
    
$suffix = ['com', 'me', 'cn', 'net', 'org', 'io', 'cc', 'co', 'xyz'];
    
$avail = [];
foreach ($pinyin as $one) {
    foreach ($pinyin as $two) {
        $domain = $one . $two . '.com';
        if (isAvail($domain, 'cnz')) {
            echo PHP_EOL . $domain . PHP_EOL;
            $avail[] = $domain;
        } else {
            echo 'x';
        }
        sleep($interval);
    }
}
    
function isAvail($domain, $type = 'net') {
    if ($type == 'net') {
        return isAvailNet($domain);
    } elseif ($type = 'cnz') {
        return isAvailCnz($domain);
    }
}
    
//通过万网接口查询是否可用
function isAvailNet($domain) {
    $api = 'http://panda.www.net.cn/cgi-bin/check.cgi?area_domain=';
    $url = $api . $domain;
    $res = simplexml_load_string(file_get_contents($url));
    $code = substr((string) $res-&gt;original, 0, 3);
    if ($code == '210') {
        return true;
    } else {
        return false;
    }
}
    
//通过cnz接口查询是否可用
function isAvailCnz($domain) {
    $api = 'http://www.cnz.co/domain-registration/domain.php?action=caajax&amp;domain_name=';
    $url = $api . $domain;
    $res = json_decode(file_get_contents($url));
    if ($res-&gt;status == 'available') {
        return true;
    } else {
        return false;
    }
}
    
file_put_contents('E:\domain.json', json_encode($avail));
</code></pre>

<p>经过一些修改后，我把代码改成了可以跑任意自定义字符组合，任意字符出现次数的域名是否被注册：</p>

<pre><code class="language-php">&lt;?php
set_time_limit(0);

$pinyin = [&quot;a&quot;,&quot;ai&quot;,&quot;an&quot;,&quot;ang&quot;,&quot;ao&quot;,&quot;ba&quot;,&quot;bai&quot;,&quot;ban&quot;,&quot;bang&quot;,&quot;bao&quot;,&quot;bei&quot;,&quot;ben&quot;,&quot;beng&quot;,&quot;bi&quot;,&quot;bian&quot;,&quot;biao&quot;,&quot;bie&quot;,&quot;bin&quot;,&quot;bing&quot;,&quot;bo&quot;,&quot;bu&quot;,&quot;ca&quot;,&quot;cai&quot;,&quot;can&quot;,&quot;cang&quot;,&quot;cao&quot;,&quot;ce&quot;,&quot;ceng&quot;,&quot;cha&quot;,&quot;chai&quot;,&quot;chan&quot;,&quot;chang&quot;,&quot;chao&quot;,&quot;che&quot;,&quot;chen&quot;,&quot;cheng&quot;,&quot;chi&quot;,&quot;chong&quot;,&quot;chou&quot;,&quot;chu&quot;,&quot;chuai&quot;,&quot;chuan&quot;,&quot;chuang&quot;,&quot;chui&quot;,&quot;chun&quot;,&quot;chuo&quot;,&quot;ci&quot;,&quot;cong&quot;,&quot;cou&quot;,&quot;cu&quot;,&quot;cuan&quot;,&quot;cui&quot;,&quot;cun&quot;,&quot;cuo&quot;,&quot;da&quot;,&quot;dai&quot;,&quot;dan&quot;,&quot;dang&quot;,&quot;dao&quot;,&quot;de&quot;,&quot;deng&quot;,&quot;di&quot;,&quot;dian&quot;,&quot;diao&quot;,&quot;die&quot;,&quot;ding&quot;,&quot;diu&quot;,&quot;dong&quot;,&quot;dou&quot;,&quot;du&quot;,&quot;duan&quot;,&quot;dui&quot;,&quot;dun&quot;,&quot;duo&quot;,&quot;e&quot;,&quot;en&quot;,&quot;er&quot;,&quot;fa&quot;,&quot;fan&quot;,&quot;fang&quot;,&quot;fei&quot;,&quot;fen&quot;,&quot;feng&quot;,&quot;fo&quot;,&quot;fou&quot;,&quot;fu&quot;,&quot;ga&quot;,&quot;gai&quot;,&quot;gan&quot;,&quot;gang&quot;,&quot;gao&quot;,&quot;ge&quot;,&quot;gei&quot;,&quot;gen&quot;,&quot;geng&quot;,&quot;gong&quot;,&quot;gou&quot;,&quot;gu&quot;,&quot;gua&quot;,&quot;guai&quot;,&quot;guan&quot;,&quot;guang&quot;,&quot;gui&quot;,&quot;gun&quot;,&quot;guo&quot;,&quot;ha&quot;,&quot;hai&quot;,&quot;han&quot;,&quot;hang&quot;,&quot;hao&quot;,&quot;he&quot;,&quot;hei&quot;,&quot;hen&quot;,&quot;heng&quot;,&quot;hong&quot;,&quot;hou&quot;,&quot;hu&quot;,&quot;hua&quot;,&quot;huai&quot;,&quot;huan&quot;,&quot;huang&quot;,&quot;hui&quot;,&quot;hun&quot;,&quot;huo&quot;,&quot;ji&quot;,&quot;jia&quot;,&quot;jian&quot;,&quot;jiang&quot;,&quot;jiao&quot;,&quot;jie&quot;,&quot;jin&quot;,&quot;jing&quot;,&quot;jiong&quot;,&quot;jiu&quot;,&quot;ju&quot;,&quot;juan&quot;,&quot;jue&quot;,&quot;jun&quot;,&quot;ka&quot;,&quot;kai&quot;,&quot;kan&quot;,&quot;kang&quot;,&quot;kao&quot;,&quot;ke&quot;,&quot;ken&quot;,&quot;keng&quot;,&quot;kong&quot;,&quot;kou&quot;,&quot;ku&quot;,&quot;kua&quot;,&quot;kuai&quot;,&quot;kuan&quot;,&quot;kuang&quot;,&quot;kui&quot;,&quot;kun&quot;,&quot;kuo&quot;,&quot;la&quot;,&quot;lai&quot;,&quot;lan&quot;,&quot;lang&quot;,&quot;lao&quot;,&quot;le&quot;,&quot;lei&quot;,&quot;leng&quot;,&quot;li&quot;,&quot;lia&quot;,&quot;lian&quot;,&quot;liang&quot;,&quot;liao&quot;,&quot;lie&quot;,&quot;lin&quot;,&quot;ling&quot;,&quot;liu&quot;,&quot;long&quot;,&quot;lou&quot;,&quot;lu&quot;,&quot;lv&quot;,&quot;luan&quot;,&quot;lue&quot;,&quot;lun&quot;,&quot;luo&quot;,&quot;ma&quot;,&quot;mai&quot;,&quot;man&quot;,&quot;mang&quot;,&quot;mao&quot;,&quot;me&quot;,&quot;mei&quot;,&quot;men&quot;,&quot;meng&quot;,&quot;mi&quot;,&quot;mian&quot;,&quot;miao&quot;,&quot;mie&quot;,&quot;min&quot;,&quot;ming&quot;,&quot;miu&quot;,&quot;mo&quot;,&quot;mou&quot;,&quot;mu&quot;,&quot;na&quot;,&quot;nai&quot;,&quot;nan&quot;,&quot;nang&quot;,&quot;nao&quot;,&quot;ne&quot;,&quot;nei&quot;,&quot;nen&quot;,&quot;neng&quot;,&quot;ni&quot;,&quot;nian&quot;,&quot;niang&quot;,&quot;niao&quot;,&quot;nie&quot;,&quot;nin&quot;,&quot;ning&quot;,&quot;niu&quot;,&quot;nong&quot;,&quot;nu&quot;,&quot;nv&quot;,&quot;nuan&quot;,&quot;nue&quot;,&quot;nuo&quot;,&quot;o&quot;,&quot;ou&quot;,&quot;pa&quot;,&quot;pai&quot;,&quot;pan&quot;,&quot;pang&quot;,&quot;pao&quot;,&quot;pei&quot;,&quot;pen&quot;,&quot;peng&quot;,&quot;pi&quot;,&quot;pian&quot;,&quot;piao&quot;,&quot;pie&quot;,&quot;pin&quot;,&quot;ping&quot;,&quot;po&quot;,&quot;pu&quot;,&quot;qi&quot;,&quot;qia&quot;,&quot;qian&quot;,&quot;qiang&quot;,&quot;qiao&quot;,&quot;qie&quot;,&quot;qin&quot;,&quot;qing&quot;,&quot;qiong&quot;,&quot;qiu&quot;,&quot;qu&quot;,&quot;quan&quot;,&quot;que&quot;,&quot;qun&quot;,&quot;ran&quot;,&quot;rang&quot;,&quot;rao&quot;,&quot;re&quot;,&quot;ren&quot;,&quot;reng&quot;,&quot;ri&quot;,&quot;rong&quot;,&quot;rou&quot;,&quot;ru&quot;,&quot;ruan&quot;,&quot;rui&quot;,&quot;run&quot;,&quot;ruo&quot;,&quot;sa&quot;,&quot;sai&quot;,&quot;san&quot;,&quot;sang&quot;,&quot;sao&quot;,&quot;se&quot;,&quot;sen&quot;,&quot;seng&quot;,&quot;sha&quot;,&quot;shai&quot;,&quot;shan&quot;,&quot;shang&quot;,&quot;shao&quot;,&quot;she&quot;,&quot;shen&quot;,&quot;sheng&quot;,&quot;shi&quot;,&quot;shou&quot;,&quot;shu&quot;,&quot;shua&quot;,&quot;shuai&quot;,&quot;shuan&quot;,&quot;shuang&quot;,&quot;shui&quot;,&quot;shun&quot;,&quot;shuo&quot;,&quot;si&quot;,&quot;song&quot;,&quot;sou&quot;,&quot;su&quot;,&quot;suan&quot;,&quot;sui&quot;,&quot;sun&quot;,&quot;suo&quot;,&quot;ta&quot;,&quot;tai&quot;,&quot;tan&quot;,&quot;tang&quot;,&quot;tao&quot;,&quot;te&quot;,&quot;teng&quot;,&quot;ti&quot;,&quot;tian&quot;,&quot;tiao&quot;,&quot;tie&quot;,&quot;ting&quot;,&quot;tong&quot;,&quot;tou&quot;,&quot;tu&quot;,&quot;tuan&quot;,&quot;tui&quot;,&quot;tun&quot;,&quot;tuo&quot;,&quot;wa&quot;,&quot;wai&quot;,&quot;wan&quot;,&quot;wang&quot;,&quot;wei&quot;,&quot;wen&quot;,&quot;weng&quot;,&quot;wo&quot;,&quot;wu&quot;,&quot;xi&quot;,&quot;xia&quot;,&quot;xian&quot;,&quot;xiang&quot;,&quot;xiao&quot;,&quot;xie&quot;,&quot;xin&quot;,&quot;xing&quot;,&quot;xiong&quot;,&quot;xiu&quot;,&quot;xu&quot;,&quot;xuan&quot;,&quot;xue&quot;,&quot;xun&quot;,&quot;ya&quot;,&quot;yan&quot;,&quot;yang&quot;,&quot;yao&quot;,&quot;ye&quot;,&quot;yi&quot;,&quot;yin&quot;,&quot;ying&quot;,&quot;yo&quot;,&quot;yong&quot;,&quot;you&quot;,&quot;yu&quot;,&quot;yuan&quot;,&quot;yue&quot;,&quot;yun&quot;,&quot;za&quot;,&quot;zai&quot;,&quot;zan&quot;,&quot;zang&quot;,&quot;zao&quot;,&quot;ze&quot;,&quot;zei&quot;,&quot;zen&quot;,&quot;zeng&quot;,&quot;zha&quot;,&quot;zhai&quot;,&quot;zhan&quot;,&quot;zhang&quot;,&quot;zhao&quot;,&quot;zhe&quot;,&quot;zhen&quot;,&quot;zheng&quot;,&quot;zhi&quot;,&quot;zhong&quot;,&quot;zhou&quot;,&quot;zhu&quot;,&quot;zhua&quot;,&quot;zhuai&quot;,&quot;zhuan&quot;,&quot;zhuang&quot;,&quot;zhui&quot;,&quot;zhun&quot;,&quot;zhuo&quot;,&quot;zi&quot;,&quot;zong&quot;,&quot;zou&quot;,&quot;zu&quot;,&quot;zuan&quot;,&quot;zui&quot;,&quot;zun&quot;,&quot;zuo&quot;];
$number = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];
$char = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'];

$interval = 100000; //轮询时休息微秒数，频率太快会被封，1000000为1秒
$suffix = '.in';
$api = 'dcp';
$elem = array_merge($char, $number);
$repeat = 3;
$avail = [];

$avail = findDomain($elem, $repeat, $suffix, $avail, $api, $interval);
$time = time();
file_put_contents(&quot;domain{$time}.json&quot;, json_encode($avail));

function findDomain($elem, $repeat = 2, $suffix = '.com', &amp;$avail = [], $api = 'net', $interval = 1) {
    $repeat--;

    foreach ($elem as $e) {
        $domain = $e . $suffix;
        if ($repeat === 0) {
            if (isAvail($domain, $api)) {
                echo PHP_EOL . $domain . PHP_EOL;
                $avail[] = $domain;
            } else {
                echo 'x';
            }
        } else {
            findDomain($elem, $repeat, $domain, $avail, $api, $interval);
        }
        
        usleep($interval);
    }

    return $avail;
}

function isAvail($domain, $api = 'net') {
    if ($api == 'net') {
        return isAvailNet($domain);
    } else if ($api == 'cnz') {
        return isAvailCnz($domain);
    } else if ($api == 'dcp') {
    return isAvailDcp($domain);
  }
}

//通过万网接口查询是否可用
function isAvailNet($domain) {
    $api = 'http://panda.www.net.cn/cgi-bin/check.cgi?area_domain=';
    $url = $api . $domain;
    $res = simplexml_load_string(file_get_contents($url));
    $code = substr((string) $res-&gt;original, 0, 3);
    if ($code == '210') {
        return true;
    } else {
        return false;
    }
}

//通过cnz接口查询是否可用
function isAvailCnz($domain) {
    $api = 'http://www.cnz.co/domain-registration/domain.php?action=caajax&amp;domain_name=';
    $url = $api . $domain;
    $res = json_decode(file_get_contents($url));
    if ($res-&gt;status == 'available') {
        return true;
    } else {
        return false;
    }
}

//通过domcomp接口查询是否可用
function isAvailDcp($domain) {
    $api = 'https://www.domcomp.com/research1?q=%s&amp;tld=%s';
  list($q, $tld) = explode('.', $domain);
    $url = sprintf($api, $q, $tld);
    $res = json_decode(file_get_contents($url), true);
    if ($res['result']['registered'] == false) {
        return true;
    } else {
        return false;
    }
}

</code></pre>
]]></content>
        </item>
        
        <item>
            <title>做了一个简陋的win8宽带连接拨号程序</title>
            <link>https://qxzzf.com/posts/%E5%81%9A%E4%BA%86%E4%B8%80%E4%B8%AA%E7%AE%80%E9%99%8B%E7%9A%84win8%E5%AE%BD%E5%B8%A6%E8%BF%9E%E6%8E%A5%E6%8B%A8%E5%8F%B7%E7%A8%8B%E5%BA%8F/</link>
            <pubDate>Tue, 22 Apr 2014 17:51:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E5%81%9A%E4%BA%86%E4%B8%80%E4%B8%AA%E7%AE%80%E9%99%8B%E7%9A%84win8%E5%AE%BD%E5%B8%A6%E8%BF%9E%E6%8E%A5%E6%8B%A8%E5%8F%B7%E7%A8%8B%E5%BA%8F/</guid>
            <description>由于我用的是天翼宽带，密码每六个小时换一次，win7倒还好，但win8上面每次输用户名就蛋疼了，就做了个简单的拨号程序，有同样困扰的可以试用看看 下载地址 http://pan.baidu.com/s/1hqsq4GO</description>
            <content type="html"><![CDATA[<p>由于我用的是天翼宽带，密码每六个小时换一次，win7倒还好，但win8上面每次输用户名就蛋疼了，就做了个简单的拨号程序，有同样困扰的可以试用看看
下载地址 <a href="http://pan.baidu.com/s/1hqsq4GO" target="_blank">http://pan.baidu.com/s/1hqsq4GO</a></p>
]]></content>
        </item>
        
        <item>
            <title>MySQL大数据量表中删除重复记录</title>
            <link>https://qxzzf.com/posts/mysql%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%87%8F%E8%A1%A8%E4%B8%AD%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E8%AE%B0%E5%BD%95/</link>
            <pubDate>Tue, 10 Dec 2013 21:21:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/mysql%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%87%8F%E8%A1%A8%E4%B8%AD%E5%88%A0%E9%99%A4%E9%87%8D%E5%A4%8D%E8%AE%B0%E5%BD%95/</guid>
            <description>最近工作中需要抓取大量新闻，抓取的数据中由于一些原因存在一些重复数据，而整个数据表的记录数接近10万条，大小接近1个G，又在我自己的渣渣本本上，查询速度十分不理想，想要完成一个最基本的查询都很困难。在看了一些相关资料后终于找到解决方法，分享给大家参考。 首先说一下新闻表的大概结构，主要是包含id、title、content等字段，其中title字段使用较为频繁，并且需要用该字段判断重复记录，所以我们先给title字段添加索引。添加索引后我们可以使用以下语句来很快地查询出哪些title是重复的：
SELECT `title` FROM `info` GROUP BY `title` HAVING COUNT( `title` ) &amp;gt;1  但如果要一次查出重复字段的id的话就需要用到子查询了，可是子查询的效率很低，明显是不合适的，所以我们可以先建一个临时表：
CREATE TABLE `tmptable` AS (SELECT `title` FROM `info` GROUP BY `title` HAVING COUNT( `title` ) &amp;gt;1);  有了重复字段的标题接下来就可以查出重复字段的id了，我这里为了方便又建了一个临时表：
CREATE TABLE `idtable` AS ( SELECT min(a.`id`) AS id, a.`title` FROM `info` a, `tmptable` t WHERE a.`title` = t.`title` GROUP BY a.`title`);  这样删除重复字段就很容易了：
DELETE a FROM `info` a,`idtable` t WHERE a.`id` = t.`id`;   不过我这篇文章中的方法只适用于记录只重复了一次的情况，不过稍微改改就可以删除重复次数较多的记录，这里就不在赘述。</description>
            <content type="html"><![CDATA[<p>   最近工作中需要抓取大量新闻，抓取的数据中由于一些原因存在一些重复数据，而整个数据表的记录数接近10万条，大小接近1个G，又在我自己的渣渣本本上，查询速度十分不理想，想要完成一个最基本的查询都很困难。在看了一些相关资料后终于找到解决方法，分享给大家参考。
   首先说一下新闻表的大概结构，主要是包含id、title、content等字段，其中title字段使用较为频繁，并且需要用该字段判断重复记录，所以我们先给title字段添加索引。添加索引后我们可以使用以下语句来很快地查询出哪些title是重复的：</p>

<pre><code class="language-sql">SELECT `title` FROM `info` GROUP BY `title` HAVING COUNT( `title` ) &gt;1
</code></pre>

<p>但如果要一次查出重复字段的id的话就需要用到子查询了，可是子查询的效率很低，明显是不合适的，所以我们可以先建一个临时表：</p>

<pre><code class="language-sql">CREATE TABLE `tmptable` AS (SELECT `title` FROM `info` GROUP BY `title` HAVING COUNT( `title` ) &gt;1);
</code></pre>

<p>有了重复字段的标题接下来就可以查出重复字段的id了，我这里为了方便又建了一个临时表：</p>

<pre><code class="language-sql">CREATE TABLE `idtable` AS ( SELECT min(a.`id`) AS id, a.`title` FROM `info` a, `tmptable` t WHERE a.`title` = t.`title` GROUP BY a.`title`);
</code></pre>

<p>这样删除重复字段就很容易了：</p>

<pre><code class="language-sql">DELETE a FROM `info` a,`idtable` t WHERE a.`id` = t.`id`;
</code></pre>

<p> 
 不过我这篇文章中的方法只适用于记录只重复了一次的情况，不过稍微改改就可以删除重复次数较多的记录，这里就不在赘述。</p>
]]></content>
        </item>
        
        <item>
            <title>PHP收发扩散性百万亚瑟王数据包</title>
            <link>https://qxzzf.com/posts/php%E6%94%B6%E5%8F%91%E6%89%A9%E6%95%A3%E6%80%A7%E7%99%BE%E4%B8%87%E4%BA%9A%E7%91%9F%E7%8E%8B%E6%95%B0%E6%8D%AE%E5%8C%85/</link>
            <pubDate>Wed, 04 Dec 2013 10:25:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/php%E6%94%B6%E5%8F%91%E6%89%A9%E6%95%A3%E6%80%A7%E7%99%BE%E4%B8%87%E4%BA%9A%E7%91%9F%E7%8E%8B%E6%95%B0%E6%8D%AE%E5%8C%85/</guid>
            <description>扩散性百万亚瑟王是去年在日本很火的一款卡牌类手游，今年盛大代理后国内玩家增长了很多，挂机科技也逐渐多了起来。大多数科技的源头应该都是Mawalker，非常感谢原作者的无私开源，才能促成现在科技百花齐放的情况，造福广大玩家。 我想将mawalker用php来改写出来，无奈在收发数据包方面就卡住了。后来在群友的帮助以及网上查找到的资料的帮助下终于完成了，于是便将最基本的登录代码公布出来以供大家参考。
require(&amp;quot;snoopy.php&amp;quot;); $key = &amp;quot;uH9JF2cHf6OppaC10000000000000000&amp;quot;; $url = &amp;quot;http://web.million-arthurs.com/connect/app/login?cyt=1&amp;quot;; $vars[&#39;login_id&#39;] = Security::encrypt(&#39;yourid&#39; , $key ); $vars[&#39;password&#39;] = Security::encrypt(&#39;password&#39; , $key ); $snoopy = new Snoopy(); $snoopy-&amp;gt;agent = &amp;quot;Million/250 (t03gchn; t03gzc; 4.1.2) samsung/t03gzc/t03gchn:4.1.2/JZO54K/N7100ZCDMD3:user/release-keys GooglePlay&amp;quot;; $snoopy-&amp;gt;rawheaders[&amp;quot;DontTrackMeHere&amp;quot;] = &amp;quot;gzip, deflate&amp;quot;; $snoopy-&amp;gt;submit($url, $vars); $ret = $snoopy-&amp;gt;results; echo Security::decrypt(base64_encode($ret), $key ); class Security { public static function encrypt($input, $key) { $size = mcrypt_get_block_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_ECB); $input = Security::pkcs5_pad($input, $size); $td = mcrypt_module_open(MCRYPT_RIJNDAEL_128, &#39;&#39;, MCRYPT_MODE_ECB, &#39;&#39;); $iv = mcrypt_create_iv (mcrypt_enc_get_iv_size($td), MCRYPT_RAND); mcrypt_generic_init($td, $key, $iv); $data = mcrypt_generic($td, $input); mcrypt_generic_deinit($td); mcrypt_module_close($td); $data = base64_encode($data); return $data; } private static function pkcs5_pad ($text, $blocksize) { $pad = $blocksize - (strlen($text) % $blocksize); return $text .</description>
            <content type="html"><![CDATA[<p>   扩散性百万亚瑟王是去年在日本很火的一款卡牌类手游，今年盛大代理后国内玩家增长了很多，挂机科技也逐渐多了起来。大多数科技的源头应该都是Mawalker，非常感谢原作者的无私开源，才能促成现在科技百花齐放的情况，造福广大玩家。
   我想将mawalker用php来改写出来，无奈在收发数据包方面就卡住了。后来在群友的帮助以及网上查找到的资料的帮助下终于完成了，于是便将最基本的登录代码公布出来以供大家参考。</p>

<pre><code class="language-php">require(&quot;snoopy.php&quot;);
$key = &quot;uH9JF2cHf6OppaC10000000000000000&quot;;
$url = &quot;http://web.million-arthurs.com/connect/app/login?cyt=1&quot;;
$vars['login_id'] = Security::encrypt('yourid' , $key );
$vars['password'] = Security::encrypt('password' , $key );
$snoopy = new Snoopy();
$snoopy-&gt;agent = &quot;Million/250 (t03gchn; t03gzc; 4.1.2) samsung/t03gzc/t03gchn:4.1.2/JZO54K/N7100ZCDMD3:user/release-keys GooglePlay&quot;;
$snoopy-&gt;rawheaders[&quot;DontTrackMeHere&quot;] = &quot;gzip, deflate&quot;;
$snoopy-&gt;submit($url, $vars);
$ret = $snoopy-&gt;results;

echo Security::decrypt(base64_encode($ret), $key );

class Security {
    public static function encrypt($input, $key) {
    $size = mcrypt_get_block_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_ECB);
    $input = Security::pkcs5_pad($input, $size);
    $td = mcrypt_module_open(MCRYPT_RIJNDAEL_128, '', MCRYPT_MODE_ECB, '');
    $iv = mcrypt_create_iv (mcrypt_enc_get_iv_size($td), MCRYPT_RAND);
    mcrypt_generic_init($td, $key, $iv);
    $data = mcrypt_generic($td, $input);
    mcrypt_generic_deinit($td);
    mcrypt_module_close($td);
    $data = base64_encode($data);
    return $data;
    }
 
    private static function pkcs5_pad ($text, $blocksize) {
        $pad = $blocksize - (strlen($text) % $blocksize);
        return $text . str_repeat(chr($pad), $pad);
    }
 
    public static function decrypt($sStr, $sKey) {
        $decrypted= mcrypt_decrypt(
        MCRYPT_RIJNDAEL_128,
        $sKey,
        base64_decode($sStr),
        MCRYPT_MODE_ECB
            );
 
        $dec_s = strlen($decrypted);
        $padding = ord($decrypted[$dec_s-1]);
        $decrypted = substr($decrypted, 0, -$padding);
        return $decrypted;
    }   
}
</code></pre>

<p>   代码中使用了snoopy类，这个类可以很容易找到，而aes编解码所使用的类也是网上找到的，可以兼容java的aes编解码。snoopy类也可以换成curl，有能力的可以自己改。另外login的登录加密key是不带login_id的，另一种加密的key需要带login_id，具体可以看mawalker。</p>
]]></content>
        </item>
        
        <item>
            <title> 删除指定的html标签</title>
            <link>https://qxzzf.com/posts/-%E5%88%A0%E9%99%A4%E6%8C%87%E5%AE%9A%E7%9A%84html%E6%A0%87%E7%AD%BE/</link>
            <pubDate>Fri, 22 Nov 2013 19:02:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/-%E5%88%A0%E9%99%A4%E6%8C%87%E5%AE%9A%E7%9A%84html%E6%A0%87%E7%AD%BE/</guid>
            <description> php函数strip_tags可设置保留的标签，但不能去除指定的标签，所以仿strip_tags的调用方式写了这个简单的函数。 前两个参数的使用方法与strip_tags相同，$clear参数可指定是否去除标签内的内容。
function _strip_tags($str, $tags, $clear = false) {//去除指定html标签，$clear设为true时同时清除标签内容 $tagsArr = explode(&#39;&amp;lt;&#39;, $tags); unset($tagsArr[0]); foreach ($tagsArr as $tag) { $tag = trim($tag, &#39;&amp;gt;&#39;); if($clear) { $p[] = &amp;quot;/&amp;lt;&amp;quot;.$tag.&amp;quot;.*&amp;lt;\/&amp;quot;.$tag.&amp;quot;&amp;gt;/i&amp;quot;; } else { $p[] = &amp;quot;/(&amp;lt;(?:\/&amp;quot;.$tag.&amp;quot;|&amp;quot;.$tag.&amp;quot;)[^&amp;gt;]*&amp;gt;)/i&amp;quot;; } } $return_str = preg_replace($p,&amp;quot;&amp;quot;,$str); return $return_str; }  </description>
            <content type="html"><![CDATA[<p>    php函数strip_tags可设置保留的标签，但不能去除指定的标签，所以仿strip_tags的调用方式写了这个简单的函数。 前两个参数的使用方法与strip_tags相同，$clear参数可指定是否去除标签内的内容。</p>

<pre><code class="language-php">function _strip_tags($str, $tags, $clear = false) 
{//去除指定html标签，$clear设为true时同时清除标签内容   
  $tagsArr = explode('&lt;', $tags);
  unset($tagsArr[0]);
  foreach ($tagsArr as $tag) {  
    $tag = trim($tag, '&gt;');
    if($clear) {
      $p[] = &quot;/&lt;&quot;.$tag.&quot;.*&lt;\/&quot;.$tag.&quot;&gt;/i&quot;;
    } else {
      $p[] = &quot;/(&lt;(?:\/&quot;.$tag.&quot;|&quot;.$tag.&quot;)[^&gt;]*&gt;)/i&quot;;  
    }
  }  
  $return_str = preg_replace($p,&quot;&quot;,$str);  
  return $return_str;  
}
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>新手学web开发杂记（十二）——bmp转GD函数</title>
            <link>https://qxzzf.com/posts/%E6%96%B0%E6%89%8B%E5%AD%A6web%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0%E5%8D%81%E4%BA%8Cbmp%E8%BD%ACgd%E5%87%BD%E6%95%B0/</link>
            <pubDate>Fri, 27 Sep 2013 13:46:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E6%96%B0%E6%89%8B%E5%AD%A6web%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0%E5%8D%81%E4%BA%8Cbmp%E8%BD%ACgd%E5%87%BD%E6%95%B0/</guid>
            <description>最近在工作中需要把bmp图片转成jpg图片，但无奈的是网上能找到的bmp转gd的类或函数或多或少都有些问题。其中绝大多数在处理16位bmp图片时要么全黑全粉，要么干脆转换不出，其余有些根本不支持32位的bmp图片。 最后我终于在php的官网上找到了解决方法。原来网上流传最广的一个仿GD的imagecreatefrombmp函数是一个有问题的版本，无法正确处理16位bmp图片，但好在官网上有人给出了修正方法，修正好的代码如下：
/** * BMP 创建函数 * @author simon * @modified by 天心流水 * @param string $filename path of bmp file * @example who use,who knows * @return resource of GD */ function imagecreatefrombmp( $filename ) { if ( !$f1 = fopen( $filename, &amp;quot;rb&amp;quot; ) ) return FALSE; $FILE = unpack( &amp;quot;vfile_type/Vfile_size/Vreserved/Vbitmap_offset&amp;quot;, fread( $f1, 14 ) ); if ( $FILE[&#39;file_type&#39;] != 19778 ) return FALSE; $BMP = unpack( &#39;Vheader_size/Vwidth/Vheight/vplanes/vbits_per_pixel&#39; .</description>
            <content type="html"><![CDATA[<p>   最近在工作中需要把bmp图片转成jpg图片，但无奈的是网上能找到的bmp转gd的类或函数或多或少都有些问题。其中绝大多数在处理16位bmp图片时要么全黑全粉，要么干脆转换不出，其余有些根本不支持32位的bmp图片。
   最后我终于在php的官网上找到了解决方法。原来网上流传最广的一个仿GD的imagecreatefrombmp函数是一个有问题的版本，无法正确处理16位bmp图片，但好在官网上有人给出了修正方法，修正好的代码如下：</p>

<pre><code class="language-php">/**
 * BMP 创建函数
 * @author simon
 * @modified by 天心流水
 * @param string $filename path of bmp file
 * @example who use,who knows
 * @return resource of GD
 */ 
function imagecreatefrombmp( $filename ) {
    if ( !$f1 = fopen( $filename, &quot;rb&quot; ) )
        return FALSE;
    
    $FILE = unpack( &quot;vfile_type/Vfile_size/Vreserved/Vbitmap_offset&quot;, fread( $f1, 14 ) );
    if ( $FILE['file_type'] != 19778 )
        return FALSE;
    
    $BMP = unpack( 'Vheader_size/Vwidth/Vheight/vplanes/vbits_per_pixel' . '/Vcompression/Vsize_bitmap/Vhoriz_resolution' . '/Vvert_resolution/Vcolors_used/Vcolors_important', fread( $f1, 40 ) );
    $BMP['colors'] = pow( 2, $BMP['bits_per_pixel'] );
    if ( $BMP['size_bitmap'] == 0 )
        $BMP['size_bitmap'] = $FILE['file_size'] - $FILE['bitmap_offset'];
    $BMP['bytes_per_pixel'] = $BMP['bits_per_pixel'] / 8;
    $BMP['bytes_per_pixel2'] = ceil( $BMP['bytes_per_pixel'] );
    $BMP['decal'] = ($BMP['width'] * $BMP['bytes_per_pixel'] / 4);
    $BMP['decal'] -= floor( $BMP['width'] * $BMP['bytes_per_pixel'] / 4 );
    $BMP['decal'] = 4 - (4 * $BMP['decal']);
    if ( $BMP['decal'] == 4 )
        $BMP['decal'] = 0;
    
    $PALETTE = array();
  if ($BMP['colors'] &lt; 16777216 &amp;&amp; $BMP['colors'] != 65536)
  {
    $PALETTE = unpack('V'.$BMP['colors'], fread($f1,$BMP['colors']*4));
  }
    
    $IMG = fread( $f1, $BMP['size_bitmap'] );
    $VIDE = chr( 0 );
    
    $res = imagecreatetruecolor( $BMP['width'], $BMP['height'] );
    $P = 0;
    $Y = $BMP['height'] - 1;
    while( $Y &gt;= 0 ){
        $X = 0;
        while( $X &lt; $BMP['width'] ){
            if ( $BMP['bits_per_pixel'] == 32 ){
                $COLOR = unpack( &quot;V&quot;, substr( $IMG, $P, 3 ) );
                $B = ord(substr($IMG, $P,1));
                $G = ord(substr($IMG, $P+1,1));
                $R = ord(substr($IMG, $P+2,1));
                $color = imagecolorexact( $res, $R, $G, $B );
                if ( $color == -1 )
                    $color = imagecolorallocate( $res, $R, $G, $B );
                $COLOR[0] = $R*256*256+$G*256+$B;
                $COLOR[1] = $color;
            } elseif ( $BMP['bits_per_pixel'] == 24 ) {
                $COLOR = unpack( &quot;V&quot;, substr( $IMG, $P, 3 ) . $VIDE );
      } elseif ( $BMP['bits_per_pixel'] == 16 ){
        $COLOR = unpack(&quot;v&quot;,substr($IMG,$P,2));
        $blue  = (($COLOR[1] &amp; 0x001f) &lt;&lt; 3) + 7;
        $green = (($COLOR[1] &amp; 0x03e0) &gt;&gt; 2) + 7;
        $red   = (($COLOR[1] &amp; 0xfc00) &gt;&gt; 7) + 7;
        $COLOR[1] = $red * 65536 + $green * 256 + $blue;
            } elseif ( $BMP['bits_per_pixel'] == 8 ){
                $COLOR = unpack( &quot;n&quot;, $VIDE . substr( $IMG, $P, 1 ) );
                $COLOR[1] = $PALETTE[$COLOR[1] + 1];
            } elseif ( $BMP['bits_per_pixel'] == 4 ){
                $COLOR = unpack( &quot;n&quot;, $VIDE . substr( $IMG, floor( $P ), 1 ) );
                if ( ($P * 2) % 2 == 0 )
                    $COLOR[1] = ($COLOR[1] &gt;&gt; 4);
                else
                    $COLOR[1] = ($COLOR[1] &amp; 0x0F);
                $COLOR[1] = $PALETTE[$COLOR[1] + 1];
            } elseif ( $BMP['bits_per_pixel'] == 1 ){
                $COLOR = unpack( &quot;n&quot;, $VIDE . substr( $IMG, floor( $P ), 1 ) );
                if ( ($P * 8) % 8 == 0 )
                    $COLOR[1] = $COLOR[1] &gt;&gt; 7;
                elseif ( ($P * 8) % 8 == 1 )
                    $COLOR[1] = ($COLOR[1] &amp; 0x40) &gt;&gt; 6;
                elseif ( ($P * 8) % 8 == 2 )
                    $COLOR[1] = ($COLOR[1] &amp; 0x20) &gt;&gt; 5;
                elseif ( ($P * 8) % 8 == 3 )
                    $COLOR[1] = ($COLOR[1] &amp; 0x10) &gt;&gt; 4;
                elseif ( ($P * 8) % 8 == 4 )
                    $COLOR[1] = ($COLOR[1] &amp; 0x8) &gt;&gt; 3;
                elseif ( ($P * 8) % 8 == 5 )
                    $COLOR[1] = ($COLOR[1] &amp; 0x4) &gt;&gt; 2;
                elseif ( ($P * 8) % 8 == 6 )
                    $COLOR[1] = ($COLOR[1] &amp; 0x2) &gt;&gt; 1;
                elseif ( ($P * 8) % 8 == 7 )
                    $COLOR[1] = ($COLOR[1] &amp; 0x1);
                $COLOR[1] = $PALETTE[$COLOR[1] + 1];
            }else
                return FALSE;
            imagesetpixel( $res, $X, $Y, $COLOR[1] );
            $X++;
            $P += $BMP['bytes_per_pixel'];
        }
        $Y--;
        $P += $BMP['decal'];
    }
    fclose( $f1 );
    
    return $res;
}
</code></pre>
]]></content>
        </item>
        
        <item>
            <title>新手学WEB开发杂记（十一）——git的使用</title>
            <link>https://qxzzf.com/posts/%E6%96%B0%E6%89%8B%E5%AD%A6web%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0%E5%8D%81%E4%B8%80git%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
            <pubDate>Wed, 05 Jun 2013 22:30:52 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E6%96%B0%E6%89%8B%E5%AD%A6web%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0%E5%8D%81%E4%B8%80git%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
            <description>很早就想写一个开源程序了，可是目前水平还很有限，写出的代码质量尚不尽如人意，所以暂时还没有能够整理出来的代码。不过先熟悉熟悉git的使用也是好的，毕竟现在比较流行的代码托管服务中不少都是基于git的，其中尤以github最为流行。 于是我在网上找到了一篇比较详细的介绍github的使用的文章 http://artori.us/git-github-usage/ 。 其他的git服务的使用也大同小异，而且大多都比github还要简单一些，如果有一定的linux基础上手应该是很容易的。</description>
            <content type="html"><![CDATA[<p>    很早就想写一个开源程序了，可是目前水平还很有限，写出的代码质量尚不尽如人意，所以暂时还没有能够整理出来的代码。不过先熟悉熟悉git的使用也是好的，毕竟现在比较流行的代码托管服务中不少都是基于git的，其中尤以github最为流行。
    于是我在网上找到了一篇比较详细的介绍github的使用的文章 <a href="http://artori.us/git-github-usage/ 。" target="_blank">http://artori.us/git-github-usage/ 。</a> 其他的git服务的使用也大同小异，而且大多都比github还要简单一些，如果有一定的linux基础上手应该是很容易的。</p>
]]></content>
        </item>
        
        <item>
            <title>新手学WEB开发杂记（十）——b2core框架基本应用示例</title>
            <link>https://qxzzf.com/posts/%E6%96%B0%E6%89%8B%E5%AD%A6web%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0%E5%8D%81b2core%E6%A1%86%E6%9E%B6%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8%E7%A4%BA%E4%BE%8B/</link>
            <pubDate>Tue, 04 Jun 2013 20:18:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E6%96%B0%E6%89%8B%E5%AD%A6web%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0%E5%8D%81b2core%E6%A1%86%E6%9E%B6%E5%9F%BA%E6%9C%AC%E5%BA%94%E7%94%A8%E7%A4%BA%E4%BE%8B/</guid>
            <description>b2Core是一个简单、快速、灵活的 php mvc 框架。b2Core是一个超轻量级的架构。它的核心代码不到300行。包括 3个核心类，6个核心函数。 它可以被用做学习 PHP MVC 架构的快速入门。
 在学习b2core框架时，由于资料比较少，遇到过一些麻烦，不过最终还是解决了，并且成功架设好一个最简单的应用。 这个应用是由alpaca论坛管理员doudou在一年多之前发的一个帖子里的示例应用，http://alpaca.b24.cn/bbs/topic/56/。该帖子写的十分详细，给了我很大帮助，不过帖子中给出的代码不是很全，所以我在自己部署该应用时，按步骤创建好4个文件后访问应用路径无任何显示，也没有报错。 经过对b2core主页上的使用入门以及b2core.php源码的阅读以及对eku、bugtrace等应用的参照后终于找到了原因所在。一是，原帖所给出的源码中没有utility工具类库且app/c/__constract.php文件中也未加载utility类；二是，原帖给出的app/c/home.php文件中，view函数所调用的模版路径错误，应改为view(&amp;lsquo;v/guestbook&amp;rsquo;,$param)，这个可能是原帖中使用的版本较老的原因。 将这两点处理好后，应用便能成功运行了。完整的应用源码下载地址：http://yun.baidu.com/share/link?uk=2870436497&amp;amp;shareid=3827472933完整的应用部署步骤请参照上面给出的帖子链接。</description>
            <content type="html"><![CDATA[<p>    b2Core是一个简单、快速、灵活的 php mvc 框架。b2Core是一个超轻量级的架构。它的核心代码不到300行。包括 3个核心类，6个核心函数。 它可以被用做学习 PHP MVC 架构的快速入门。</p>

<p>    在学习b2core框架时，由于资料比较少，遇到过一些麻烦，不过最终还是解决了，并且成功架设好一个最简单的应用。
    这个应用是由alpaca论坛管理员doudou在一年多之前发的一个帖子里的示例应用，<a href="http://alpaca.b24.cn/bbs/topic/56/。该帖子写的十分详细，给了我很大帮助，不过帖子中给出的代码不是很全，所以我在自己部署该应用时，按步骤创建好4个文件后访问应用路径无任何显示，也没有报错。" target="_blank">http://alpaca.b24.cn/bbs/topic/56/。该帖子写的十分详细，给了我很大帮助，不过帖子中给出的代码不是很全，所以我在自己部署该应用时，按步骤创建好4个文件后访问应用路径无任何显示，也没有报错。</a>
    经过对b2core主页上的使用入门以及b2core.php源码的阅读以及对eku、bugtrace等应用的参照后终于找到了原因所在。一是，原帖所给出的源码中没有utility工具类库且app/c/__constract.php文件中也未加载utility类；二是，原帖给出的app/c/home.php文件中，view函数所调用的模版路径错误，应改为view(&lsquo;v/guestbook&rsquo;,$param)，这个可能是原帖中使用的版本较老的原因。
     将这两点处理好后，应用便能成功运行了。完整的应用源码下载地址：<a href="http://yun.baidu.com/share/link?uk=2870436497&amp;shareid=3827472933完整的应用部署步骤请参照上面给出的帖子链接。" target="_blank">http://yun.baidu.com/share/link?uk=2870436497&amp;shareid=3827472933完整的应用部署步骤请参照上面给出的帖子链接。</a></p>
]]></content>
        </item>
        
        <item>
            <title>新手学WEB开发杂记（九）——CKEditor的配置和使用</title>
            <link>https://qxzzf.com/posts/%E6%96%B0%E6%89%8B%E5%AD%A6web%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0%E4%B9%9Dckeditor%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/</link>
            <pubDate>Mon, 03 Jun 2013 20:37:18 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E6%96%B0%E6%89%8B%E5%AD%A6web%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0%E4%B9%9Dckeditor%E7%9A%84%E9%85%8D%E7%BD%AE%E5%92%8C%E4%BD%BF%E7%94%A8/</guid>
            <description> CKEditor是目前比较好的一款所见即所得的可视化HTML编辑器，虽然其体积较大，但是功能十分强大。最近想自己写一款博客程序，由于自己的wordpress用的是TinyMCE，觉得使用起来不太方便，所以便想尝试下CKEditor。 试了一下后发现CKEditor上传图片需要CKFinder的支持，除了这一点外，配置起来都很方便。为了能够上传图片，我在网上找了很多教程，但是大多不是十分详细，版本也比较老。不过终于找到一篇比较详尽的教程，配置成功了，于是便分享出来： http://www.cppblog.com/biao/archive/2010/11/16/132081.html </description>
            <content type="html"><![CDATA[<p>   CKEditor是目前比较好的一款所见即所得的可视化HTML编辑器，虽然其体积较大，但是功能十分强大。最近想自己写一款博客程序，由于自己的wordpress用的是TinyMCE，觉得使用起来不太方便，所以便想尝试下CKEditor。
   试了一下后发现CKEditor上传图片需要CKFinder的支持，除了这一点外，配置起来都很方便。为了能够上传图片，我在网上找了很多教程，但是大多不是十分详细，版本也比较老。不过终于找到一篇比较详尽的教程，配置成功了，于是便分享出来： <a href="http://www.cppblog.com/biao/archive/2010/11/16/132081.html" target="_blank">http://www.cppblog.com/biao/archive/2010/11/16/132081.html</a>
 </p>
]]></content>
        </item>
        
        <item>
            <title>新手学WEB开发杂记（八）——JS设置Cookie时中文编码问题</title>
            <link>https://qxzzf.com/posts/%E6%96%B0%E6%89%8B%E5%AD%A6web%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0%E5%85%ABjs%E8%AE%BE%E7%BD%AEcookie%E6%97%B6%E4%B8%AD%E6%96%87%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</link>
            <pubDate>Sat, 18 May 2013 10:51:34 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E6%96%B0%E6%89%8B%E5%AD%A6web%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0%E5%85%ABjs%E8%AE%BE%E7%BD%AEcookie%E6%97%B6%E4%B8%AD%E6%96%87%E7%BC%96%E7%A0%81%E9%97%AE%E9%A2%98/</guid>
            <description> 最近写的一个页面中我使用了js来设置登录后的用户名cookie，但是PHP获取该cookie时，发现其值中的中文字符被编码成了\u开头的unicode编码，该编码在PHP中可以使用如下语句转换成utf8编码： [js]preg_replace(&amp;ldquo;#\\u([0-9a-f]{4})#ie&amp;rdquo;, &amp;ldquo;iconv(&amp;lsquo;UCS-2BE&amp;rsquo;, &amp;lsquo;UTF-8&amp;rsquo;, pack(&amp;lsquo;H4&amp;rsquo;, &amp;lsquo;\1&amp;rsquo;))&amp;ldquo;, $unicode_string)；[/js] 我在同一个domain的另一个页面中登录时是采用php设置cookie的，php设置的cookie中的中文是utf8编码的。在PHP获取cookie时使用上面的语句处理一下就可以解决不同页面设置的cookie在另外的页面工作不正常的问题。 还有另外一个办法可以解决该问题，也很简单，即JS端使用encodeURI() 函数可把字符串作为 URI 进行编码，PHP端使用urldecode函数进行解码。 </description>
            <content type="html"><![CDATA[<p>    最近写的一个页面中我使用了js来设置登录后的用户名cookie，但是PHP获取该cookie时，发现其值中的中文字符被编码成了\u开头的unicode编码，该编码在PHP中可以使用如下语句转换成utf8编码：
[js]preg_replace(&ldquo;#\\u([0-9a-f]{4})#ie&rdquo;, &ldquo;iconv(&lsquo;UCS-2BE&rsquo;, &lsquo;UTF-8&rsquo;, pack(&lsquo;H4&rsquo;, &lsquo;\1&rsquo;))&ldquo;, $unicode_string)；[/js]
   
   我在同一个domain的另一个页面中登录时是采用php设置cookie的，php设置的cookie中的中文是utf8编码的。在PHP获取cookie时使用上面的语句处理一下就可以解决不同页面设置的cookie在另外的页面工作不正常的问题。
 
   还有另外一个办法可以解决该问题，也很简单，即JS端使用encodeURI() 函数可把字符串作为 URI 进行编码，PHP端使用urldecode函数进行解码。
 </p>
]]></content>
        </item>
        
        <item>
            <title>PHP按最大宽高等比例缩放图片类</title>
            <link>https://qxzzf.com/posts/php%E6%8C%89%E6%9C%80%E5%A4%A7%E5%AE%BD%E9%AB%98%E7%AD%89%E6%AF%94%E4%BE%8B%E7%BC%A9%E6%94%BE%E5%9B%BE%E7%89%87%E7%B1%BB/</link>
            <pubDate>Tue, 07 May 2013 16:54:49 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/php%E6%8C%89%E6%9C%80%E5%A4%A7%E5%AE%BD%E9%AB%98%E7%AD%89%E6%AF%94%E4%BE%8B%E7%BC%A9%E6%94%BE%E5%9B%BE%E7%89%87%E7%B1%BB/</guid>
            <description>本来用phpthumb来缩略图片是十分方便的，但是最近在sae上写项目发现phpthumb在sae上保存文件时会出问题，想来实现一个简单的按最大宽高等比例缩放图片类也并不困难，于是便自己写了一个方便修改。 需GD库支持，可支持jpg、jpeg、png、gif格式的图片，代码短小适合新手学习用。 [php]&amp;lt;?php class slpic { //原图片文件，包含路径和文件名 var $orpic; //原图的临时图像 var $tempic; //缩略图 var $thpic; //原宽度 var $width; //原高度 var $height; //图片类型 var $type; //缩略后的宽度 var $thwidth; //缩略后的高度 var $thheight;
function __construct($file){ $this-&amp;gt;orpic = $file; $infos = getimagesize($file); $this-&amp;gt;width = $infos[0]; $this-&amp;gt;height = $infos[1]; $this-&amp;gt;type = $infos[2]; } //根据用户所指定最大宽高来计算缩略图尺寸 function cal_size($maxwidth, $maxheight){ //缩略图最大宽度与最大高度比 $thcrown = $maxwidth/$maxheight; //原图宽高比 $crown = $this-&amp;gt;width/$this-&amp;gt;height; if($crown/$thcrown &amp;gt;= 1){ $this-&amp;gt;thwidth = $maxwidth; $this-&amp;gt;thheight = $maxwidth/$crown; } else { $this-&amp;gt;thheight = $maxheight; $this-&amp;gt;thwidth = $maxheight*$crown; } } function init(){ switch($this-&amp;gt;type){ case 1: //GIF $this-&amp;gt;tempic = imagecreatefromgif($this-&amp;gt;orpic); break; case 2: //JPG $this-&amp;gt;tempic = imagecreatefromjpeg($this-&amp;gt;orpic); break; case 3: //PNG $this-&amp;gt;tempic = imagecreatefrompng($this-&amp;gt;orpic); break; default: echo &#39;暂不支持该图片格式&#39;; } } function resize($maxwidth, $maxheight){ //初始化图像 $this-&amp;gt;init(); //计算出缩略图尺寸 $this-&amp;gt;cal_size($maxwidth, $maxheight); $this-&amp;gt;thpic = imagecreatetruecolor($this-&amp;gt;thwidth, $this-&amp;gt;thheight); imagecopyresampled($this-&amp;gt;thpic, $this-&amp;gt;tempic, 0, 0, 0 ,0, $this-&amp;gt;thwidth, $this-&amp;gt;thheight, $this-&amp;gt;width, $this-&amp;gt;height); } function save($filename, $type){ switch($type){ case &#39;jpg&#39;: case &#39;jpeg&#39;: imagejpeg($this-&amp;gt;thpic, $filename); break; case &#39;png&#39;: imagepng($$this-&amp;gt;thpic, $filename); break; case &#39;gif&#39;: imagegif($$this-&amp;gt;thpic, $filename); break; default: echo &#39;暂不支持您所选择的格式&#39;; } }  } ?</description>
            <content type="html"><![CDATA[<p>   本来用phpthumb来缩略图片是十分方便的，但是最近在sae上写项目发现phpthumb在sae上保存文件时会出问题，想来实现一个简单的按最大宽高等比例缩放图片类也并不困难，于是便自己写了一个方便修改。
   需GD库支持，可支持jpg、jpeg、png、gif格式的图片，代码短小适合新手学习用。
 
[php]&lt;?php
class slpic {
    //原图片文件，包含路径和文件名
    var $orpic;
    //原图的临时图像
    var $tempic;
    //缩略图
    var $thpic;
    //原宽度
    var $width;
    //原高度
    var $height;
    //图片类型
    var $type;
    //缩略后的宽度
    var $thwidth;
    //缩略后的高度
    var $thheight;</p>

<pre><code>function __construct($file){
    $this-&gt;orpic = $file;
    $infos = getimagesize($file);
    $this-&gt;width = $infos[0];
    $this-&gt;height = $infos[1];
    $this-&gt;type = $infos[2];
}

//根据用户所指定最大宽高来计算缩略图尺寸
function cal_size($maxwidth, $maxheight){
    //缩略图最大宽度与最大高度比
    $thcrown = $maxwidth/$maxheight;    
    //原图宽高比
    $crown = $this-&gt;width/$this-&gt;height;    
    if($crown/$thcrown &gt;= 1){
        $this-&gt;thwidth = $maxwidth;
        $this-&gt;thheight = $maxwidth/$crown;
    } else {
        $this-&gt;thheight = $maxheight;
        $this-&gt;thwidth = $maxheight*$crown;
    }
}

function init(){
    switch($this-&gt;type){
        case 1:     //GIF
            $this-&gt;tempic = imagecreatefromgif($this-&gt;orpic);
            break;
        case 2:     //JPG
            $this-&gt;tempic = imagecreatefromjpeg($this-&gt;orpic);
            break;
        case 3:     //PNG
            $this-&gt;tempic = imagecreatefrompng($this-&gt;orpic);
            break;
        default:
            echo '暂不支持该图片格式';
    }
}

function resize($maxwidth, $maxheight){
    //初始化图像
    $this-&gt;init();
    //计算出缩略图尺寸
    $this-&gt;cal_size($maxwidth, $maxheight);

    $this-&gt;thpic = imagecreatetruecolor($this-&gt;thwidth, $this-&gt;thheight);
    imagecopyresampled($this-&gt;thpic, $this-&gt;tempic, 0, 0, 0 ,0, $this-&gt;thwidth, $this-&gt;thheight, $this-&gt;width, $this-&gt;height);
}

function save($filename, $type){
    switch($type){
        case 'jpg':
        case 'jpeg':
            imagejpeg($this-&gt;thpic, $filename);
            break;
        case 'png':
            imagepng($$this-&gt;thpic, $filename);
            break;
        case 'gif':
            imagegif($$this-&gt;thpic, $filename);
            break;
        default:
            echo '暂不支持您所选择的格式';
    }
}
</code></pre>

<p>}
?&gt;[/php]</p>
]]></content>
        </item>
        
        <item>
            <title>PHP分页函数代码分享</title>
            <link>https://qxzzf.com/posts/php%E5%88%86%E9%A1%B5%E5%87%BD%E6%95%B0%E4%BB%A3%E7%A0%81%E5%88%86%E4%BA%AB/</link>
            <pubDate>Sun, 05 May 2013 15:50:01 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/php%E5%88%86%E9%A1%B5%E5%87%BD%E6%95%B0%E4%BB%A3%E7%A0%81%E5%88%86%E4%BA%AB/</guid>
            <description>分页是经常会用到的一个模块，网上的分页函数和分页类的代码都相当多。为了能让分页函数的代码通用性更强，我自改了一个分页函数分享给大家。 本代码中不包含样式，如果需要对应的CSS样式的话，可以参考 http://www.oschina.net/code/snippet_4873_3810 [php]
//$count为总条目数，$page为当前页码，$page_size为每页显示条目数
function show_page($count,$page,$page_size) { $page_count = ceil($count/$page_size); //计算得出总页数
$init=1; $page_len=7; $max_p=$page_count; $pages=$page_count; //判断当前页码 $page=(empty($page)||$page&amp;lt;0)?1:$page; //获取当前页url $url = $_SERVER[&#39;REQUEST_URI&#39;]; //去掉url中原先的page参数以便加入新的page参数 $parsedurl=parse_url($url); $url_query = isset($parsedurl[&#39;query&#39;]) ? $parsedurl[&#39;query&#39;]:&#39;&#39;; if($url_query != &#39;&#39;){ $url_query = preg_replace(&amp;quot;/(^|&amp;amp;)page=$page/&amp;quot;,&#39;&#39;,$url_query); $url = str_replace($parsedurl[&#39;query&#39;],$url_query,$url); if($url_query != &#39;&#39;){ $url .= &#39;&amp;amp;&#39;; } } else { $url .= &#39;?&#39;; } //分页功能代码 $page_len = ($page_len%2)?$page_len:$page_len+1; //页码个数 $pageoffset = ($page_len-1)/2; //页码个数左右偏移量 $navs=&#39;&#39;; if($pages != 0){ if($page!=1){ $navs.=&amp;quot;&amp;lt;a href=\&amp;quot;&amp;quot;.$url.&amp;quot;page=1\&amp;quot;&amp;gt;首页&amp;lt;/a&amp;gt; &amp;quot;; //第一页 $navs.</description>
            <content type="html"><![CDATA[<p>  分页是经常会用到的一个模块，网上的分页函数和分页类的代码都相当多。为了能让分页函数的代码通用性更强，我自改了一个分页函数分享给大家。
   本代码中不包含样式，如果需要对应的CSS样式的话，可以参考 <a href="http://www.oschina.net/code/snippet_4873_3810" target="_blank">http://www.oschina.net/code/snippet_4873_3810</a>
 
[php]<br />
//$count为总条目数，$page为当前页码，$page_size为每页显示条目数<br />
function show_page($count,$page,$page_size)
{
    $page_count  = ceil($count/$page_size);  //计算得出总页数</p>

<pre><code>$init=1;
$page_len=7;
$max_p=$page_count;
$pages=$page_count;

//判断当前页码
$page=(empty($page)||$page&lt;0)?1:$page;
//获取当前页url
$url = $_SERVER['REQUEST_URI'];
//去掉url中原先的page参数以便加入新的page参数
$parsedurl=parse_url($url);
$url_query = isset($parsedurl['query']) ? $parsedurl['query']:'';
if($url_query != ''){
    $url_query = preg_replace(&quot;/(^|&amp;)page=$page/&quot;,'',$url_query);
    $url = str_replace($parsedurl['query'],$url_query,$url);
    if($url_query != ''){
        $url .= '&amp;';
    }
} else {
    $url .= '?';
}

//分页功能代码
$page_len = ($page_len%2)?$page_len:$page_len+1;  //页码个数
$pageoffset = ($page_len-1)/2;  //页码个数左右偏移量

$navs='';
if($pages != 0){
    if($page!=1){
        $navs.=&quot;&lt;a href=\&quot;&quot;.$url.&quot;page=1\&quot;&gt;首页&lt;/a&gt; &quot;;        //第一页
        $navs.=&quot;&lt;a href=\&quot;&quot;.$url.&quot;page=&quot;.($page-1).&quot;\&quot;&gt;上页&lt;/a&gt;&quot;; //上一页
    } else {
        $navs .= &quot;&lt;span class='disabled'&gt;首页&lt;/span&gt;&quot;;
        $navs .= &quot;&lt;span class='disabled'&gt;上页&lt;/span&gt;&quot;;
    }
    if($pages&gt;$page_len)
    {
        //如果当前页小于等于左偏移
        if($page&lt;=$pageoffset){
            $init=1;
            $max_p = $page_len;
        }
        else  //如果当前页大于左偏移
        {    
            //如果当前页码右偏移超出最大分页数
            if($page+$pageoffset&gt;=$pages+1){
                $init = $pages-$page_len+1;
            }
            else
            {
                //左右偏移都存在时的计算
                $init = $page-$pageoffset;
                $max_p = $page+$pageoffset;
            }
        }
    }
    for($i=$init;$i&lt;=$max_p;$i++)
    {
        if($i==$page){$navs.=&quot;&lt;span class='current'&gt;&quot;.$i.'&lt;/span&gt;';} 
        else {$navs.=&quot; &lt;a href=\&quot;&quot;.$url.&quot;page=&quot;.$i.&quot;\&quot;&gt;&quot;.$i.&quot;&lt;/a&gt;&quot;;}
    }
    if($page!=$pages)
    {
        $navs.=&quot; &lt;a href=\&quot;&quot;.$url.&quot;page=&quot;.($page+1).&quot;\&quot;&gt;下页&lt;/a&gt; &quot;;//下一页
        $navs.=&quot;&lt;a href=\&quot;&quot;.$url.&quot;page=&quot;.$pages.&quot;\&quot;&gt;末页&lt;/a&gt;&quot;;    //最后一页
    } else {
        $navs .= &quot;&lt;span class='disabled'&gt;下页&lt;/span&gt;&quot;;
        $navs .= &quot;&lt;span class='disabled'&gt;末页&lt;/span&gt;&quot;;
    }
    echo &quot;$navs&quot;;
</code></pre>

<p>}
}   [/php]</p>
]]></content>
        </item>
        
        <item>
            <title>抓取百度贴吧指定相册图片到本地的代码</title>
            <link>https://qxzzf.com/posts/%E6%8A%93%E5%8F%96%E7%99%BE%E5%BA%A6%E8%B4%B4%E5%90%A7%E6%8C%87%E5%AE%9A%E7%9B%B8%E5%86%8C%E5%9B%BE%E7%89%87%E5%88%B0%E6%9C%AC%E5%9C%B0%E7%9A%84%E4%BB%A3%E7%A0%81/</link>
            <pubDate>Sat, 04 May 2013 14:38:53 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E6%8A%93%E5%8F%96%E7%99%BE%E5%BA%A6%E8%B4%B4%E5%90%A7%E6%8C%87%E5%AE%9A%E7%9B%B8%E5%86%8C%E5%9B%BE%E7%89%87%E5%88%B0%E6%9C%AC%E5%9C%B0%E7%9A%84%E4%BB%A3%E7%A0%81/</guid>
            <description>前一段时间看见有网友分享的php抓取百度贴吧图片的代码http://www.oschina.net/code/snippet_1023084_19836，这段代码对我现在在写的一个页面帮助很大。 不过这段代码中是用正则匹配出json数据中的图片id的，感觉效率不如直接解析json数据来的高，于是自己修改了一下，分享给大家。 [php]&amp;lt;?php @set_time_limit(10); //贴吧名称 $tbname = &amp;ldquo;mugen&amp;rdquo;; //相册ID $tid = &amp;ldquo;2134897418&amp;rdquo;; //图册页url模版 $galleryurltpl = &amp;ldquo;http://tieba.baidu.com/photo/bw/picture/guide?kw=%s&amp;amp;tid=%s&amp;quot;; //本地的目录 $savepath = &amp;ldquo;R:/images/&amp;ldquo;; //帖子子文件夹 $filedir = $savepath.$tid; //图片文件 $filenametpl = $filedir.&amp;ldquo;/%s.jpg&amp;rdquo;; //图册页url $galleryurl = sprintf($galleryurltpl, $tbname, $tid);
//返回的json数据 $retjson = file_get_contents($galleryurl); $retarray = json_decode($retjson, true); //图片列表 $piclist = $retarray[&amp;lsquo;data&amp;rsquo;][&amp;lsquo;pic_list&amp;rsquo;];
//目录是否存在 if(!is_dir($filedir)) mkdir($filedir); foreach($piclist as $pic){ $pic_id = $pic[&amp;lsquo;img&amp;rsquo;][&amp;lsquo;original&amp;rsquo;][&amp;lsquo;id&amp;rsquo;]; $url = &amp;ldquo;http://imgsrc.baidu.com/forum/pic/item/&amp;quot;.$pic_id.&amp;quot;.jpg&amp;quot;; $filename = sprintf($filenametpl, $pic_id); //下载图片 $imagebin = file_get_contents($url);
//保存图片 file_put_contents($filename,$imagebin); } ?</description>
            <content type="html"><![CDATA[<p>   前一段时间看见有网友分享的php抓取百度贴吧图片的代码<a href="http://www.oschina.net/code/snippet_1023084_19836，这段代码对我现在在写的一个页面帮助很大。" target="_blank">http://www.oschina.net/code/snippet_1023084_19836，这段代码对我现在在写的一个页面帮助很大。</a>
   不过这段代码中是用正则匹配出json数据中的图片id的，感觉效率不如直接解析json数据来的高，于是自己修改了一下，分享给大家。
[php]&lt;?php
@set_time_limit(10);
//贴吧名称
$tbname = &ldquo;mugen&rdquo;;
//相册ID
$tid = &ldquo;2134897418&rdquo;;
//图册页url模版
$galleryurltpl = &ldquo;<a href="http://tieba.baidu.com/photo/bw/picture/guide?kw=%s&amp;tid=%s&quot;" target="_blank">http://tieba.baidu.com/photo/bw/picture/guide?kw=%s&amp;tid=%s&quot;</a>;
//本地的目录
$savepath = &ldquo;R:/images/&ldquo;;
//帖子子文件夹
$filedir = $savepath.$tid;
//图片文件
$filenametpl = $filedir.&ldquo;/%s.jpg&rdquo;;
//图册页url
$galleryurl = sprintf($galleryurltpl, $tbname, $tid);</p>

<p>//返回的json数据
$retjson = file_get_contents($galleryurl);
$retarray = json_decode($retjson, true);
//图片列表
$piclist = $retarray[&lsquo;data&rsquo;][&lsquo;pic_list&rsquo;];</p>

<p>//目录是否存在
if(!is_dir($filedir))
    mkdir($filedir);
foreach($piclist as $pic){
    $pic_id = $pic[&lsquo;img&rsquo;][&lsquo;original&rsquo;][&lsquo;id&rsquo;];
    $url = &ldquo;<a href="http://imgsrc.baidu.com/forum/pic/item/&quot;.$pic_id.&quot;.jpg&quot;" target="_blank">http://imgsrc.baidu.com/forum/pic/item/&quot;.$pic_id.&quot;.jpg&quot;</a>;
    $filename = sprintf($filenametpl, $pic_id);
    //下载图片
    $imagebin = file_get_contents($url);<br />
    //保存图片
    file_put_contents($filename,$imagebin);
}
?&gt;[/php]</p>
]]></content>
        </item>
        
        <item>
            <title>PHP按最大宽高缩略图片函数代码分享</title>
            <link>https://qxzzf.com/posts/php%E6%8C%89%E6%9C%80%E5%A4%A7%E5%AE%BD%E9%AB%98%E7%BC%A9%E7%95%A5%E5%9B%BE%E7%89%87%E5%87%BD%E6%95%B0%E4%BB%A3%E7%A0%81%E5%88%86%E4%BA%AB/</link>
            <pubDate>Fri, 03 May 2013 21:51:02 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/php%E6%8C%89%E6%9C%80%E5%A4%A7%E5%AE%BD%E9%AB%98%E7%BC%A9%E7%95%A5%E5%9B%BE%E7%89%87%E5%87%BD%E6%95%B0%E4%BB%A3%E7%A0%81%E5%88%86%E4%BA%AB/</guid>
            <description>很简单的按照最大宽高来缩略图片的代码，方便新手和懒得自己写的人。 [php]function thumb($imagefile, $maxwidth, $maxheight) { $dim = getimagesize($imagefile); $width = $dim[0]; //原图宽度 $height = $dim[1]; //原图高度 $original = imagecreatefromjpeg($imagefile);
$thcrown = $maxwidth/$maxheight; //缩略图最大宽度与最大高度比 $crown = $width/$height; //原图宽高比 if($crown/$thcrown &amp;gt;= 1){ $thumbWidth = $maxwidth; $thumbHeight = $maxwidth/$crown; } else { $thumbHeight = $maxheight; $thumbWidth = $maxheight*$crown; } $thumb = imagecreatetruecolor($thumbWidth, $thumbHeight); imagecopyresampled($thumb, $original, 0, 0, 0, 0, $thumbWidth, $thumbHeight, $width, $height); return $thumb;  }[/php]</description>
            <content type="html"><![CDATA[<p>很简单的按照最大宽高来缩略图片的代码，方便新手和懒得自己写的人。
[php]function thumb($imagefile, $maxwidth, $maxheight) {
    $dim = getimagesize($imagefile);
    $width = $dim[0];   //原图宽度
    $height = $dim[1];  //原图高度
    $original = imagecreatefromjpeg($imagefile);</p>

<pre><code>$thcrown = $maxwidth/$maxheight;    //缩略图最大宽度与最大高度比
$crown = $width/$height;    //原图宽高比
if($crown/$thcrown &gt;= 1){
    $thumbWidth = $maxwidth;
    $thumbHeight = $maxwidth/$crown;
} else {
    $thumbHeight = $maxheight;
    $thumbWidth = $maxheight*$crown;
}

$thumb = imagecreatetruecolor($thumbWidth, $thumbHeight);
imagecopyresampled($thumb, $original, 0, 0, 0, 0, $thumbWidth, $thumbHeight, $width, $height);
return $thumb;
</code></pre>

<p>}[/php]</p>
]]></content>
        </item>
        
        <item>
            <title>新手学WEB开发杂记（七）——自动发布及回复微博的实现</title>
            <link>https://qxzzf.com/posts/%E6%96%B0%E6%89%8B%E5%AD%A6web%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0%E4%B8%83%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83%E5%8F%8A%E5%9B%9E%E5%A4%8D%E5%BE%AE%E5%8D%9A%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
            <pubDate>Thu, 25 Apr 2013 21:04:51 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E6%96%B0%E6%89%8B%E5%AD%A6web%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0%E4%B8%83%E8%87%AA%E5%8A%A8%E5%8F%91%E5%B8%83%E5%8F%8A%E5%9B%9E%E5%A4%8D%E5%BE%AE%E5%8D%9A%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
            <description> 之前一直想写一个自动发博机，可以每隔一段时间自动发布一条微博。但是由于新浪微博API的使用需要access_token，而该token的获取需登录进行授权，而模拟登录的代码一直没想出来怎么写，计划就搁浅了。 后来在sae开发者社区提出该问题后，有人说开发者自己的账号对自己创建的应用的授权是没有过期时间限制的，并向我推荐了这篇文章 http://cloudbbs.org/forum.php?mod=viewthread&amp;amp;tid=13391  该文章详细地讲解了如何从零开始创建一款带有回粉功能的求天气应用，即：用户发微博 城市名@求天气 ，一分钟内@求天气 微博号会自动给用户评论他所查询的城市天气。并且提供了源码的下载，推荐有兴趣创建一个自动发博机的初级开发者看一看。 需要注意的一点是，该代码中的memcache缓存时间设置为600秒，若你设置的cron大于600秒则需要将缓存时间改大，否则会发生重复评论的问题。 这是我写的自动发博机微博账号：http://weibo.com/u/3270877203 （兵库北小姐，我是香菜厨发自真心）。 </description>
            <content type="html"><![CDATA[<p>    之前一直想写一个自动发博机，可以每隔一段时间自动发布一条微博。但是由于新浪微博API的使用需要access_token，而该token的获取需登录进行授权，而模拟登录的代码一直没想出来怎么写，计划就搁浅了。
 
    后来在sae开发者社区提出该问题后，有人说开发者自己的账号对自己创建的应用的授权是没有过期时间限制的，并向我推荐了这篇文章 <a href="http://cloudbbs.org/forum.php?mod=viewthread&amp;tid=13391 " target="_blank">http://cloudbbs.org/forum.php?mod=viewthread&amp;tid=13391 </a> 该文章详细地讲解了如何从零开始创建一款带有回粉功能的求天气应用，即：用户发微博 城市名@求天气 ，一分钟内@求天气 微博号会自动给用户评论他所查询的城市天气。并且提供了源码的下载，推荐有兴趣创建一个自动发博机的初级开发者看一看。
    需要注意的一点是，该代码中的memcache缓存时间设置为600秒，若你设置的cron大于600秒则需要将缓存时间改大，否则会发生重复评论的问题。
 
    这是我写的自动发博机微博账号：<a href="http://weibo.com/u/3270877203 （兵库北小姐，我是香菜厨发自真心）。" target="_blank">http://weibo.com/u/3270877203 （兵库北小姐，我是香菜厨发自真心）。</a>
 
 </p>
]]></content>
        </item>
        
        <item>
            <title>新手学WEB开发杂记（六）——透明边框的实现</title>
            <link>https://qxzzf.com/posts/%E6%96%B0%E6%89%8B%E5%AD%A6web%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0%E5%85%AD%E9%80%8F%E6%98%8E%E8%BE%B9%E6%A1%86%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
            <pubDate>Wed, 24 Apr 2013 19:59:00 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E6%96%B0%E6%89%8B%E5%AD%A6web%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0%E5%85%AD%E9%80%8F%E6%98%8E%E8%BE%B9%E6%A1%86%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
            <description> 现在网页布局中使用弹出层的十分多，jquery弹出层插件也一抓一大把，其中一部分弹出层有漂亮的透明边框，而透明边框的实现方法各不相同，主要有一下几类： 一是将每一边的边框作为一个div来处理，设置背景色和透明度，一种方便些，直接在弹出层下方设置一个比弹出层大一圈的div，设置成透明。这两种都要添加额外的div和写相当多的css。 实际上在css3中有一种方法是最简单的，即#lightbox { background: white; border: 20px solid rgba(0,0,0,0.3); } ， 但是这样写有一个问题，即弹出层背景色会一直扩散到边框上，所以在css中需加一条 background-clip: padding-box;  详见此文：http://www.yangzblog.com/DIV-CSS/transparentBorder.html  </description>
            <content type="html"><![CDATA[<p>  现在网页布局中使用弹出层的十分多，jquery弹出层插件也一抓一大把，其中一部分弹出层有漂亮的透明边框，而透明边框的实现方法各不相同，主要有一下几类：
  一是将每一边的边框作为一个div来处理，设置背景色和透明度，一种方便些，直接在弹出层下方设置一个比弹出层大一圈的div，设置成透明。这两种都要添加额外的div和写相当多的css。
  实际上在css3中有一种方法是最简单的，即<code>#lightbox { background: white; border: 20px solid rgba(0,0,0,0.3); }</code> ， 但是这样写有一个问题，即弹出层背景色会一直扩散到边框上，所以在css中需加一条 <code>background-clip: padding-box; </code>
详见此文：<a href="http://www.yangzblog.com/DIV-CSS/transparentBorder.html " target="_blank">http://www.yangzblog.com/DIV-CSS/transparentBorder.html </a>
 
 </p>
]]></content>
        </item>
        
        <item>
            <title>新手学WEB开发杂记（五）——网页时间轴布局的实现</title>
            <link>https://qxzzf.com/posts/%E6%96%B0%E6%89%8B%E5%AD%A6web%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0%E4%BA%94%E7%BD%91%E9%A1%B5%E6%97%B6%E9%97%B4%E8%BD%B4%E5%B8%83%E5%B1%80%E7%9A%84%E5%AE%9E%E7%8E%B0/</link>
            <pubDate>Mon, 22 Apr 2013 21:56:06 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E6%96%B0%E6%89%8B%E5%AD%A6web%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0%E4%BA%94%E7%BD%91%E9%A1%B5%E6%97%B6%E9%97%B4%E8%BD%B4%E5%B8%83%E5%B1%80%E7%9A%84%E5%AE%9E%E7%8E%B0/</guid>
            <description> 近年来各种新式的网页布局层出不穷，很多美观的布局格式都开始渐渐流行起来，想要设计一个美观实用又迎合潮流的网站就必须对这些布局有所了解。 我这几天在写的一个网页在设计时觉得采用时间轴布局比较合适，但苦于一直没有找到比较仔细的时间轴布局教程，所以本想放弃，谁知得来全不费工夫，在w3cplus上找到了一篇详细介绍实现时间轴布局的文章：http://www.w3cplus.com/jquery/facebook-timeline-design-using-jquery  在读完文章之后发现，实际上时间轴布局还是属于瀑布流布局的，只不过它是一种特殊的瀑布流，即双栏绝对定位瀑布流，布局时添加时间线相关部分即可。 </description>
            <content type="html"><![CDATA[<p>   近年来各种新式的网页布局层出不穷，很多美观的布局格式都开始渐渐流行起来，想要设计一个美观实用又迎合潮流的网站就必须对这些布局有所了解。
  我这几天在写的一个网页在设计时觉得采用时间轴布局比较合适，但苦于一直没有找到比较仔细的时间轴布局教程，所以本想放弃，谁知得来全不费工夫，在w3cplus上找到了一篇详细介绍实现时间轴布局的文章：<a href="http://www.w3cplus.com/jquery/facebook-timeline-design-using-jquery " target="_blank">http://www.w3cplus.com/jquery/facebook-timeline-design-using-jquery </a>
  在读完文章之后发现，实际上时间轴布局还是属于瀑布流布局的，只不过它是一种特殊的瀑布流，即双栏绝对定位瀑布流，布局时添加时间线相关部分即可。
 
 </p>
]]></content>
        </item>
        
        <item>
            <title>PHP解析雅虎天气API代码分享</title>
            <link>https://qxzzf.com/posts/php%E8%A7%A3%E6%9E%90%E9%9B%85%E8%99%8E%E5%A4%A9%E6%B0%94api%E4%BB%A3%E7%A0%81%E5%88%86%E4%BA%AB/</link>
            <pubDate>Fri, 19 Apr 2013 21:06:44 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/php%E8%A7%A3%E6%9E%90%E9%9B%85%E8%99%8E%E5%A4%A9%E6%B0%94api%E4%BB%A3%E7%A0%81%E5%88%86%E4%BA%AB/</guid>
            <description>雅虎天气API地址： http://weather.yahooapis.com/forecastrss 有两个可选参数w和u，其中w参数是基于WOEID的城市代码，可以在网上根据城市英文名查到，u参数是设置返回数据中的摄氏和华氏（c为摄氏，f为华氏）。 实际请求地址如：http://weather.yahooapis.com/forecastrss?w=15015432&amp;amp;u=c  返回数据为xml格式，含有命名空间，无法使用simpleXML处理，这次分享的代码就是使用XMLReader和DOMDocument来处理该数据（获取返回数据中的天气状况代码、温度及湿度值）。 首先是使用XMLReader时的代码： [php]$url = &amp;lsquo;http://weather.yahooapis.com/forecastrss?w=15015432&amp;amp;u=c&#39;; $reader = new XMLReader(); $reader-&amp;gt;open($url,&amp;lsquo;utf-8&amp;rsquo;); while($reader-&amp;gt;read()){ if($reader-&amp;gt;name == &amp;lsquo;yweather:condition&amp;rsquo;){ $code = $reader-&amp;gt;getAttribute(&amp;lsquo;code&amp;rsquo;); //获取天气代码 $temp = $reader-&amp;gt;getAttribute(&amp;lsquo;temp&amp;rsquo;); //获取温度 } if($reader-&amp;gt;name == &amp;lsquo;yweather:atmosphere&amp;rsquo;){ $humi = $reader-&amp;gt;getAttribute(&amp;lsquo;humidity&amp;rsquo;); //获取湿度 } }[/php]
 然后是使用DOMDocument处理的代码： [php]$url = &amp;lsquo;http://weather.yahooapis.com/forecastrss?w=15015432&amp;amp;u=c&#39;; $yweather = &amp;ldquo;http://xml.weather.yahoo.com/ns/rss/1.0&amp;quot;; //命名空间 $res = new DOMDocument(); $res-&amp;gt;load($url);
$node = $res-&amp;gt;getElementsByTagNameNS($yweather, &amp;lsquo;atmosphere&amp;rsquo;); $humi = $node-&amp;gt;item(0)-&amp;gt;attributes-&amp;gt;item(0)-&amp;gt;nodeValue; //获取湿度 $node = $res-&amp;gt;getElementsByTagNameNS($yweather, &amp;lsquo;condition&amp;rsquo;); $code = $node-&amp;gt;item(0)-&amp;gt;attributes-&amp;gt;item(1)-&amp;gt;nodeValue; //获取天气代码 $temp = $node-&amp;gt;item(0)-&amp;gt;attributes-&amp;gt;item(2)-&amp;gt;nodeValue; //获取温度[/php] 最后我们要将数字格式的天气代码转换成相应的中文： [php]function code2char($code){ switch($code){ case 0: return &amp;lsquo;龙卷风&amp;rsquo;; case 1: return &amp;lsquo;热带风暴&amp;rsquo;; case 2: return &amp;lsquo;暴风&amp;rsquo;; case 3: return &amp;lsquo;大雷雨&amp;rsquo;; case 4: return &amp;lsquo;雷阵雨&amp;rsquo;; case 5: return &amp;lsquo;雨夹雪&amp;rsquo;; case 6: return &amp;lsquo;雨夹雹&amp;rsquo;; case 7: return &amp;lsquo;雪夹雹&amp;rsquo;; case 8: return &amp;lsquo;冻雾雨&amp;rsquo;; case 9: return &amp;lsquo;细雨&amp;rsquo;; case 10: return &amp;lsquo;冻雨&amp;rsquo;; case 11: return &amp;lsquo;阵雨&amp;rsquo;; case 12: return &amp;lsquo;阵雨&amp;rsquo;; case 13: return &amp;lsquo;阵雪&amp;rsquo;; case 14: return &amp;lsquo;小阵雪&amp;rsquo;; case 15: return &amp;lsquo;高吹雪&amp;rsquo;; case 16: return &amp;lsquo;雪&amp;rsquo;; case 17: return &amp;lsquo;冰雹&amp;rsquo;; case 18: return &amp;lsquo;雨淞&amp;rsquo;; case 19: return &amp;lsquo;粉尘&amp;rsquo;; case 20: return &amp;lsquo;雾&amp;rsquo;; case 21: return &amp;lsquo;薄雾&amp;rsquo;; case 22: return &amp;lsquo;烟雾&amp;rsquo;; case 23: return &amp;lsquo;大风&amp;rsquo;; case 24: return &amp;lsquo;风&amp;rsquo;; case 25: return &amp;lsquo;冷&amp;rsquo;; case 26: return &amp;lsquo;阴&amp;rsquo;; case 27: return &amp;lsquo;多云&amp;rsquo;; case 28: return &amp;lsquo;多云&amp;rsquo;; case 29: return &amp;lsquo;局部多云&amp;rsquo;; case 30: return &amp;lsquo;局部多云&amp;rsquo;; case 31: return &amp;lsquo;晴&amp;rsquo;; case 32: return &amp;lsquo;晴&amp;rsquo;; case 33: return &amp;lsquo;转晴&amp;rsquo;; case 34: return &amp;lsquo;转晴&amp;rsquo;; case 35: return &amp;lsquo;雨夹冰雹&amp;rsquo;; case 36: return &amp;lsquo;热&amp;rsquo;; case 37: return &amp;lsquo;局部雷雨&amp;rsquo;; case 38: return &amp;lsquo;偶有雷雨&amp;rsquo;; case 39: return &amp;lsquo;偶有雷雨&amp;rsquo;; case 40: return &amp;lsquo;偶有阵雨&amp;rsquo;; case 41: return &amp;lsquo;大雪&amp;rsquo;; case 42: return &amp;lsquo;零星阵雪&amp;rsquo;; case 43: return &amp;lsquo;大雪&amp;rsquo;; case 44: return &amp;lsquo;局部多云&amp;rsquo;; case 45: return &amp;lsquo;雷阵雨&amp;rsquo;; case 46: return &amp;lsquo;阵雪&amp;rsquo;; case 47: return &amp;lsquo;局部雷阵雨&amp;rsquo;; default: return &amp;lsquo;水深火热&amp;rsquo;; }[/php]</description>
            <content type="html"><![CDATA[<p>    雅虎天气API地址： <a href="http://weather.yahooapis.com/forecastrss" target="_blank">http://weather.yahooapis.com/forecastrss</a>
    有两个可选参数w和u，其中w参数是基于WOEID的城市代码，可以在网上根据城市英文名查到，u参数是设置返回数据中的摄氏和华氏（c为摄氏，f为华氏）。
    实际请求地址如：<a href="http://weather.yahooapis.com/forecastrss?w=15015432&amp;u=c " target="_blank">http://weather.yahooapis.com/forecastrss?w=15015432&amp;u=c </a>
    返回数据为xml格式，含有命名空间，无法使用simpleXML处理，这次分享的代码就是使用XMLReader和DOMDocument来处理该数据（获取返回数据中的天气状况代码、温度及湿度值）。
    首先是使用XMLReader时的代码：
[php]$url = &lsquo;<a href="http://weather.yahooapis.com/forecastrss?w=15015432&amp;u=c'" target="_blank">http://weather.yahooapis.com/forecastrss?w=15015432&amp;u=c'</a>;
$reader = new XMLReader();
$reader-&gt;open($url,&lsquo;utf-8&rsquo;);
while($reader-&gt;read()){
    if($reader-&gt;name == &lsquo;yweather:condition&rsquo;){
        $code = $reader-&gt;getAttribute(&lsquo;code&rsquo;);  //获取天气代码
        $temp = $reader-&gt;getAttribute(&lsquo;temp&rsquo;);  //获取温度
    }
    if($reader-&gt;name == &lsquo;yweather:atmosphere&rsquo;){
        $humi = $reader-&gt;getAttribute(&lsquo;humidity&rsquo;);  //获取湿度
    }
}[/php]</p>

<p> 然后是使用DOMDocument处理的代码：
[php]$url = &lsquo;<a href="http://weather.yahooapis.com/forecastrss?w=15015432&amp;u=c'" target="_blank">http://weather.yahooapis.com/forecastrss?w=15015432&amp;u=c'</a>;
$yweather = &ldquo;<a href="http://xml.weather.yahoo.com/ns/rss/1.0&quot;" target="_blank">http://xml.weather.yahoo.com/ns/rss/1.0&quot;</a>;  //命名空间
$res = new DOMDocument();
$res-&gt;load($url);</p>

<p>$node = $res-&gt;getElementsByTagNameNS($yweather, &lsquo;atmosphere&rsquo;);
$humi = $node-&gt;item(0)-&gt;attributes-&gt;item(0)-&gt;nodeValue;     //获取湿度
$node = $res-&gt;getElementsByTagNameNS($yweather, &lsquo;condition&rsquo;);
$code = $node-&gt;item(0)-&gt;attributes-&gt;item(1)-&gt;nodeValue;     //获取天气代码
$temp = $node-&gt;item(0)-&gt;attributes-&gt;item(2)-&gt;nodeValue;     //获取温度[/php]
 最后我们要将数字格式的天气代码转换成相应的中文：
[php]function code2char($code){
    switch($code){
        case 0:
            return &lsquo;龙卷风&rsquo;;
        case 1:
            return &lsquo;热带风暴&rsquo;;
        case 2:
            return &lsquo;暴风&rsquo;;
        case 3:
            return &lsquo;大雷雨&rsquo;;
        case 4:
            return &lsquo;雷阵雨&rsquo;;
        case 5:
            return &lsquo;雨夹雪&rsquo;;
        case 6:
            return &lsquo;雨夹雹&rsquo;;
        case 7:
            return &lsquo;雪夹雹&rsquo;;
        case 8:
            return &lsquo;冻雾雨&rsquo;;
        case 9:
            return &lsquo;细雨&rsquo;;
        case 10:
            return &lsquo;冻雨&rsquo;;
        case 11:
            return &lsquo;阵雨&rsquo;;
        case 12:
            return &lsquo;阵雨&rsquo;;
        case 13:
            return &lsquo;阵雪&rsquo;;
        case 14:
            return &lsquo;小阵雪&rsquo;;
        case 15:
            return &lsquo;高吹雪&rsquo;;
        case 16:
            return &lsquo;雪&rsquo;;
        case 17:
            return &lsquo;冰雹&rsquo;;
        case 18:
            return &lsquo;雨淞&rsquo;;
        case 19:
            return &lsquo;粉尘&rsquo;;
        case 20:
            return &lsquo;雾&rsquo;;
        case 21:
            return &lsquo;薄雾&rsquo;;
        case 22:
            return &lsquo;烟雾&rsquo;;
        case 23:
            return &lsquo;大风&rsquo;;
        case 24:
            return &lsquo;风&rsquo;;
        case 25:
            return &lsquo;冷&rsquo;;
        case 26:
            return &lsquo;阴&rsquo;;
        case 27:
            return &lsquo;多云&rsquo;;
        case 28:
            return &lsquo;多云&rsquo;;
        case 29:
            return &lsquo;局部多云&rsquo;;
        case 30:
            return &lsquo;局部多云&rsquo;;
        case 31:
            return &lsquo;晴&rsquo;;
        case 32:
            return &lsquo;晴&rsquo;;
        case 33:
            return &lsquo;转晴&rsquo;;
        case 34:
            return &lsquo;转晴&rsquo;;
        case 35:
            return &lsquo;雨夹冰雹&rsquo;;
        case 36:
            return &lsquo;热&rsquo;;
        case 37:
            return &lsquo;局部雷雨&rsquo;;
        case 38:
            return &lsquo;偶有雷雨&rsquo;;
        case 39:
            return &lsquo;偶有雷雨&rsquo;;
        case 40:
            return &lsquo;偶有阵雨&rsquo;;
        case 41:
            return &lsquo;大雪&rsquo;;
        case 42:
            return &lsquo;零星阵雪&rsquo;;
        case 43:
            return &lsquo;大雪&rsquo;;
        case 44:
            return &lsquo;局部多云&rsquo;;
        case 45:
            return &lsquo;雷阵雨&rsquo;;
        case 46:
            return &lsquo;阵雪&rsquo;;
        case 47:
            return &lsquo;局部雷阵雨&rsquo;;
        default:
            return &lsquo;水深火热&rsquo;;
    }[/php]</p>
]]></content>
        </item>
        
        <item>
            <title>电脑拆机清灰记录(emachines D730)</title>
            <link>https://qxzzf.com/posts/%E7%94%B5%E8%84%91%E6%8B%86%E6%9C%BA%E6%B8%85%E7%81%B0%E8%AE%B0%E5%BD%95emachines-d730/</link>
            <pubDate>Thu, 18 Apr 2013 22:20:54 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E7%94%B5%E8%84%91%E6%8B%86%E6%9C%BA%E6%B8%85%E7%81%B0%E8%AE%B0%E5%BD%95emachines-d730/</guid>
            <description>本本用了有两年多了，最近连在网上看个视频都卡得要死，机身温度十分高，估摸着散热口被灰堵住了。虽然之前就一直想拆，但苦于键盘拆起来比较麻烦，本本的型号还比较少见(emachines D730)，根本找不到拆机教程，就一直拖着，但现在看个视频死好几次机终于让我忍不住了。 由于用的手机也比较挫，就没有拍拆机的照片，就文字回忆一下吧。 因为这个型号的键盘左右两边各有两个卡扣，而且是固定卡扣不是活动卡扣，拆起来比较麻烦，所以我直接用刀把卡扣给切了= =b。键盘拆下来后就是拆后盖，需要注意的是，把光驱拆下来后，会露出两颗原本被光驱遮住的螺丝，我因为拆的时候没经验，所以把这个地方的横条给搞段了。 还有就是硬盘是可以直接拿下来的，我一开始以为是卡住的，结果翻面的时候硬盘直接掉下来了，摔到地上，吓了我一大跳，还以为会坏掉，好在有惊无险，以后一定要注意备份数据了。 接下来拆主板什么的就很容易了，最后把风扇拆下来后发现散热口积了一层近两毫米厚的絮状灰尘，堵得严严实实，风扇叶片上面也都厚厚的一层灰。真是相当严重呐，怪不得平时只要有20%左右的cpu占用率，电脑就卡的不行。 除灰后顺利装好开机了，开机用了三分钟，看来硬盘摔了一下果然是有影响的，不过第二次开机就快了很多，使用过程中也没发现什么明显的问题，硬盘大概也不是想象中那么脆弱吧。去B站开了几个视频看了一下，本本终于不烫了，连散热口出来的风也不热，看来清灰的效果果然不错啊。终于不用再忍受令人崩溃的死机了，爽！</description>
            <content type="html"><![CDATA[<p>    本本用了有两年多了，最近连在网上看个视频都卡得要死，机身温度十分高，估摸着散热口被灰堵住了。虽然之前就一直想拆，但苦于键盘拆起来比较麻烦，本本的型号还比较少见(emachines D730)，根本找不到拆机教程，就一直拖着，但现在看个视频死好几次机终于让我忍不住了。
    由于用的手机也比较挫，就没有拍拆机的照片，就文字回忆一下吧。
    因为这个型号的键盘左右两边各有两个卡扣，而且是固定卡扣不是活动卡扣，拆起来比较麻烦，所以我直接用刀把卡扣给切了= =b。键盘拆下来后就是拆后盖，需要注意的是，把光驱拆下来后，会露出两颗原本被光驱遮住的螺丝，我因为拆的时候没经验，所以把这个地方的横条给搞段了。
    还有就是硬盘是可以直接拿下来的，我一开始以为是卡住的，结果翻面的时候硬盘直接掉下来了，摔到地上，吓了我一大跳，还以为会坏掉，好在有惊无险，以后一定要注意备份数据了。
    接下来拆主板什么的就很容易了，最后把风扇拆下来后发现散热口积了一层近两毫米厚的絮状灰尘，堵得严严实实，风扇叶片上面也都厚厚的一层灰。真是相当严重呐，怪不得平时只要有20%左右的cpu占用率，电脑就卡的不行。
    除灰后顺利装好开机了，开机用了三分钟，看来硬盘摔了一下果然是有影响的，不过第二次开机就快了很多，使用过程中也没发现什么明显的问题，硬盘大概也不是想象中那么脆弱吧。去B站开了几个视频看了一下，本本终于不烫了，连散热口出来的风也不热，看来清灰的效果果然不错啊。终于不用再忍受令人崩溃的死机了，爽！</p>
]]></content>
        </item>
        
        <item>
            <title>调用新浪微博短址API代码分享</title>
            <link>https://qxzzf.com/posts/%E8%B0%83%E7%94%A8%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E7%9F%AD%E5%9D%80api%E4%BB%A3%E7%A0%81%E5%88%86%E4%BA%AB/</link>
            <pubDate>Mon, 15 Apr 2013 21:10:47 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E8%B0%83%E7%94%A8%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9A%E7%9F%AD%E5%9D%80api%E4%BB%A3%E7%A0%81%E5%88%86%E4%BA%AB/</guid>
            <description>之前的一篇博客里有提到调用新浪微博API转短址，而我发现现在不少人都有使用新浪微博短链接口的需求。这对于老手来说自然是小菜一碟，但是初学者很可能在写该代码时花不少时间，所以我就把自己 写的代码分享出来供大家参考一下。 使用前请先在新浪微博开放平台上创建应用获取APPID（但根据我的经验，未通过审核的应用的APPID调用时会发生错误，原因是权限不够，不过别担心，去百度上搜一个能用的就行了）。 PS:本代码参考自Jucelin(http://jucelin.com/)共享的旧版API调用代码，由于新版API改了不少地方，旧代码不能使用，所以本人修改后分享出来 [php]&amp;lt;?php $backurl=&amp;ldquo;&amp;rdquo;; if (isset($_GET[&amp;lsquo;type&amp;rsquo;])){ $type=$_GET[&amp;lsquo;type&amp;rsquo;]; switch (trim($type)) { case 1: if (isset($_GET[&amp;lsquo;url&amp;rsquo;])){ $backurl=shorturl(urlencode($_GET[&amp;lsquo;url&amp;rsquo;])); //注意必须经过urlencode } else{ $backurl=&amp;ldquo;error0&amp;rdquo;; } break; case 2: if (isset($_GET[&amp;lsquo;url&amp;rsquo;])){ $backurl=expandurl($_GET[&amp;lsquo;url&amp;rsquo;]); } else{ $backurl=&amp;ldquo;error1&amp;rdquo;; } break; default: $backurl=&amp;ldquo;error2&amp;rdquo;; } } echo $backurl;
function shortenSinaUrl($long_url){ $apiKey=&amp;lsquo;xxxxxxxxx&amp;rsquo;; //请替换成你的APPID $apiUrl=&amp;lsquo;https://api.weibo.com/2/short_url/shorten.json?source=&#39;.$apiKey.&#39;&amp;amp;url_long=&#39;.$long_url; $curlObj = curl_init(); curl_setopt($curlObj, CURLOPT_URL, $apiUrl); curl_setopt($curlObj, CURLOPT_RETURNTRANSFER, 1); curl_setopt($curlObj, CURLOPT_SSL_VERIFYPEER, 0); curl_setopt($curlObj, CURLOPT_HEADER, 0); curl_setopt($curlObj, CURLOPT_HTTPHEADER, array(&amp;lsquo;Content-type:application/json&amp;rsquo;)); $response = curl_exec($curlObj); curl_close($curlObj); $json = json_decode($response); return $json-&amp;gt;urls[0]-&amp;gt;url_short; }</description>
            <content type="html"><![CDATA[<p>  之前的一篇博客里有提到调用新浪微博API转短址，而我发现现在不少人都有使用新浪微博短链接口的需求。这对于老手来说自然是小菜一碟，但是初学者很可能在写该代码时花不少时间，所以我就把自己 写的代码分享出来供大家参考一下。
  使用前请先在新浪微博开放平台上创建应用获取APPID（但根据我的经验，未通过审核的应用的APPID调用时会发生错误，原因是权限不够，不过别担心，去百度上搜一个能用的就行了）。
  PS:本代码参考自Jucelin(<a href="http://jucelin.com/)共享的旧版API调用代码，由于新版API改了不少地方，旧代码不能使用，所以本人修改后分享出来" target="_blank">http://jucelin.com/)共享的旧版API调用代码，由于新版API改了不少地方，旧代码不能使用，所以本人修改后分享出来</a>
[php]&lt;?php
$backurl=&ldquo;&rdquo;;
if (isset($_GET[&lsquo;type&rsquo;])){
    $type=$_GET[&lsquo;type&rsquo;];
    switch (trim($type))
    {
    case 1:
        if (isset($_GET[&lsquo;url&rsquo;])){
            $backurl=shorturl(urlencode($_GET[&lsquo;url&rsquo;]));  //注意必须经过urlencode
        }
        else{
            $backurl=&ldquo;error0&rdquo;;
        }
        break;
    case 2:
        if (isset($_GET[&lsquo;url&rsquo;])){
            $backurl=expandurl($_GET[&lsquo;url&rsquo;]);
        }
        else{
            $backurl=&ldquo;error1&rdquo;;
        }
        break;
    default:
        $backurl=&ldquo;error2&rdquo;;
    }
}
echo $backurl;</p>

<p>function shortenSinaUrl($long_url){
    $apiKey=&lsquo;xxxxxxxxx&rsquo;;    //请替换成你的APPID
    $apiUrl=&lsquo;<a href="https://api.weibo.com/2/short_url/shorten.json?source='.$apiKey.'&amp;url_long='.$long_url" target="_blank">https://api.weibo.com/2/short_url/shorten.json?source='.$apiKey.'&amp;url_long='.$long_url</a>;
    $curlObj = curl_init();
    curl_setopt($curlObj, CURLOPT_URL, $apiUrl);
    curl_setopt($curlObj, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($curlObj, CURLOPT_SSL_VERIFYPEER, 0);
    curl_setopt($curlObj, CURLOPT_HEADER, 0);
    curl_setopt($curlObj, CURLOPT_HTTPHEADER, array(&lsquo;Content-type:application/json&rsquo;));
    $response = curl_exec($curlObj);
    curl_close($curlObj);
    $json = json_decode($response);
    return $json-&gt;urls[0]-&gt;url_short;
}</p>

<p>function expandSinaUrl($short_url){
    $apiKey=&lsquo;xxxxxxxxx&rsquo;;    //请替换成你的APPID
    $apiUrl=&lsquo;<a href="https://api.weibo.com/2/short_url/expand.json?source='.$apiKey.'&amp;url_short='.$short_url" target="_blank">https://api.weibo.com/2/short_url/expand.json?source='.$apiKey.'&amp;url_short='.$short_url</a>;
    $curlObj = curl_init();
    curl_setopt($curlObj, CURLOPT_URL, $apiUrl);
    curl_setopt($curlObj, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($curlObj, CURLOPT_SSL_VERIFYPEER, 0);
    curl_setopt($curlObj, CURLOPT_HEADER, 0);
    curl_setopt($curlObj, CURLOPT_HTTPHEADER, array(&lsquo;Content-type:application/json&rsquo;));
    $response = curl_exec($curlObj);
    curl_close($curlObj);
    $json = json_decode($response);
    return $json-&gt;urls[0]-&gt;url_long;
}</p>

<p>function shorturl($long_url){
    $apiKey=&lsquo;xxxxxxxxx&rsquo;;    //请替换成你的APPID
    $apiUrl=&lsquo;<a href="https://api.weibo.com/2/short_url/shorten.json?source='.$apiKey.'&amp;url_long='.$long_url" target="_blank">https://api.weibo.com/2/short_url/shorten.json?source='.$apiKey.'&amp;url_long='.$long_url</a>;
    $response = file_get_contents($apiUrl);
    $json = json_decode($response);
    return $json-&gt;urls[0]-&gt;url_short;
}</p>

<p>function expandurl($short_url){
    $apiKey=&lsquo;xxxxxxxxx&rsquo;;    //请替换成你的APPID
    $apiUrl=&lsquo;<a href="https://api.weibo.com/2/short_url/expand.json?source='.$apiKey.'&amp;url_short='.$short_url" target="_blank">https://api.weibo.com/2/short_url/expand.json?source='.$apiKey.'&amp;url_short='.$short_url</a>;
    $response = file_get_contents($apiUrl);
    $json = json_decode($response);
    return $json-&gt;urls[0]-&gt;url_long;
}
?&gt;[/php]</p>
]]></content>
        </item>
        
        <item>
            <title>MUGEN——打造属于自己的格斗游戏</title>
            <link>https://qxzzf.com/posts/mugen%E6%89%93%E9%80%A0%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E6%A0%BC%E6%96%97%E6%B8%B8%E6%88%8F/</link>
            <pubDate>Fri, 12 Apr 2013 22:29:26 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/mugen%E6%89%93%E9%80%A0%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E6%A0%BC%E6%96%97%E6%B8%B8%E6%88%8F/</guid>
            <description>MUGEN是什么：M.U.G.E.N是一款由美国的Elecbyte小组使用C语言与Allegro程序库开发的免费的2D格斗游戏引擎，目前M.U.G.E.N有分别在DOS、Windows和Linux等操作系统上运行的版本，而MUGEN在日文中意为无限的意思，制作者们希望通过这个平台能够创造无限格斗的可能。 全女格斗、拳皇Z等游戏均是使用MUGEN制作而成。详情请见http://baike.baidu.com/view/739063.htm Mugen相关链接： Mugen吧：http://tieba.baidu.com/f?kw=mugen 我搭建的Mugen相关信息发布平台：http://takashiki.sinaapp.com/</description>
            <content type="html"><![CDATA[<p> MUGEN是什么：M.U.G.E.N是一款由美国的Elecbyte小组使用C语言与Allegro程序库开发的免费的2D格斗游戏引擎，目前M.U.G.E.N有分别在DOS、Windows和Linux等操作系统上运行的版本，而MUGEN在日文中意为无限的意思，制作者们希望通过这个平台能够创造无限格斗的可能。         全女格斗、拳皇Z等游戏均是使用MUGEN制作而成。详情请见<a href="http://baike.baidu.com/view/739063.htm" target="_blank">http://baike.baidu.com/view/739063.htm</a>
Mugen相关链接：
Mugen吧：<a href="http://tieba.baidu.com/f?kw=mugen" target="_blank">http://tieba.baidu.com/f?kw=mugen</a>
我搭建的Mugen相关信息发布平台：<a href="http://takashiki.sinaapp.com/" target="_blank">http://takashiki.sinaapp.com/</a></p>
]]></content>
        </item>
        
        <item>
            <title>新手学WEB开发杂记（四）——新浪微博API</title>
            <link>https://qxzzf.com/posts/%E6%96%B0%E6%89%8B%E5%AD%A6web%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0%E5%9B%9B%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9Aapi/</link>
            <pubDate>Fri, 12 Apr 2013 21:06:19 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E6%96%B0%E6%89%8B%E5%AD%A6web%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0%E5%9B%9B%E6%96%B0%E6%B5%AA%E5%BE%AE%E5%8D%9Aapi/</guid>
            <description>目前已经写了两个调用API完成的程序，一个是调用新浪短链接API生成新浪微博短址的程序，一个是调用雅虎天气API获取天气后调用新浪微博API发布该天气状况的程序。 我觉得新浪微博的API设计得还是相对比较合理的，使用起来比腾讯微博API要方便不少，比如根据所调用的API的类型决定参数个数，减少了冗余参数。总的来说，新浪微博API还是比较适合新手学习使用的。 在开发第一个新浪短链的程序时，发现新浪短链API不支持https和ftp类型的地址，而腾讯微博短链API则支持，这一点比较遗憾。另外需要注意的是调用该API采用get方式，传入的网址必须经过urlencode()e函数处理才行，不然可能会出错。 调用微博API发微博等功能在新浪提供的SDK中都包含了，大家可以根据sdk里的demo自己写代码或者直接调用。 使用新浪微博API必须在新浪微博开放平台上创建应用，推荐创建网站应用或网站接入。创建成功后会得到APPID和APPKEY，在调用API时需要用到。在调用一些需要授权的API接口时，需要授权后得到acess_token，token过期时间根据应用级别不同而不同。获取token时需注意应用设置里的应用回调页面的地址必须和demo里config.php中的WB_CALLBACK_URL相同，否则会授权失败。</description>
            <content type="html"><![CDATA[<p>     目前已经写了两个调用API完成的程序，一个是调用新浪短链接API生成新浪微博短址的程序，一个是调用雅虎天气API获取天气后调用新浪微博API发布该天气状况的程序。
     我觉得新浪微博的API设计得还是相对比较合理的，使用起来比腾讯微博API要方便不少，比如根据所调用的API的类型决定参数个数，减少了冗余参数。总的来说，新浪微博API还是比较适合新手学习使用的。
     在开发第一个新浪短链的程序时，发现新浪短链API不支持https和ftp类型的地址，而腾讯微博短链API则支持，这一点比较遗憾。另外需要注意的是调用该API采用get方式，传入的网址必须经过urlencode()e函数处理才行，不然可能会出错。
     调用微博API发微博等功能在新浪提供的SDK中都包含了，大家可以根据sdk里的demo自己写代码或者直接调用。
      使用新浪微博API必须在新浪微博开放平台上创建应用，推荐创建网站应用或网站接入。创建成功后会得到APPID和APPKEY，在调用API时需要用到。在调用一些需要授权的API接口时，需要授权后得到acess_token，token过期时间根据应用级别不同而不同。获取token时需注意应用设置里的应用回调页面的地址必须和demo里config.php中的WB_CALLBACK_URL相同，否则会授权失败。</p>
]]></content>
        </item>
        
        <item>
            <title>新手学WEB开发杂记（三）——解析json和xml</title>
            <link>https://qxzzf.com/posts/%E6%96%B0%E6%89%8B%E5%AD%A6web%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0%E4%B8%89%E8%A7%A3%E6%9E%90json%E5%92%8Cxml/</link>
            <pubDate>Wed, 10 Apr 2013 19:19:33 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E6%96%B0%E6%89%8B%E5%AD%A6web%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0%E4%B8%89%E8%A7%A3%E6%9E%90json%E5%92%8Cxml/</guid>
            <description>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。XML (Extensible Markup Language, XML) 是用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。 目前JSON和XML被广泛地用在各种API的返回数据的格式化上。现在是一个API爆发的时代，各种网站都开始提供自己的API给开发者使用，所以对json和xml格式的数据解析有一定的了解是相当必要的。 PHP解析json格式数据的函数是json_decode()。 它的第一个参数为待处理的json格式字符串，第二个参数assoc默认为false即返回值为object型，若设为true则返回数组类型数据。 JSON建构有数组和对象两种结构，若为纯数组结构的json数据，则经过json_decode后返回的数据可按照数组的访问方式，即形如$arr[0]的方式访问数据。若为纯对象结构，则可通过形如$obj-&amp;gt;attr的方式进行访问。对于比较复杂的数组和对象混合的json格式数据在访问时，需按照其结构选择访问方式，如$json-&amp;gt;arr[0]-&amp;gt;attr。 PHP对XML格式的支持也相当不错，常见的几种处理XML格式的技术有:XML Expat Parser、SimpleXML、XMLReader、DOMDocument等。 其中SimpleXML是PHP5后提供的一套简单易用的xml工具集，可以把xml转换成方便处理的对象，也可以组织生成xml数据。不过它不适用于包含namespace的xml，而且要保证xml格式完整(well-formed)。 DOMDocument是PHP5后推出的DOM扩展的一部分，可用来建立或解析html/xml，目前只支持utf-8编码。它与javascript十分地相像。 XMLReader也是PHP5之后的扩展（5.1后默认安装）。它就像游标一样在文档流中移动，并在每个节点处停下来。它与simpleXML及DOMDocument的很大的不同在于，它更注重于获取XML元素的属性而非元素的值。即解析形如的XML数据选用XMLReader更方便。</description>
            <content type="html"><![CDATA[<p>JSON(JavaScript Object Notation) 是一种轻量级的数据交换格式。XML (Extensible Markup Language, XML) 是用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。
目前JSON和XML被广泛地用在各种API的返回数据的格式化上。现在是一个API爆发的时代，各种网站都开始提供自己的API给开发者使用，所以对json和xml格式的数据解析有一定的了解是相当必要的。
PHP解析json格式数据的函数是json_decode()。
它的第一个参数为待处理的json格式字符串，第二个参数assoc默认为false即返回值为object型，若设为true则返回数组类型数据。
JSON建构有数组和对象两种结构，若为纯数组结构的json数据，则经过json_decode后返回的数据可按照数组的访问方式，即形如$arr[0]的方式访问数据。若为纯对象结构，则可通过形如$obj-&gt;attr的方式进行访问。对于比较复杂的数组和对象混合的json格式数据在访问时，需按照其结构选择访问方式，如$json-&gt;arr[0]-&gt;attr。
PHP对XML格式的支持也相当不错，常见的几种处理XML格式的技术有:XML Expat Parser、SimpleXML、XMLReader、DOMDocument等。
其中SimpleXML是PHP5后提供的一套简单易用的xml工具集，可以把xml转换成方便处理的对象，也可以组织生成xml数据。不过它不适用于包含namespace的xml，而且要保证xml格式完整(well-formed)。
DOMDocument是PHP5后推出的DOM扩展的一部分，可用来建立或解析html/xml，目前只支持utf-8编码。它与javascript十分地相像。
XMLReader也是PHP5之后的扩展（5.1后默认安装）。它就像游标一样在文档流中移动，并在每个节点处停下来。它与simpleXML及DOMDocument的很大的不同在于，它更注重于获取XML元素的属性而非元素的值。即解析形如<tagname text="text"/>的XML数据选用XMLReader更方便。</p>
]]></content>
        </item>
        
        <item>
            <title>新手学WEB开发杂记（二）——utf8编码BOM头</title>
            <link>https://qxzzf.com/posts/%E6%96%B0%E6%89%8B%E5%AD%A6web%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0%E4%BA%8Cutf8%E7%BC%96%E7%A0%81bom%E5%A4%B4/</link>
            <pubDate>Tue, 09 Apr 2013 22:28:32 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E6%96%B0%E6%89%8B%E5%AD%A6web%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0%E4%BA%8Cutf8%E7%BC%96%E7%A0%81bom%E5%A4%B4/</guid>
            <description>在刚刚开始学PHP时，遇到过这样一个问题，在本地运行得好好的一段代码在SAE上则获取cookie失败，这让我百思不得其解。搞了很长时间之后也找不到到底是哪出了问题，于是我将cookie换成了session试了一下，结果本地运行也出了问题，报了这个错误：
Cannot modify header information - headers already sent by&amp;hellip;&amp;hellip;
这是十分常见的错误，原因是session_start（）前已经有了输出，但我仔细检查代码后也没发现有什么输出。在网上查了一些资料后，终于发现一个可能的原因，那就是BOM头的问题。
BOM头是在utf-8编码文件中BOM在文件头部，占用三个字节，用来标示该文件属于utf-8编码。这三个字节便是session_start()前的输出。将文件格式改成无BOM头的utf-8后，问题果然解决了，SAE上也运行成功。
至于为什么在本地环境setcookie可以成功我则一直想不通，略奇怪啊。
 </description>
            <content type="html"><![CDATA[<p>在刚刚开始学PHP时，遇到过这样一个问题，在本地运行得好好的一段代码在SAE上则获取cookie失败，这让我百思不得其解。搞了很长时间之后也找不到到底是哪出了问题，于是我将cookie换成了session试了一下，结果本地运行也出了问题，报了这个错误：</p>

<p>Cannot modify header information - headers already sent by&hellip;&hellip;</p>

<p>这是十分常见的错误，原因是session_start（）前已经有了输出，但我仔细检查代码后也没发现有什么输出。在网上查了一些资料后，终于发现一个可能的原因，那就是BOM头的问题。</p>

<p>BOM头是在utf-8编码文件中BOM在文件头部，占用三个字节，用来标示该文件属于utf-8编码。这三个字节便是session_start()前的输出。将文件格式改成无BOM头的utf-8后，问题果然解决了，SAE上也运行成功。</p>

<p>至于为什么在本地环境setcookie可以成功我则一直想不通，略奇怪啊。</p>

<p> </p>
]]></content>
        </item>
        
        <item>
            <title>新手学WEB开发杂记（一）——平台推荐</title>
            <link>https://qxzzf.com/posts/%E6%96%B0%E6%89%8B%E5%AD%A6web%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0%E4%B8%80%E5%B9%B3%E5%8F%B0%E6%8E%A8%E8%8D%90/</link>
            <pubDate>Tue, 09 Apr 2013 21:36:06 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E6%96%B0%E6%89%8B%E5%AD%A6web%E5%BC%80%E5%8F%91%E6%9D%82%E8%AE%B0%E4%B8%80%E5%B9%B3%E5%8F%B0%E6%8E%A8%E8%8D%90/</guid>
            <description>在初学PHP时，我选择了SAE作为托管代码的平台。SAE是一个不错的平台，虽然也有不少缺点和问题，但新浪对个体开发者及小型开发团队的态度真是十分地让我感动。具体的我也就不细说了，总而言之我个人非常推荐初学者来使用SAE这个平台。
在SAE上开发比在本地开发多很多限制，这使得很多时候在本地很容易实现的东西在移植到SAE上时会多花很多时间和精力。不过这也并非全然是坏事，有时候也正因为这样我们才能发现我们的代码中一些原本没发现的问题。
另外终于在前几天通过了SAE中级开发者认证，真的很开心，SAE工作人员的人性化让我很感激，不知道什么时候证书才能寄到。本来如果早点在SAE上开发应用，就可以在中级开发者认证要求比较松的时候就通过了，结果拖到现在╮(￣▽￣&amp;rdquo;)╭&amp;hellip; 有了这个条件，以后一定要尽力开发出更好的应用呢。
 </description>
            <content type="html"><![CDATA[<p>在初学PHP时，我选择了SAE作为托管代码的平台。SAE是一个不错的平台，虽然也有不少缺点和问题，但新浪对个体开发者及小型开发团队的态度真是十分地让我感动。具体的我也就不细说了，总而言之我个人非常推荐初学者来使用SAE这个平台。</p>

<p>在SAE上开发比在本地开发多很多限制，这使得很多时候在本地很容易实现的东西在移植到SAE上时会多花很多时间和精力。不过这也并非全然是坏事，有时候也正因为这样我们才能发现我们的代码中一些原本没发现的问题。</p>

<p>另外终于在前几天通过了SAE中级开发者认证，真的很开心，SAE工作人员的人性化让我很感激，不知道什么时候证书才能寄到。本来如果早点在SAE上开发应用，就可以在中级开发者认证要求比较松的时候就通过了，结果拖到现在╮(￣▽￣&rdquo;)╭&hellip;  有了这个条件，以后一定要尽力开发出更好的应用呢。</p>

<p> </p>
]]></content>
        </item>
        
        <item>
            <title>新手学PHP两个月后的体会总结</title>
            <link>https://qxzzf.com/posts/%E6%96%B0%E6%89%8B%E5%AD%A6php%E4%B8%A4%E4%B8%AA%E6%9C%88%E5%90%8E%E7%9A%84%E4%BD%93%E4%BC%9A%E6%80%BB%E7%BB%93/</link>
            <pubDate>Sun, 07 Apr 2013 21:28:58 +0000</pubDate>
            
            <guid>https://qxzzf.com/posts/%E6%96%B0%E6%89%8B%E5%AD%A6php%E4%B8%A4%E4%B8%AA%E6%9C%88%E5%90%8E%E7%9A%84%E4%BD%93%E4%BC%9A%E6%80%BB%E7%BB%93/</guid>
            <description>正式开始学习PHP开发已经快两个月了，这两个月间有写得废寝忘食的时候，也有什么都不愿动的时候。想来是该时候总结一下了。
首先，不管学什么编程语言，首要的都是选择一些比较优秀的书籍。如果刚开始学习的时候选择的书不够好，则很可能对接下来的学习产生很多不利的影响。就博主自身经验来说，由于刚开始学习时选择了一本比较粗劣过时的PHP教程，所以刚开始开发的几个小应用在后来都进行了比较大的改动，十分费时费力。具体选择书籍时，我觉得以清华大学出版社、高等教育出版社、机械工业出版社等几个比较老牌的出版社出版的书籍为佳，当然这也只是博主的经验之谈，肯定不会对所有人和所有书籍都适用，但绝对可以作为参考。另外，博主建议初学时可以多找些不同类型的书进行参考，比如找一本从入门到精通类、一本项目实战类、一本深入剖析类的书籍来进行学习。这样一来可以入门方面的基础知识，二来可以尽快地将学到的知识加以运用，而深入的剖析也是必不可少的，也许很多刚开始看不懂的东西在自己进行了一定的开发经验后则能慢慢理解了。还有就是，一般越新的书里的内容越有参考价值，有能力可以阅读一些英文原版书籍。
其次就是找一个顺手的编辑工具了。目前主要的PHP编辑工具有Notepad++、PHPDesigner、Eclipse+PDT、Bluefish、PHPCoder、PHP Editor、NetBeans、PSPad、EditPlus、Dreamweaver、Zend Studio等。其中有一些是功能强大的文本编辑器，有些则是集成开发环境（如果对这两个概念不熟悉的话，只需知道记事本属于文本编辑器，VisualStudio属于集成开发环境就大概能理解了）。关于这些编辑软件的特点和优劣已经有很多人写过了，在这里就不再赘述。博主自己一般用的是Notepad++，此款编辑器功能十分强大而且体积很小，十分推荐。而进行Web开发写前台也是必不可少的，如果是自己进行学习的话，html、js、css等也必须自己来写，写html、css时dreamweaver也是一个不错的选择。
最后再有就是学习Web开发时时常去一些专业网站和技术博客来学习一些最新的相关知识和浏览相关的新闻也是必不可少的。PHP学习方面的专业网站主要有PHPChina、PHP100、PHPbest等，其他一些综合网站比如csdn、chinaUnix，开源中国社区等也很适合去学习。
等学习一段时间有一定基础之后，可以找一些知名的开源产品进行研究学习，如WordPress，Discuz！等。通过这些研究，如果能自己开发出一套开源的产品那是最好了。</description>
            <content type="html"><![CDATA[<p>正式开始学习PHP开发已经快两个月了，这两个月间有写得废寝忘食的时候，也有什么都不愿动的时候。想来是该时候总结一下了。</p>

<p>首先，不管学什么编程语言，首要的都是选择一些比较优秀的书籍。如果刚开始学习的时候选择的书不够好，则很可能对接下来的学习产生很多不利的影响。就博主自身经验来说，由于刚开始学习时选择了一本比较粗劣过时的PHP教程，所以刚开始开发的几个小应用在后来都进行了比较大的改动，十分费时费力。具体选择书籍时，我觉得以清华大学出版社、高等教育出版社、机械工业出版社等几个比较老牌的出版社出版的书籍为佳，当然这也只是博主的经验之谈，肯定不会对所有人和所有书籍都适用，但绝对可以作为参考。另外，博主建议初学时可以多找些不同类型的书进行参考，比如找一本从入门到精通类、一本项目实战类、一本深入剖析类的书籍来进行学习。这样一来可以入门方面的基础知识，二来可以尽快地将学到的知识加以运用，而深入的剖析也是必不可少的，也许很多刚开始看不懂的东西在自己进行了一定的开发经验后则能慢慢理解了。还有就是，一般越新的书里的内容越有参考价值，有能力可以阅读一些英文原版书籍。</p>

<p>其次就是找一个顺手的编辑工具了。目前主要的PHP编辑工具有Notepad++、PHPDesigner、Eclipse+PDT、Bluefish、PHPCoder、PHP Editor、NetBeans、PSPad、EditPlus、Dreamweaver、Zend Studio等。其中有一些是功能强大的文本编辑器，有些则是集成开发环境（如果对这两个概念不熟悉的话，只需知道记事本属于文本编辑器，VisualStudio属于集成开发环境就大概能理解了）。关于这些编辑软件的特点和优劣已经有很多人写过了，在这里就不再赘述。博主自己一般用的是Notepad++，此款编辑器功能十分强大而且体积很小，十分推荐。而进行Web开发写前台也是必不可少的，如果是自己进行学习的话，html、js、css等也必须自己来写，写html、css时dreamweaver也是一个不错的选择。</p>

<p>最后再有就是学习Web开发时时常去一些专业网站和技术博客来学习一些最新的相关知识和浏览相关的新闻也是必不可少的。PHP学习方面的专业网站主要有PHPChina、PHP100、PHPbest等，其他一些综合网站比如csdn、chinaUnix，开源中国社区等也很适合去学习。</p>

<p>等学习一段时间有一定基础之后，可以找一些知名的开源产品进行研究学习，如WordPress，Discuz！等。通过这些研究，如果能自己开发出一套开源的产品那是最好了。</p>
]]></content>
        </item>
        
    </channel>
</rss>
